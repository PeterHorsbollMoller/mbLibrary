'*******************************************************************************
'** 	Created By Peter Horsbøll Møller, Pitney Bowes Software
'** 	Program:
'** 	Modul:
'**
'*******************************************************************************

'-------------------------------------
Include "MapBasic.def"
Include "Enums.def"
Include "Icons.def"
Include "Menu.def"
Include "IMapInfoPro.def"
'**default constants...
Include "Defaults.def"
Include "RibbonElements.def"

'-------------------------------------
Include "ARRAYLib.def"
Include "DEBUGLib.def"
Include "ERRORLib.def"
Include "RIBBONLib.def"
Include "WinAPI 1522.def"

	'**Temporary function for registering public custom MapBasic functions in MapInfo Pro
	Declare Method _RegisterPublicMBXFunction Class "MapInfo.Types.IMapBasicApplication" Lib "MapInfo.Types, Version=12.5.0.0, Culture=neutral, PublicKeyToken=1c8d81d2ee78b75d"
		Alias RegisterPublicFunction
			( ByVal IMBXInstance As This
			, ByVal functionName As String
			, ByVal publicName as String
			, ByVal description as String
			) As Integer
	Declare Method _UnregisterPublicMBXFunction Class "MapInfo.Types.IMapBasicApplication" Lib "MapInfo.Types, Version=12.5.0.0, Culture=neutral, PublicKeyToken=1c8d81d2ee78b75d"
		Alias UnregisterPublicFunction
			( ByVal IMBXInstance As This
			, ByVal fcnid As Integer
			)

'Declare Sub RBInitialControlArrays
Declare Function RBNGetImageStringFromControlName(ByVal sControlName As String) As String
Declare Function RBNGetCommandIDFromControlName(ByVal sControlName As String) As String
Declare Function RBNGetImageStringFromTabAndGroup(  ByVal sRbnTabName As String
										, ByVal sRbnGroupName As String
										) As String
Declare Function RBNAddElement(	  ByVal sTabName As String
							, ByVal sGroupName As String
							, ByVal sSplitButtonName As String
							, ByVal sSplitButtonGroupName As String
							, ByVal sControlName As String
							, ByVal nControlType As Integer
							, ByVal nParentControlType As Integer
							) As Integer
Declare Function RBNRemoveElement(	  ByVal sTabName As String
							, ByVal sGroupName As String
							, ByVal sSplitButtonName As String
							, ByVal sSplitButtonGroupName As String
							, ByVal sControlName As String
							) As Integer
Declare Function RBNGetElementIndex( ByVal sTabName As String
							, ByVal sGroupName As String
							, ByVal sSplitButtonName As String
							, ByVal sSplitButtonGroupName As String
							, ByVal sControlName As String
							) As Integer
Declare Function RBNGetElementIndexOffset(	  ByVal sTabName As String
									, ByVal sGroupName As String
									, ByVal sSplitButtonName As String
									, ByVal sSplitButtonGroupName As String
									, ByVal sControlName As String
									, ByVal nOffset As Integer
									) As Integer
Declare Function RBNGetPrevTabElementIdx(	  ByVal sTabName As String
									) As Integer
Declare Function RBNGetPrevGroupElementIdx(	  ByVal sTabName As String
									, ByVal sGroupName As String
									) As Integer
Declare Function RBNGetPrevSplitButtonElementIdx(	  ByVal sTabName As String
										, ByVal sGroupName As String
										, ByVal sSplitButtonName As String
										) As Integer
Declare Function RBNGetPrevSplitButtonGroupElementIdx(	  ByVal sTabName As String
											, ByVal sGroupName As String
											, ByVal sSplitButtonName As String
											, ByVal sSplitButtonGroupName As String
											) As Integer
Declare Function RBNGetPrevDropDButtonElementIdx(	  ByVal sTabName As String
										, ByVal sGroupName As String
										, ByVal sDropDButtonName As String
										) As Integer
Declare Function RBNGetPrevDropDButtonGroupElementIdx(	  ByVal sTabName As String
											, ByVal sGroupName As String
											, ByVal sDropDButtonName As String
											, ByVal sDropDButtonGroupName As String
											) As Integer


'Dim	theMapInfoApplication As This,
'	theMapBasicApplication As This,
'	theMapInfoEvents As This,
'	theStatusbar As This,
'	theStatusbarControlsColl As This,
'	theRibbon As This,
'	theBackstage As This,
'	theQAT As This,
'	theToolContextMenu As This,
'	theTabsColl As This,
'	theToolContextMenuItemsColl As This,
'	theContextMenus As This,
'	theMapMTB As This,
'	theMapMTBControlsColl As This,
'	theNotification As This,
Dim	mbHasBeenInitiated As Logical,
	mbToolTipShowHelpText As Logical,	'Defines if a tooltip should show "Press F1 for more help", off by default
	mnTooltipPlacement As Integer		'Defines the position of a tooltip for a control - defaults to Place_RelativePoint

Dim	marrControlName(), marrImageName(), marrCommandID() As String

'**These variables keep track of which public functions have been registered
Dim	mnNumPublicFunctions As Integer,
	marrPublicFunctionIDs() As Integer,
	marrPublicFunctionNames() As String

'**These variables keep track of which controls have been added where
Dim	marrControls(), marrParentControlColls() As This,
	marrTabNames(), marrGroupNames(), marrSplitButtonNames(), marrSplitButtonGroupNames(), marrControlNames() As String,
	marrControlTypes(), marrParentControlTypes() As Integer,
	mnNumElements As Integer

'**These variables keep track of which events have been subscribed
Dim 	mnNumEvents As Integer,
	marrEventTypes() As Integer,
	marrEventMBXHandlers() As String,
	mfDefaultLeftMarginInControls As Float	'Default Left Margin for Controls, defaults to 4.0

'**Used for GetFirst/GetNext Control
Dim	msTabName, msGroupName, msControlName As String,
	mnCurCtrlIdx As Integer

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNControlGetTypeName(ByVal nCtrlType As Integer) As String

OnError GoTo ErrorOccured

	Do Case nCtrlType
		Case ControlType_Button 				'1
			RBNControlGetTypeName	= "Button"
		Case ControlType_ToolButton			'2
			RBNControlGetTypeName	= "ToolButton"
		Case ControlType_RibbonMenuItem		'3
			RBNControlGetTypeName	= "RibbonMenuItem"
		Case ControlType_RibbonButtonPanel		'4
			RBNControlGetTypeName	= "RibbonButtonPanel"
		Case ControlType_RibbonSeparator 		'5
			RBNControlGetTypeName	= "RibbonSeparator"
		Case ControlType_ContextMenuItem		'6
			RBNControlGetTypeName	= "ContextMenuItem"
		Case ControlType_ContextMenuSeparator 	'7
			RBNControlGetTypeName	= "ContextMenuSeparator"
		Case ControlType_MenuItemSeparator		'8
			RBNControlGetTypeName	= "MenuItemSeparator"
		Case ControlType_DropDownButton		'9
			RBNControlGetTypeName	= "DropDownButton"
		Case ControlType_SplitButton			'10
			RBNControlGetTypeName	= "SplitButton"
		Case ControlType_DropDownMenuGroup		'11
			RBNControlGetTypeName	= "DropDownMenuGroup"
		Case ControlType_GalleryControl		'12
			RBNControlGetTypeName	= "GalleryControl"
		Case ControlType_GalleryItem			'13
			RBNControlGetTypeName	= "GalleryItem"
		Case ControlType_GalleryGroup			'14
			RBNControlGetTypeName	= "GalleryGroup"
		Case ControlType_CustomControl		'15
			RBNControlGetTypeName	= "CustomControl"
		Case ControlType_TextBlock			'16
			RBNControlGetTypeName	= "TextBlock"
		Case ControlType_Image				'17
			RBNControlGetTypeName	= "Image"
		Case ControlType_BackStageTabItem		'18
			RBNControlGetTypeName	= "BackStageTabItem"
		Case ControlType_BackStageButton		'19
			RBNControlGetTypeName	= "BackStageButton"
		Case ControlType_BackStageTabSection	'20
			RBNControlGetTypeName	= "BackStageTabSection"
		Case ControlType_BackStageSeparator	'21
			RBNControlGetTypeName	= "BackStageSeparator"
		Case ControlType_StackPanel			'22
			RBNControlGetTypeName	= "StackPanel"
		Case ControlType_CheckBox			'23
			RBNControlGetTypeName	= "CheckBox"
		Case ControlType_RadioButton			'24
			RBNControlGetTypeName	= "RadioButton"
		Case ControlType_WrapPanel			'25
			RBNControlGetTypeName	= "WrapPanel"
		Case ControlType_Unknown				'26
			RBNControlGetTypeName	= "Unknown"
	End Case

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlGetTypeName")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNInitiate

OnError GoTo ErrorOccured

	If mbHasBeenInitiated Then
		Exit Sub
	End If

	mfDefaultLeftMarginInControls	= 4.0
	mnTooltipPlacement				= Place_RelativePoint

	'--------------------------------
	'Get MIPro interface
	theMapInfoApplication	= SystemInfo(SYS_INFO_IMAPINFOAPPLICATION)
	'Get Ribbon
	theRibbon 				= GetRibbon(theMapInfoApplication)
	'Get the Statusbar
	theStatusbar			= GetStatusBar(theMapInfoApplication)
	theStatusbarControlsColl	= GetIStatusBarCtrls(theStatusbar)
	'Get Tabs Collection
	theTabsColl 			= GetTabsColl(theRibbon)
	'Get the QAT
	theQAT				= GetMIProQAT(theMapInfoApplication)
	'Get the Backstage
	theBackstage			= GetRibbonBackStage(theMapInfoApplication)

	Call RegisterUriParser(New_GenericUriParser(1), "pack", -1)

	'--------------------------------
	'Get MapBasic interface
	theMapBasicApplication	= MapBasicApplication(theMapInfoApplication, ApplicationName$())
	'Get the events for the MapBasic application
	theMapInfoEvents		= MIEventsInitEvents(theMapInfoApplication, theMapBasicApplication)
	'Get the Notification window
	theNotification = New_NotificationObject ()

	'--------------------------------
	'Get the Context Menu for the MapBasic application
	theToolContextMenu 			= GetIMBXMenu(theMapBasicApplication)
	theToolContextMenuItemsColl	= GetICntxtMnuCtrls(theToolContextMenu)

	'--------------------------------
	'Get the ContextMenus Collection
	theContextMenus		= GetContextMenus(theMapInfoApplication)

	'--------------------------------
	'Get the Groups Collection for the Map MiniToolbar
	theMapMTB				= GetICntxtMnusMapMiniToolBar(theContextMenus)
	theMapMTBControlsColl	= GetIMapMiniToolBarCtrls(theMapMTB)

	mbHasBeenInitiated = TRUE

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNInitiate")
	Call ERRShow()

End Sub

'*******************************************************************************************************
'** WORKING WITH BACKSTAGE **********************************************************************************
'*******************************************************************************************************

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'
'**********************************************************************************************''
Sub RBNBackstageEnable(	  ByVal bEnabled As Logical)

OnError GoTo ErrorOccured

	Call SetRbnBackStageEnabled(theBackstage, bEnabled)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNBackstageEnable")
	Call ERRShow()

End Sub
'**********************************************************************************************''
Function RBNBackstageIsEnabled() As Logical

OnError GoTo ErrorOccured

	RBNBackstageIsEnabled = GetRbnBackStageEnabled(theBackstage)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNBackstageIsEnabled")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'
'**********************************************************************************************''
Sub RBNBackstageSetCaption(  ByVal sCaption As String)

OnError GoTo ErrorOccured

	Call SetRbnBackStageCaption(theBackstage, sCaption)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNBackstageSetCaption")
	Call ERRShow()

End Sub
'**********************************************************************************************''
Function RBNBackstageGetCaption() As String

OnError GoTo ErrorOccured

	RBNBackstageGetCaption = GetRbnBackStageCaption(theBackstage)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNBackstageSetCaption")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'
'**********************************************************************************************''
Sub RBNBackstageSetVisibility(	  ByVal bVisible As Logical)

OnError GoTo ErrorOccured

	Call SetRbnBackStageVisible(theBackstage, bVisible)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNBackstageSetVisibility")
	Call ERRShow()

End Sub
'**********************************************************************************************''
Function RBNBackstageGetVisibility() As Logical

OnError GoTo ErrorOccured

	RBNBackstageGetVisibility = GetRbnBackStageVisible(theBackstage)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNBackstageGetVisibility")
	Call ERRShow()

End Function

'*******************************************************************************************************
'** WORKING WITH TABS **********************************************************************************
'*******************************************************************************************************

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNAddTab(		  ByVal sTabName As String
					, ByVal sCaption As String
					, ByVal sKeytip As String
					) As Integer

Dim	nCtrl As Integer

OnError GoTo ErrorOccured

RBNAddTab = 0

	Call RBNInitiate

	nCtrl = RBNAddElement(sTabName, "", "", "", "", CONTROL_TYPE_RLIB_TAB, 0)

	'Add a new Tab to theTabsColl collection
	marrParentControlColls(nCtrl)	= theTabsColl
	marrControls(nCtrl) 		= RbnTabCollAddStrStr(marrParentControlColls(nCtrl), sTabName, sCaption)

	If sKeytip <> "" Then
		'Set the KeyTip for the RibbonTab. KeyTip: The keyboard shortcut for
		'the tab. A KeyTip must have from 1 to 3 uppercase characters.
		Call SetRbnItemKeyTip(marrControls(nCtrl), sKeytip)
	End If

	RBNAddTab = nCtrl

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNAddTab: " & sTabName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNInsertTab(	  ByVal sTabName As String
					, ByVal sCaption As String
					, ByVal sKeytip As String
					, ByVal nPosition As Integer
					) As Integer					'Returns the modular Idx of the tab or 0, if it wasn't created

Dim	nCtrl As Integer

OnError GoTo ErrorOccured

RBNInsertTab = 0

	Call RBNInitiate

	nCtrl = RBNAddElement(sTabName, "", "", "", "", CONTROL_TYPE_RLIB_TAB, 0)

	'Add a new Tab to theTabsColl collection
	marrParentControlColls(nCtrl)	= theTabsColl
	marrControls(nCtrl) 		= RbnTabCollInsertIntStrStr(marrParentControlColls(nCtrl), nPosition, sTabName, sCaption)

	If sKeytip <> "" Then
		'Set the KeyTip for the RibbonTab. KeyTip: The keyboard shortcut for
		'the tab. A KeyTip must have from 1 to 3 uppercase characters.
		Call SetRbnItemKeyTip(marrControls(nCtrl), sKeytip)
	End If


RBNInsertTab = TRUE

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNInsertTab")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNInsertTabAfter(	  ByVal sTabName As String
						, ByVal sCaption As String
						, ByVal sKeytip As String
						, ByVal sNameAfter As String
						) As Integer					'Returns the modular Idx of the tab or 0, if it wasn't created

Dim	nPosition As Integer

OnError GoTo ErrorOccured

RBNInsertTabAfter = 0

	nPosition = RBNGetTabIndex(sNameAfter)
	If nPosition = RBN_ELEMENT_NOT_FOUND Then
		RBNInsertTabAfter 	= RBNAddTab(sTabName, sCaption, sKeytip)
	Else
		nPosition			= nPosition + 1
		RBNInsertTabAfter 	= RBNInsertTab(sTabName, sCaption, sKeytip, nPosition)
	End If

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNInsertTabAfter")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNInsertTabBefore(	  ByVal sTabName As String
						, ByVal sCaption As String
						, ByVal sKeytip As String
						, ByVal sNameBefore As String
						) As Integer					'Returns the modular Idx of the tab or 0, if it wasn't created

Dim	nPosition As Integer

OnError GoTo ErrorOccured

RBNInsertTabBefore = 0

	nPosition = RBNGetTabIndex(sNameBefore)
	If nPosition = RBN_ELEMENT_NOT_FOUND Then
		RBNInsertTabBefore 	= RBNAddTab(sTabName, sCaption, sKeytip)
	Else
		RBNInsertTabBefore 	= RBNInsertTab(sTabName, sCaption, sKeytip, nPosition)
	End If

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNInsertTabBefore")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNRemoveTab(	  ByVal sTabName As String
					) As Integer

Dim	rbnTab As This,
	nCtrl, nTabItem As Integer

OnError GoTo ErrorOccured

RBNRemoveTab = 0

	Call RBNInitiate

	nTabItem	= RBNGetTabIndex(sTabName)
	If nTabItem > RBN_ELEMENT_NOT_FOUND Then
		Call RbnTabCollRemoveAt(theTabsColl, nTabItem)

		nCtrl = RBNRemoveElement(sTabName, "", "", "", "")
		RBNRemoveTab = nCtrl
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnTab		= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNRemoveTab: " & sTabName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Sub RBNSetVisibility(	  ByVal bVisible As Logical)

OnError GoTo ErrorOccured

	Call RBNInitiate

	Call SetRbnVisible(theRibbon, bVisible)

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNSetVisibility")
	Call ERRShow()

End Sub
'**********************************************************************************************''
Function RBNGetVisibility() As Logical

OnError GoTo ErrorOccured

	Call RBNInitiate

	RBNGetVisibility = GetRbnVisible(theRibbon)

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGetVisibility")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNTabSetToolTipThs(	  rbnTab As This
					, ByVal sText As String
					, ByVal sDescription As String
					, ByVal sDisabledText As String)

OnError GoTo ErrorOccured

	Call RBNControlSetToolTipThs(rbnTab, sText, sDescription, sDisabledText)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNTabSetToolTip")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNTabSetToolTip( ByVal sTabName As String
				, ByVal sText As String
				, ByVal sDescription As String
				, ByVal sDisabledText As String)

Dim	rbnTabFound As RefPtr,
	rbnTab As This

OnError GoTo ErrorOccured

	Call RBNInitiate

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound
		Call RBNTabSetToolTipThs(rbnTab, sText, sDescription, sDisabledText)
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnTabFound 	= NULL_PTR
'	rbnTab		= NULL_PTR

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNTabSetToolTip")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNTabSetToolTipIdx(	  ByVal nElementIdx As Integer
					, ByVal sText As String
					, ByVal sDescription As String
					, ByVal sDisabledText As String)

OnError GoTo ErrorOccured

	Call RBNTabSetToolTipThs(marrControls(nElementIdx), sText, sDescription, sDisabledText)

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNTabSetToolTipIdx")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNTabEnableThs(  ByVal rbnTab As This
				, ByVal bEnabled As Logical)

OnError GoTo ErrorOccured

	Call SetRbnTabEnabled(rbnTab, bEnabled)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNTabEnableThs")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNTabEnableIdx(  ByVal nElementIdx As Integer
				, ByVal bEnabled As Logical)

OnError GoTo ErrorOccured

	Call RBNTabEnableThs(marrControls(nElementIdx), bEnabled)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNTabEnableIdx: " & nElementIdx)
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNTabEnable(	  ByVal sTabName As String
				, ByVal bEnabled As Logical)

Dim	rbnTabFound As RefPtr,
	rbnTab As This

OnError GoTo ErrorOccured

	Call RBNInitiate

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound
		Call SetRbnTabEnabled(rbnTab, bEnabled)
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnTabFound 	= NULL_PTR
'	rbnTab		= NULL_PTR

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNTabSetVisibility")
	Call ERRShow()

End Sub


'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNTabSetCaptionThs(	  ByVal rbnTab As This
					, ByVal sCaption As String)

OnError GoTo ErrorOccured

	Call SetRbnTabCaption(rbnTab, sCaption)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNTabSetCaptionThs")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNTabSetCaptionIdx(	  ByVal nElementIdx As Integer
					, ByVal sCaption As String)

OnError GoTo ErrorOccured

	Call RBNTabSetCaptionThs(marrControls(nElementIdx), sCaption)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNTabSetCaptionIdx: " & nElementIdx)
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNTabSetCaption(	  ByVal sTabName As String
					, ByVal sCaption As String)

Dim	rbnTabFound As RefPtr,
	rbnTab As This

OnError GoTo ErrorOccured

	Call RBNInitiate

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound
		Call SetRbnTabCaption(rbnTab, sCaption)
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnTabFound 	= NULL_PTR
'	rbnTab		= NULL_PTR

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNTabSetCaption")
	Call ERRShow()

End Sub


'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNTabSetVisibilityThs(	  ByVal rbnTab As This
						, ByVal bVisible As Logical)

OnError GoTo ErrorOccured

	Call SetRbnTabVisible(rbnTab, bVisible)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNTabSetVisibilityThs")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNTabSetVisibilityIdx(	  ByVal nElementIdx As Integer
						, ByVal bVisible As Logical)

OnError GoTo ErrorOccured

	Call RBNTabSetVisibilityThs(marrControls(nElementIdx), bVisible)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNTabSetVisibilityIdx: " & nElementIdx)
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNTabSetVisibility(	  ByVal sTabName As String
					, ByVal bVisible As Logical)

Dim	rbnTabFound As RefPtr,
	rbnTab As This

OnError GoTo ErrorOccured

	Call RBNInitiate

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound
		Call SetRbnTabVisible(rbnTab, bVisible)
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnTabFound 	= NULL_PTR
'	rbnTab		= NULL_PTR

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNTabSetVisibility")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGetTab(	  ByVal sTabName As String
				, rbnTabFound As RefPtr
				) As Logical

Dim	nTabIndex As Integer,
	rbnTabItem as This

OnError GoTo ErrorOccured

RBNGetTab = FALSE

	nTabIndex	= RBNGetTabIndex(sTabName)
	If nTabIndex > RBN_ELEMENT_NOT_FOUND Then
		rbnTabItem	= GetRbnTabCollItemInt(theTabsColl, nTabIndex)
		rbnTabFound	= rbnTabItem
		RBNGetTab		= TRUE
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnTabItem	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGetTab")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGetTabIndex(	ByVal sTabName As String
					) As Integer

Dim i, nNumTabs As Integer,
	sName, sCaption As String,
	rbnTabItem as This

OnError GoTo ErrorOccured

RBNGetTabIndex = RBN_ELEMENT_NOT_FOUND

	Call RBNInitiate

	nNumTabs = GetRbnTabCollCount(theTabsColl)
'	Call DEBUGPrint("Number of Tabs " & nNumTabs)
	For i = 0 To (nNumTabs - 1)	'**First element is at position 0, not as normally in MapBasic at position 1
		rbnTabItem = GetRbnTabCollItemInt(theTabsColl, i)

		sName	= GetRbnTabName(rbnTabItem)
'		sCaption	= GetRbnTabCaption(rbnTabItem)
		Call DEBUGPrint("Tab " & i & " is named " & sName & " but shown as " & sCaption)

		If sName = sTabName Then
			RBNGetTabIndex	= i
'			rbnTabItem	= NULL_PTR

			Exit Function
		End If
	Next

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnTabItem		= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGetTabIndex")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNTabExists(	  ByVal sTabName As String
					) As Logical

OnError GoTo ErrorOccured

	RBNTabExists = (RBNGetTabIndex(sTabName) > RBN_ELEMENT_NOT_FOUND)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNTabExists")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNSelectTab(	  ByVal sTabName As String)

Dim	rbnTabFound As RefPtr,
	rbnTab As This

OnError GoTo ErrorOccured

	Call RBNInitiate

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound
		Call SetRbnTabIsSelected(rbnTab, TRUE)
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnTabFound 	= NULL_PTR
'	rbnTab		= NULL_PTR

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNSelectTab")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNTabExistsCaption(	  ByVal sTabCaption As String
						) As Logical

OnError GoTo ErrorOccured

	RBNTabExistsCaption = (RBNTabGetNameFromCaption(sTabName) <> "")
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNTabExistsCaption")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNTabGetNameFromCaption(	  ByVal sTabCaption As String
							) As String

OnError GoTo ErrorOccured

Dim i, nNumTabs As Integer,
	sName, sCaption As String,
	rbnTabItem as This

OnError GoTo ErrorOccured

RBNTabGetNameFromCaption = ""

	Call RBNInitiate

	nNumTabs = GetRbnTabCollCount(theTabsColl)
'	Call DEBUGPrint("Number of Tabs " & nNumTabs)
	For i = 0 To (nNumTabs - 1)	'**First element is at position 0, not as normally in MapBasic at position 1
		rbnTabItem = GetRbnTabCollItemInt(theTabsColl, i)

		sName	= GetRbnTabName(rbnTabItem)
		sCaption	= GetRbnTabCaption(rbnTabItem)
'		Call DEBUGPrint("Tab " & i & " is named " & sName & " but shown as " & sCaption)

		If sCaption = sTabCaption Then
			RBNTabGetNameFromCaption	= sName
			Exit For
		End If
	Next

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnTabItem		= NULL_PTR
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNTabGetNameFromCaption: Caption: " & sTabCaption)
	Call ERRShow()

End Function


'*******************************************************************************************************
'** WORKING WITH GROUPS ON TABS ************************************************************************
'*******************************************************************************************************

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Function RBNTabNumGroups(	  ByVal sTabName As String
						) As Integer

Dim	rbnTabFound As RefPtr,
	rbnTab, rbnGroupsColl As This

OnError GoTo ErrorOccured

RBNTabNumGroups = 0

	Call RBNInitiate

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

		rbnGroupsColl		= GetRbnTabGrps(rbnTab)
		RBNTabNumGroups	= GetRbnCtrlGrpCollCount(rbnGroupsColl)
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnTabFound	= NULL_PTR
'	rbnTab		= NULL_PTR
'	rbnGroupsColl	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNTabNumGroups")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNTabAddGroup(	  ByVal sGroupName As String
					, ByVal sCaption As String
					, ByVal sTabName As String
					) As Integer

Dim	rbnTab As This,
'	rbnGroupsColl as This,
	rbnTabFound As RefPtr,
	rbnGroupFound As RefPtr,
	nCtrl, nPrevIdx As Integer

OnError GoTo ErrorOccured

RBNTabAddGroup = 0

	Call RBNInitiate

	nPrevIdx	= RBNGetPrevTabElementIdx(sTabName)
	If nPrevIdx > 0 and mnNumElements > 0 Then
		Call DEBUGPrint("RBNTabAddGroup Calling RBNTabAddGroupIdx, nRevIdx=" & nPrevIdx)
		RBNTabAddGroup	= RBNTabAddGroupIdx(sGroupName, sCaption, nPrevIdx)
		Exit Function
	End If

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

		nCtrl = RBNAddElement(sTabName, sGroupName, "", "", "", CONTROL_TYPE_RLIB_GROUP, 0)

		'Get the ribbon group collection.
		'rbnGroupsColl	= GetRbnTabGrps(rbnTab)
		marrParentControlColls(nCtrl)	= GetRbnTabGrps(rbnTab)

		'Add a new group.
		'marrControls(nCtrl)	= RbnCtrlGrpCollAddStrStr(rbnGroupsColl, sGroupName, sCaption)
		marrControls(nCtrl)		= RbnCtrlGrpCollAddStrStr(marrParentControlColls(nCtrl), sGroupName, sCaption)

		'Disable the RibbonDialogLauncher. (A RibbonDialogLauncher is displayed in the
		'lower-right corner of a group by default.)
		Call SetRbnCtrlGrpIsLauncherVisible(marrControls(nCtrl), FALSE)

		RBNTabAddGroup = nCtrl
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnGroupsColl	= NULL_PTR
'	rbnTabFound	= NULL_PTR
'	rbnGroupFound	= NULL_PTR
'	rbnTab		= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNTabAddGroup: " & sGroupName & " on tab " & sTabName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNTabAddGroupThs(	  ByVal sGroupName As String
						, ByVal sCaption As String
						, ByVal rbnTab As This
						) As Integer

Dim	nCtrl As Integer

OnError GoTo ErrorOccured

RBNTabAddGroupThs = 0

	Call RBNInitiate

	Call DEBUGPrint("RBNTabAddGroupThs, Value of rbnTab: " & rbnTab)
	nCtrl = RBNAddElement(GetRbnTabName(rbnTab), sGroupName, "", "", "", CONTROL_TYPE_RLIB_GROUP, 0)

	'Get the ribbon group collection.
	marrParentControlColls(nCtrl)	= GetRbnTabGrps(rbnTab)

	'Add a new group.
	marrControls(nCtrl)			= RbnCtrlGrpCollAddStrStr(marrParentControlColls(nCtrl), sGroupName, sCaption)

	'Disable the RibbonDialogLauncher. (A RibbonDialogLauncher is displayed in the
	'lower-right corner of a group by default.)
	Call SetRbnCtrlGrpIsLauncherVisible(marrControls(nCtrl), FALSE)

	RBNTabAddGroupThs = nCtrl

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNTabAddGroupThs: " & sGroupName & " on tab " & sTabName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNTabAddGroupIdx(	  ByVal sGroupName As String
						, ByVal sCaption As String
						, ByVal nTabIdx As Integer
						) As Integer

OnError GoTo ErrorOccured

	Call DEBUGPrint("RBNTabAddGroupThs, Value of nTabIdx: " & nTabIdx & " Num Controls: " & Ubound(marrControls))
	RBNTabAddGroupIdx = RBNTabAddGroupThs(sGroupName, sCaption, marrControls(nTabIdx))

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNTabAddGroupIdx: " & sGroupName & " on tab index " & nTabIdx)
	Call ERRShow()

End Function


'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNTabGroupRemove(	  ByVal sGroupName As String
						, ByVal sTabName As String
						) As Integer

Dim	rbnGroup As This,
	rbnGroupsColl as This,
	rbnTabFound As RefPtr,
	rbnGroupFound As RefPtr,
	rbnTab As This,
	nCtrl, nGroupItem As Integer

OnError GoTo ErrorOccured

RBNTabGroupRemove = 0

	Call RBNInitiate

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

		nGroupItem = RBNTabGetGroupIndexThs(rbnTab, sGroupName)
		If nGroupItem > RBN_ELEMENT_NOT_FOUND Then
			'Get the ribbon group collection.
			rbnGroupsColl	= GetRbnTabGrps(rbnTab)
			'Remove the group
			Call RbnCtrlGrpCollRemoveAt(rbnGroupsColl, nGroupItem)

			nCtrl = RBNRemoveElement(sTabName, sGroupName, "", "", "")
			RBNTabGroupRemove = nCtrl
		End If
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnGroup		= NULL_PTR
'	rbnGroupsColl	= NULL_PTR
'	rbnTabFound	= NULL_PTR
'	rbnGroupFound	= NULL_PTR
'	rbnTab		= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNTabGroupRemove: " & sGroupName & " from tab " & sTabName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNTabGetGroupThs(	  rbnTab As This
						, ByVal sGroupName As String
						, rbnGroupFound As RefPtr
						) As Logical

Dim	i, nGroupIndex As Integer,
	rbnGroupsColl As This,
	rbnGroupItem As This

OnError GoTo ErrorOccured

RBNTabGetGroupThs = FALSE

	nGroupIndex	= RBNTabGetGroupIndexThs(rbnTab, sGroupName)
	If nGroupIndex > RBN_ELEMENT_NOT_FOUND Then
		rbnGroupsColl	= GetRbnTabGrps(rbnTab)

		rbnGroupItem 		= GetRbnCtrlGrpCollItemInt(rbnGroupsColl, nGroupIndex)
		rbnGroupFound		= rbnGroupItem

		RBNTabGetGroupThs	= TRUE
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnGroupsColl	= NULL_PTR
'	rbnGroupItem	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNTabGetGroupThs")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNTabGetGroup(	  ByVal sTabName As String
					, ByVal sGroupName As String
					, rbnGroupFound As RefPtr
					) As Logical

Dim	rbnTab As This,
	rbnTabFound As RefPtr

OnError GoTo ErrorOccured

RBNTabGetGroup = FALSE

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

		RBNTabGetGroup	= RBNTabGetGroupThs(rbnTab, sGroupName, rbnGroupFound)
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnTab		= NULL_PTR
'	rbnTabFound	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNTabGetGroup")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNTabGetGroupIndex(	  ByVal sTabName As String
						, ByVal sGroupName As String
						) As Integer

Dim	rbnTabFound As RefPtr,
	rbnTab As This

OnError GoTo ErrorOccured

RBNTabGetGroupIndex = RBN_ELEMENT_NOT_FOUND

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

		RBNTabGetGroupIndex	= RBNTabGetGroupIndexThs(rbnTab, sGroupName)
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnTabFound	= NULL_PTR
'	rbnTab		= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNTabGetGroupIndex")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNTabGetGroupIndexThs(	  rbnTab As This
							, ByVal sGroupName As String
							) As Integer

Dim	i, nNumGroups As Integer,
	sName, sCaption As String,
	rbnGroupsColl As This,
	rbnGroupItem As This

OnError GoTo ErrorOccured

RBNTabGetGroupIndexThs = RBN_ELEMENT_NOT_FOUND

'	Call DEBUGPrint("   RBNTabGetGroupIndexThs: Looking for " & sGroupName & " rbnTab = " & rbnTab)

	rbnGroupsColl = GetRbnTabGrps(rbnTab)
	nNumGroups = GetRbnCtrlGrpCollCount(rbnGroupsColl)
'	Call DEBUGPrint("   RBNTabGetGroupIndexThs: Number of Tab Groups " & nNumGroups)
	For i = 0 To (nNumGroups - 1)
		rbnGroupItem = GetRbnCtrlGrpCollItemInt(rbnGroupsColl, i)

		sName	= GetRbnCtrlGrpName(rbnGroupItem)
'		sCaption	= GetRbnCtrlGrpCaption(rbnGroupItem)
'		Call DEBUGPrint("   Tab Ctrl Group " & i & " is named " & sName & " but shown as " & sCaption)

		If sName = sGroupName Then
			RBNTabGetGroupIndexThs	= i
			Exit For
		End If
	Next

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnGroupsColl	= NULL_PTR
'	rbnGroupItem	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNTabGetGroupIndexThs")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNTabGroupExists(	  ByVal sTabName As String
						, ByVal sGroupName As String
						) As Logical

OnError GoTo ErrorOccured

	RBNTabGroupExists = (RBNTabGetGroupIndex(sTabName, sGroupName) > RBN_ELEMENT_NOT_FOUND)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNTabGroupExists")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNTabGroupExistsThs(  rbnTab As This
						, ByVal sGroupName As String
						) As Logical

OnError GoTo ErrorOccured

	RBNTabGroupExistsThs = (RBNTabGetGroupIndexThs(rbnTab, sGroupName) > RBN_ELEMENT_NOT_FOUND)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNTabGroupExistsThs")
	Call ERRShow()

End Function

'*******************************************************************************************************
'** WORKING WITH CONTROLS AND BUTTONS ON GROUPS ********************************************************
'*******************************************************************************************************

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Function RBNGroupNumControls(	  ByVal sGroupName As String
						, ByVal sTabName As String
						) As Integer

Dim	rbnTabFound, rbnGroupFound As RefPtr,
	rbnTab, rbnGroup, rbnControlsColl As This

OnError GoTo ErrorOccured

RBNGroupNumControls = 0

	Call RBNInitiate

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

		If RBNTabGetGroupThs(rbnTab, sGroupName, rbnGroupFound) Then
			rbnGroup				= rbnGroupFound

			rbnControlsColl 		= GetRbnCtrlGrpCtrls(rbnGroup)
			RBNGroupNumControls	= GetMICtrlCollCount(rbnControlsColl)
		End If
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnTabFound		= NULL_PTR
'	rbnGroupFound		= NULL_PTR
'	rbnTab			= NULL_PTR
'	rbnGroup			= NULL_PTR
'	rbnControlsColl	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupNumControls")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNGroupSetToolTipThs(	  rbnGroup As This
						, ByVal sText As String
						, ByVal sDescription As String
						, ByVal sDisabledText As String)

OnError GoTo ErrorOccured

	Call RBNControlSetToolTipThs(rbnGroup, sText, sDescription, sDisabledText)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupSetToolTip")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNGroupSetToolTip(	  ByVal sTabName As String
					, ByVal sGroupName As String
					, ByVal sText As String
					, ByVal sDescription As String
					, ByVal sDisabledText As String)

Dim	rbnTabFound, rbnGroupFound As RefPtr,
	rbnTab, rbnGroup As This

OnError GoTo ErrorOccured

	Call RBNInitiate

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

		If RBNTabGetGroupThs(rbnTab, sGroupName, rbnGroupFound) Then
			rbnGroup	= rbnGroupFound

			Call RBNGroupSetToolTipThs(rbnGroup, sText, sDescription, sDisabledText)
		End If
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnTabFound	= NULL_PTR
'	rbnGroupFound	= NULL_PTR
'	rbnTab		= NULL_PTR
'	rbnGroup		= NULL_PTR

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupSetToolTip")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNGroupSetToolTipIdx(	  ByVal nElementIdx As Integer
						, ByVal sText As String
						, ByVal sDescription As String
						, ByVal sDisabledText As String)

OnError GoTo ErrorOccured

	Call RBNGroupSetToolTip(marrControls(nElementIdx), marrGroupNames(nElementIdx), sText, sDescription, sDisabledText)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupSetToolTipIdx")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNGroupEnableThs(	  ByVal rbnGroup As This
					, ByVal bEnabled As Logical)

OnError GoTo ErrorOccured

	Call SetRbnCtrlGrpEnabled(rbnGroup, bEnabled)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNTabEnableThs")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNGroupEnableIdx(	  ByVal nElementIdx As Integer
					, ByVal bEnabled As Logical)

OnError GoTo ErrorOccured

	Call RBNGroupEnableThs(marrControls(nElementIdx), bEnabled)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupEnableIdx: " & nElementIdx)
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNGroupSetCaptionThs(	  ByVal rbnGroup As This
						, ByVal sCaption As String)

OnError GoTo ErrorOccured

	Call SetRbnCtrlGrpCaption(rbnGroup, sCaption)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupSetCaptionThs")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNGroupSetCaptionIdx(	  ByVal nElementIdx As Integer
						, ByVal sCaption As String)

OnError GoTo ErrorOccured

	Call RBNGroupSetCaptionThs(marrControls(nElementIdx), sCaption)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupSetCaptionIdx: " & nElementIdx)
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNGroupSetCaption(	  ByVal sTabName As String
					, ByVal sGroupName As String
					, ByVal sCaption As String)

Dim	rbnGroup As This,
	rbnTabFound As RefPtr,
	rbnGroupFound As RefPtr,
	rbnTab As This

OnError GoTo ErrorOccured

	Call RBNInitiate

'	Call DEBUGPrint("RBNGetTab")
	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

'		Call DEBUGPrint("RBNTabGetGroupThs")
		If RBNTabGetGroupThs(rbnTab, sGroupName, rbnGroupFound) Then

			rbnGroup = rbnGroupFound
			'Set Group Caption
			Call SetRbnCtrlGrpCaption(rbnGroup, sCaption)
		End If
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnGroup		= NULL_PTR
'	rbnTabFound	= NULL_PTR
'	rbnGroupFound	= NULL_PTR
'	rbnTab		= NULL_PTR

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupSetCaption")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNGroupSetVisibilityThs(	  ByVal rbnGroup As This
						, ByVal bVisible As Logical)

OnError GoTo ErrorOccured

	Call SetRbnCtrlGrpVisible(rbnGroup, bVisible)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupSetVisibilityThs")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNGroupSetVisibilityIdx(	  ByVal nElementIdx As Integer
						, ByVal bVisible As Logical)

OnError GoTo ErrorOccured

	Call RBNGroupSetVisibilityThs(marrControls(nElementIdx), bVisible)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupSetVisibilityIdx: " & nElementIdx)
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNGroupSetVisibility(	  ByVal sTabName As String
						, ByVal sGroupName As String
						, ByVal bVisible As Logical)

Dim	rbnGroup As This,
	rbnTabFound As RefPtr,
	rbnGroupFound As RefPtr,
	rbnTab As This

OnError GoTo ErrorOccured

	Call RBNInitiate

'	Call DEBUGPrint("RBNGetTab")
	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

'		Call DEBUGPrint("RBNTabGetGroupThs")
		If RBNTabGetGroupThs(rbnTab, sGroupName, rbnGroupFound) Then

			rbnGroup = rbnGroupFound
			'Set Group visibility
			Call SetRbnCtrlGrpVisible(rbnGroup, bVisible)
		End If
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnGroup		= NULL_PTR
'	rbnTabFound	= NULL_PTR
'	rbnGroupFound	= NULL_PTR
'	rbnTab		= NULL_PTR

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupSetVisibility")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNGroupSetCollapsedIconThs(	  rbnGroup As This
							, ByVal sIcon As String)

OnError GoTo ErrorOccured

	Call SetRbnCtrlGrpCollapsedImage(rbnGroup, New_Uri(sIcon, 0))
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupSetCollapsedIconThs")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNGroupSetCollapsedIconIdx(	  ByVal nElementIdx As Integer
							, ByVal sIcon As String)

OnError GoTo ErrorOccured

	Call RBNGroupSetCollapsedIconThs(marrControls(nElementIdx), sIcon)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupSetCollapsedIconIdx: " & nElementIdx)
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNGroupSetCollapsedIcon(	  ByVal sTabName As String
						, ByVal sGroupName As String
						, ByVal sIcon As String)

Dim	rbnGroup As This,
	rbnTabFound As RefPtr,
	rbnGroupFound As RefPtr,
	rbnTab As This

OnError GoTo ErrorOccured

	Call RBNInitiate

'	Call DEBUGPrint("RBNGetTab")
	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

'		Call DEBUGPrint("RBNTabGetGroupThs")
		If RBNTabGetGroupThs(rbnTab, sGroupName, rbnGroupFound) Then

			rbnGroup = rbnGroupFound
			'Set Group collapsed icon
			Call SetRbnCtrlGrpCollapsedImage(rbnGroup, New_Uri(sIcon, 0))
		End If
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnGroup		= NULL_PTR
'	rbnTabFound	= NULL_PTR
'	rbnGroupFound	= NULL_PTR
'	rbnTab		= NULL_PTR

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupSetCollapsedIcon")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGroupAddControl(	  ByVal sControlName As String
						, ByVal sCaption As String
						, ByVal sKeytip As String
						, ByVal nControlType As Integer
						, ByVal sTabName As String
						, ByVal sGroupName As String
						) As Integer

Dim	rbnGroup As This,
'	rbnGroupsColl as This,
	rbnTabFound As RefPtr,
	rbnGroupFound As RefPtr,
	rbnTab As This,
	nCtrl, nPrevIdx As Integer

OnError GoTo ErrorOccured

RBNGroupAddControl = 0

	Call RBNInitiate

	nPrevIdx	= RBNGetPrevGroupElementIdx(sTabName, sGroupName)
	If nPrevIdx > 0 and mnNumElements > 0 Then
'		Call DEBUGPrint("Found Group " & sTabName & "|" & sGroupName & " as element " & nPrevIdx)
		RBNGroupAddControl	= RBNGroupAddControlIdx(sControlName, sCaption, sKeytip, nControlType, nPrevIdx)
		Exit Function
	End If

'	Call DEBUGPrint("RBNGetTab")
	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

'		Call DEBUGPrint("RBNTabGetGroupThs")
		If RBNTabGetGroupThs(rbnTab, sGroupName, rbnGroupFound) Then

			rbnGroup = rbnGroupFound

			nCtrl 					= RBNAddElement(GetRbnTabName(rbnTab), GetRbnCtrlGrpName(rbnGroup), "", "", sControlName, nControlType, 0)

			'Get Group controls collection
'			rbnGroupsColl = GetRbnCtrlGrpCtrls(rbnGroup)
			marrParentControlColls(nCtrl) = GetRbnCtrlGrpCtrls(rbnGroup)
'			marrControls(nCtrl) 		= MICtrlCollAddStrStrInt(rbnGroupsColl, sControlName, sCaption, nControlType)
			marrControls(nCtrl) 		= MICtrlCollAddStrStrInt(marrParentControlColls(nCtrl), sControlName, sCaption, nControlType)
			Call SetMICtrlHorzAlign(marrControls(nCtrl), Horiz_Align_Left)

			If sKeytip <> "" Then
				'Set the KeyTip for the Control. KeyTip: The keyboard shortcut for the Control.
				'A KeyTip must have from 1 to 3 uppercase characters.
				Call SetMICtrlKeyTip(marrControls(nCtrl), sKeytip)
			End If

			RBNGroupAddControl = nCtrl
		End If
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnGroupsColl	= NULL_PTR
'	rbnGroupFound	= NULL_PTR
'	rbnTab		= NULL_PTR
'	rbnTabFound	= NULL_PTR
'	rbnGroup		= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupAddControl: " & sControlName & " to " & sGroupName & " on tab " & sTabName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGroupAddControlThs( ByVal sControlName As String
						, ByVal sCaption As String
						, ByVal sKeytip As String
						, ByVal nControlType As Integer
						, ByVal sTabName As String
						, ByVal rbnGroup As This
						) As Integer

Dim	nCtrl As Integer,
	sGroupName As String

OnError GoTo ErrorOccured

RBNGroupAddControlThs = 0

	Call RBNInitiate

	Call DEBUGPrint("RBNGroupAddControlThs, Value of rbnGroup: " & rbnGroup)
	sGroupName				= GetRbnCtrlGrpName(rbnGroup)
	nCtrl 					= RBNAddElement(sTabName, sGroupName, "", "", sControlName, nControlType, 0)

	'Get Group controls collection
	marrParentControlColls(nCtrl) = GetRbnCtrlGrpCtrls(rbnGroup)
	marrControls(nCtrl) 		= MICtrlCollAddStrStrInt(marrParentControlColls(nCtrl), sControlName, sCaption, nControlType)
	Call SetMICtrlHorzAlign(marrControls(nCtrl), Horiz_Align_Left)

	If sKeytip <> "" Then
		'Set the KeyTip for the Control. KeyTip: The keyboard shortcut for the Control.
		'A KeyTip must have from 1 to 3 uppercase characters.
		Call SetMICtrlKeyTip(marrControls(nCtrl), sKeytip)
	End If

	RBNGroupAddControlThs = nCtrl

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupAddControl: " & sControlName & " to " & sGroupName & " on tab " & sTabName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGroupAddControlIdx( ByVal sControlName As String
						, ByVal sCaption As String
						, ByVal sKeytip As String
						, ByVal nControlType As Integer
						, ByVal nGroupIdx As Integer
						) As Integer

OnError GoTo ErrorOccured

RBNGroupAddControlIdx = 0

	RBNGroupAddControlIdx = RBNGroupAddControlThs(sControlName, sCaption, sKeytip, nControlType, marrTabNames(nGroupIdx), marrControls(nGroupIdx))

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupAddControlIdx: " & sControlName & " to Group Index " & nGroupIdx)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGroupRemoveControl(	  ByVal sControlName As String
							, ByVal sTabName As String
							, ByVal sGroupName As String
							) As Integer

Dim	rbnGroup As This,
	rbnGroupsColl as This,
	rbnTabFound As RefPtr,
	rbnGroupFound As RefPtr,
	rbnTab As This,
	nCtrl, nControlItem As Integer

OnError GoTo ErrorOccured

RBNGroupRemoveControl = 0

	Call RBNInitiate

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

		If RBNTabGetGroupThs(rbnTab, sGroupName, rbnGroupFound) Then
			rbnGroup = rbnGroupFound

			nControlItem = RBNGroupGetControlIndexThs(rbnGroup, sControlName)
			If nControlItem > RBN_ELEMENT_NOT_FOUND Then
				'Get Group controls collection
				rbnGroupsColl = GetRbnCtrlGrpCtrls(rbnGroup)

				Call MICtrlCollRemoveAt(rbnGroupsColl, nControlItem)
				nCtrl = RBNRemoveElement(sTabName, sGroupName, "", "", sControlName)
				RBNGroupRemoveControl = nCtrl
			Else
				Call DEBUGPrint("RBNGroupRemoveControl: Control not found: " & sControlName)
			End If
		Else
			Call DEBUGPrint("RBNGroupRemoveControl: Group not found: " & sGroupName)
		End If
	Else
		Call DEBUGPrint("RBNGroupRemoveControl: Tab not found: " & sTabName)
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnGroup		= NULL_PTR
'	rbnGroupsColl	= NULL_PTR
'	rbnTabFound	= NULL_PTR
'	rbnGroupFound	= NULL_PTR
'	rbnTab		= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupRemoveControl: " & sControlName & " from " & sGroupName & " on tab " & sTabName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGroupInsertControl( ByVal sControlName As String
						, ByVal sCaption As String
						, ByVal sKeytip As String
						, ByVal nControlType As Integer
						, ByVal sTabName As String
						, ByVal sGroupName As String
						, ByVal nPosition As Integer
						) As Integer

Dim	rbnGroup As This,
'	rbnGroupsColl as This,
	rbnTabFound As RefPtr,
	rbnGroupFound As RefPtr,
	rbnTab As This,
	nCtrl, nPrevIdx As Integer

OnError GoTo ErrorOccured

RBNGroupInsertControl = 0

	Call RBNInitiate

	nPrevIdx	= RBNGetPrevGroupElementIdx(sTabName, sGroupName)
	If nPrevIdx > 0 and mnNumElements > 0 Then
		RBNGroupInsertControl	= RBNGroupInsertControlIdx(sControlName, sCaption, sKeytip, nControlType, nPrevIdx, nPosition)
		Exit Function
	End If

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

		If RBNTabGetGroupThs(rbnTab, sGroupName, rbnGroupFound) Then

			rbnGroup = rbnGroupFound

			nCtrl 					= RBNAddElement(GetRbnTabName(rbnTab), GetRbnCtrlGrpName(rbnGroup), "", "", sControlName, nControlType, 0)

			'Get Group controls collection
			marrParentControlColls(nCtrl) = GetRbnCtrlGrpCtrls(rbnGroup)
'			rbnGroupsColl = GetRbnCtrlGrpCtrls(rbnGroup)

			marrControls(nCtrl) 		= MICtrlCollInsertIntStrStrInt(marrParentControlColls(nCtrl), nPosition, sControlName, sCaption, nControlType)
'			marrControls(nCtrl) 		= MICtrlCollInsertIntStrStrInt(rbnGroupsColl, nPosition, sControlName, sCaption, nControlType)
			Call SetMICtrlHorzAlign(marrControls(nCtrl), Horiz_Align_Left)

			If sKeytip <> "" Then
				'Set the KeyTip for the Control. KeyTip: The keyboard shortcut for the Control.
				'A KeyTip must have from 1 to 3 uppercase characters.
				Call SetMICtrlKeyTip(marrControls(nCtrl), sKeytip)
			End If

			RBNGroupInsertControl = nCtrl
		End If
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnGroup 		= NULL_PTR
'	rbnGroupsColl	= NULL_PTR
'	rbnTabFound	= NULL_PTR
'	rbnGroupFound	= NULL_PTR
'	rbnTab		= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupInsertControl: " & sControlName & " at position " & nPosition & " in " & sGroupName & " on tab " & sTabName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGroupInsertControlThs(	  ByVal sControlName As String
							, ByVal sCaption As String
							, ByVal sKeytip As String
							, ByVal nControlType As Integer
							, ByVal sTabName As String
							, ByVal rbnGroup As This
							, ByVal nPosition As Integer
							) As Integer

Dim	nCtrl As Integer,
	sGroupName As String

OnError GoTo ErrorOccured

RBNGroupInsertControlThs = 0

	Call RBNInitiate

	sGroupName				= GetRbnCtrlGrpName(rbnGroup)
	nCtrl 					= RBNAddElement(sTabName, sGroupName, "", "", sControlName, nControlType, 0)

	'Get Group controls collection
	marrParentControlColls(nCtrl) = GetRbnCtrlGrpCtrls(rbnGroup)
	marrControls(nCtrl) 		= MICtrlCollInsertIntStrStrInt(marrParentControlColls(nCtrl), nPosition, sControlName, sCaption, nControlType)
	Call SetMICtrlHorzAlign(marrControls(nCtrl), Horiz_Align_Left)

	If sKeytip <> "" Then
		'Set the KeyTip for the Control. KeyTip: The keyboard shortcut for the Control.
		'A KeyTip must have from 1 to 3 uppercase characters.
		Call SetMICtrlKeyTip(marrControls(nCtrl), sKeytip)
	End If

	RBNGroupInsertControlThs = nCtrl

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupInsertControlThs: " & sControlName & " to " & sGroupName & " on tab " & sTabName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGroupInsertControlIdx(	  ByVal sControlName As String
							, ByVal sCaption As String
							, ByVal sKeytip As String
							, ByVal nControlType As Integer
							, ByVal nGroupIdx As Integer
							, ByVal nPosition As Integer
							) As Integer

OnError GoTo ErrorOccured

	RBNGroupInsertControlIdx = RBNGroupInsertControlThs(sControlName, sCaption, sKeytip, nControlType, marrTabNames(nGroupIdx), marrControls(nGroupIdx), nPosition)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupInsertControlIdx: " & sControlName & " to Group Index " & nGroupIdx)
	Call ERRShow()

End Function


'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGroupInsertControlAfter( ByVal sControlName As String
							, ByVal sCaption As String
							, ByVal sKeytip As String
							, ByVal nControlType As Integer
							, ByVal sTabName As String
							, ByVal sGroupName As String
							, ByVal sNameAfter As String
							) As Integer

Dim	nPosition As Integer

OnError GoTo ErrorOccured

RBNGroupInsertControlAfter = 0

	nPosition = RBNControlGetIndex(sTabName, sGroupName, sNameAfter)
	If nPosition = 0 Then
		RBNGroupInsertControlAfter 	= RBNGroupAddControl(sControlName, sCaption, sKeytip, nControlType, sTabName, sGroupName)
	Else
		nPosition				= nPosition + 1
		RBNGroupInsertControlAfter 	= RBNGroupInsertControl(sControlName, sCaption, sKeytip, nControlType, sTabName, sGroupName, nPosition)
	End If

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupInsertControlAfter: " & sControlName & " after " & sNameAfter & " in " & sGroupName & " on tab " & sTabName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGroupInsertControlBefore(	  ByVal sControlName As String
								, ByVal sCaption As String
								, ByVal sKeytip As String
								, ByVal nControlType As Integer
								, ByVal sTabName As String
								, ByVal sGroupName As String
								, ByVal sNameBefore As String
								) As Integer

Dim	nPosition As Integer

OnError GoTo ErrorOccured

RBNGroupInsertControlBefore = 0

	nPosition = RBNControlGetIndex(sTabName, sGroupName, sNameBefore)
	If nPosition = 0 Then
		RBNGroupInsertControlBefore 	= RBNGroupAddControl(sControlName, sCaption, sKeytip, nControlType, sTabName, sGroupName)
	Else
		RBNGroupInsertControlBefore 	= RBNGroupInsertControl(sControlName, sCaption, sKeytip, nControlType, sTabName, sGroupName, nPosition)
	End If

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupInsertControlBefore: " & sControlName & " before " & sNameBefore & " in " & sGroupName & " on tab " & sTabName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGroupAddButton(	  ByVal sControlName As String
						, ByVal sCaption As String
						, ByVal sKeytip As String
						, ByVal sTabName As String
						, ByVal sGroupName As String
						) As Integer

OnError GoTo ErrorOccured

	RBNGroupAddButton = RBNGroupAddControl(sControlName, sCaption, sKeytip, ControlType_Button, sTabName, sGroupName)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupAddButton")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGroupInsertButton(  ByVal sControlName As String
						, ByVal sCaption As String
						, ByVal sKeytip As String
						, ByVal sTabName As String
						, ByVal sGroupName As String
						, ByVal nPosition As Integer
						) As Integer


OnError GoTo ErrorOccured

	RBNGroupInsertButton = RBNGroupInsertControl(sControlName, sCaption, sKeytip, ControlType_Button, sTabName, sGroupName, nPosition)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupInsertButton")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGroupInsertButtonAfter(  ByVal sControlName As String
							, ByVal sCaption As String
							, ByVal sKeytip As String
							, ByVal sTabName As String
							, ByVal sGroupName As String
							, ByVal sNameAfter As String
							) As Integer

Dim	nPosition As Integer

OnError GoTo ErrorOccured

	RBNGroupInsertButtonAfter = RBNGroupInsertControlAfter(sControlName, sCaption, sKeytip, ControlType_Button, sTabName, sGroupName, sNameAfter)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupInsertButtonAfter")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGroupInsertButtonBefore( ByVal sControlName As String
							, ByVal sCaption As String
							, ByVal sKeytip As String
							, ByVal sTabName As String
							, ByVal sGroupName As String
							, ByVal sNameBefore As String
							) As Integer

OnError GoTo ErrorOccured

	RBNGroupInsertButtonBefore = 	RBNGroupInsertControlBefore(sControlName, sCaption, sKeytip, ControlType_Button, sTabName, sGroupName, sNameBefore)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupInsertButtonBefore")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNGroupEnableControls(	  ByVal sTabName As String
						, ByVal sGroupName As String
						, ByVal sControlName As String
						, ByVal bEnabled As Logical)

Dim	nElementIdx As Integer

OnError GoTo ErrorOccured

	nElementIdx	= 0
	nElementIdx	= RBNGetElementIndexOffset(sTabName, sGroupName, "", "", sControlName, (nElementIdx + 1))
	Do While (nElementIdx > 0)

'		Print "RBNControlEnableThs: " & sControlName & " -> " & bEnabled
		Call RBNControlEnableThs(marrControls(nElementIdx), bEnabled)

		nElementIdx = RBNGetElementIndexOffset(sTabName, sGroupName, "", "", sControlName, (nElementIdx + 1))
	Loop

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupEnableControls")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNGroupEnableControl(  ByVal sTabName As String
					, ByVal sGroupName As String
					, ByVal sControlName As String
					, ByVal bEnabled As Logical)

Dim	nElementIdx As Integer

OnError GoTo ErrorOccured

	nElementIdx	= RBNGetElementIndex(sTabName, sGroupName, "", "", sControlName)
	If nElementIdx > 0 Then
		Call RBNControlEnableThs(marrControls(nElementIdx), bEnabled)
	End If

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupEnableControl")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNGroupCheckControls(	  ByVal sTabName As String
						, ByVal sGroupName As String
						, ByVal sControlName As String
						, ByVal bChecked As Logical)

Dim	nElementIdx As Integer

OnError GoTo ErrorOccured

	nElementIdx	= 0
	nElementIdx	= RBNGetElementIndexOffset(sTabName, sGroupName, "", "", sControlName, (nElementIdx + 1))
	Do While (nElementIdx > 0)

		Call RBNControlCheckThs(marrControls(nElementIdx), bChecked)

		nElementIdx = RBNGetElementIndexOffset(sTabName, sGroupName, "", "", sControlName, (nElementIdx + 1))
	Loop

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupCheckControls")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNGroupCheckControl(  ByVal sTabName As String
					, ByVal sGroupName As String
					, ByVal sControlName As String
					, ByVal bChecked As Logical)

Dim	nElementIdx As Integer

OnError GoTo ErrorOccured

	nElementIdx	= RBNGetElementIndex(sTabName, sGroupName, "", "", sControlName)
	If nElementIdx > 0 Then
		Call RBNControlCheckThs(marrControls(nElementIdx), bChecked)
	End If

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupCheckControl")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNGroupShowControls(	  ByVal sTabName As String
						, ByVal sGroupName As String
						, ByVal sControlName As String
						, ByVal bVisible As Logical)

Dim	nElementIdx As Integer

OnError GoTo ErrorOccured

	nElementIdx	= 0
	nElementIdx	= RBNGetElementIndexOffset(sTabName, sGroupName, "", "", sControlName, (nElementIdx + 1))
	Do While (nElementIdx > 0)

		Call RBNControlSetVisibilityThs(marrControls(nElementIdx), bVisible)

		nElementIdx = RBNGetElementIndexOffset(sTabName, sGroupName, "", "", sControlName, (nElementIdx + 1))
	Loop

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupShowControls")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNGroupShowControl(  ByVal sTabName As String
					, ByVal sGroupName As String
					, ByVal sControlName As String
					, ByVal bVisible As Logical)

Dim	nElementIdx As Integer

OnError GoTo ErrorOccured

	nElementIdx	= RBNGetElementIndex(sTabName, sGroupName, "", "", sControlName)
	If nElementIdx > 0 Then
		Call RBNControlSetVisibilityThs(marrControls(nElementIdx), bVisible)
	End If

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupShowControl")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNGroupSelectControl(	  ByVal sTabName As String
						, ByVal sGroupName As String
						, ByVal sControlName As String)

Dim	nElementIdx As Integer

OnError GoTo ErrorOccured

	nElementIdx	= RBNGetElementIndex(sTabName, sGroupName, "", "", sControlName)
	If nElementIdx > 0 Then
		Call DEBUGPrint("Run Menu Command ID " & RBNControlGetControlIDThs(marrControls(nElementIdx)))
		Run Menu Command ID  RBNControlGetControlIDThs(marrControls(nElementIdx))
	End If

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupSelectControl")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNGroupRunMenuCommandControl(	  ByVal sTabName As String
							, ByVal sGroupName As String
							, ByVal sControlName As String)

Dim	nElementIdx As Integer

OnError GoTo ErrorOccured

	nElementIdx	= RBNGetElementIndex(sTabName, sGroupName, "", "", sControlName)
	If nElementIdx > 0 Then
		Call DEBUGPrint("Run Menu Command ID " & RBNControlGetControlIDThs(marrControls(nElementIdx)))
		Run Menu Command ID  RBNControlGetControlIDThs(marrControls(nElementIdx))
	End If

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupSelectControl")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGroupGetFirstControlIdx(	  ByVal sTabName As String
								, ByVal sGroupName As String
								, ByVal sControlName As String) As Integer

OnError GoTo ErrorOccured

RBNGroupGetFirstControlIdx = 0

	msTabName		= sTabName
	msGroupName	= sGroupName
	msControlName	= sControlName

	mnCurCtrlIdx	= RBNGetElementIndex(msTabName, msGroupName, "", "", msControlName)

	RBNGroupGetFirstControlIdx = mnCurCtrlIdx

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupGetFirstControlIdx")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGroupGetNextControlIdx(	  ByVal sTabName As String
								, ByVal sGroupName As String
								, ByVal sControlName As String) As Integer

OnError GoTo ErrorOccured

RBNGroupGetNextControlIdx = 0

	If msTabName = sTabName AND msGroupName = sGroupName AND msControlName = sControlName Then
		msTabName		= sTabName
		msGroupName	= sGroupName
		msControlName	= sControlName
		mnCurCtrlIdx				= RBNGetElementIndexOffset(msTabName, msGroupName, "", "", msControlName, (mnCurCtrlIdx + 1))
		RBNGroupGetNextControlIdx	= mnCurCtrlIdx
	Else
		RBNGroupGetNextControlIdx	= RBNGroupGetFirstControlIdx(sTabName, sGroupName, sControlName)
	End If

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupGetNextControlIdx")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGroupGetControl(	  ByVal sTabName As String
						, ByVal sGroupName As String
						, ByVal sControlName As String
						, rbnControlFound As RefPtr
						) As Logical

OnError GoTo ErrorOccured

RBNGroupGetControl = FALSE

Dim	rbnTab As This,
	rbnGroup As This,
	rbnTabFound As RefPtr,
	rbnGroupFound As RefPtr

OnError GoTo ErrorOccured

RBNGroupGetControl = 0

	Call RBNInitiate

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

		If RBNTabGetGroupThs(rbnTab, sGroupName, rbnGroupFound) Then
			rbnGroup = rbnGroupFound

			If RBNGroupGetControlThs(rbnGroup, sControlName, rbnControlFound) Then

				RBNGroupGetControl = TRUE
			End If
		End If
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnTab			= NULL_PTR
'	rbnGroup			= NULL_PTR
'	rbnTabFound		= NULL_PTR
'	rbnGroupFound		= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupGetControl")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGroupGetControlThs(	  rbnGroup As This
							, ByVal sControlName As String
							, rbnControlFound As RefPtr
							) As Logical

Dim	nControlIndex As Integer,
	rbnControlsColl As This,
	rbnControlItem As This

OnError GoTo ErrorOccured

RBNGroupGetControlThs = FALSE

	nControlIndex	= RBNGroupGetControlIndexThs(rbnGroup, sControlName)
	If nControlIndex > RBN_ELEMENT_NOT_FOUND Then
		rbnControlsColl 		= GetRbnCtrlGrpCtrls(rbnGroup)
		rbnControlItem 		= GetMICtrlCollItemInt(rbnControlsColl, nControlIndex)

		rbnControlFound		= rbnControlItem
		RBNGroupGetControlThs	= TRUE
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnControlsColl	= NULL_PTR
'	rbnControlItem		= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupGetControlThs")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGroupGetControlIndexThs(	  rbnGroup As This
								, ByVal sControlName As String
								) As Integer

Dim	i, nNumControls, nCntrlType As Integer,
	sName, sCaption As String,
	rbnControlsColl As This,
	rbnControlItem As This

OnError GoTo ErrorOccured

RBNGroupGetControlIndexThs = RBN_ELEMENT_NOT_FOUND

	rbnControlsColl = GetRbnCtrlGrpCtrls(rbnGroup)
	nNumControls = GetMICtrlCollCount(rbnControlsColl)
'	Call DEBUGPrint("   RBNGroupGetControlIndexThs: Number of Groups " & nNumControls)
	For i = 0 To (nNumControls - 1)
		rbnControlItem	= GetMICtrlCollItemInt(rbnControlsColl, i)

'		nCntrlType	= GetMICtrlCtrlType(rbnControlItem)
		sName		= GetMICtrlName(rbnControlItem)
'		sCaption		= GetMICtrlCaption(rbnControlItem)
'		Call DEBUGPrint("      Control " & k & " is named '" & sName & "' but shown as '" & sCaption & "' and Control Type is " & nCntrlType & " (" & RBNControlGetTypeName(nCntrlType) & ")")

		If sName = sControlName Then
			RBNGroupGetControlIndexThs	= i
			Exit For
		End If
	Next

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnControlsColl	= NULL_PTR
'	rbnControlItem		= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGroupGetControlIndexThs")
	Call ERRShow()

End Function

'*******************************************************************************************************
'** WORKING WITH MAPINFO CONTROL COLLECTIONS ***********************************************************
'*******************************************************************************************************


'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNMICtrlCollAddControlThs( ByVal sControlName As String
							, ByVal sCaption As String
							, ByVal sKeytip As String
							, ByVal nControlType As Integer
							, ByVal sTabName As String
							, ByVal sGroupName As String
							, ByVal rbnCtrlColl As This
							) As Integer

Dim	nCtrl As Integer

OnError GoTo ErrorOccured

RBNMICtrlCollAddControlThs = 0

	Call RBNInitiate

	nCtrl 					= RBNAddElement(sTabName, sGroupName, "", "", sControlName, nControlType, 0)

	'Get Group controls collection
	marrParentControlColls(nCtrl) = rbnCtrlColl
	marrControls(nCtrl) 		= MICtrlCollAddStrStrInt(marrParentControlColls(nCtrl), sControlName, sCaption, nControlType)
'	marrControls(nCtrl) 		= MICtrlCollAddStrStrInt(rbnCtrlColl, sControlName, sCaption, nControlType)
	Call SetMICtrlHorzAlign(marrControls(nCtrl), Horiz_Align_Left)

	If sKeytip <> "" Then
		'Set the KeyTip for the Control. KeyTip: The keyboard shortcut for the Control.
		'A KeyTip must have from 1 to 3 uppercase characters.
		Call SetMICtrlKeyTip(marrControls(nCtrl), sKeytip)
	End If

	RBNMICtrlCollAddControlThs = nCtrl

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNMICtrlCollAddControlThs: " & sControlName & " to " & sGroupName & " on tab " & sTabName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNMICtrlCollAddControlIdx( ByVal sControlName As String
							, ByVal sCaption As String
							, ByVal sKeytip As String
							, ByVal nControlType As Integer
							, ByVal nGroupIdx As Integer
							) As Integer

OnError GoTo ErrorOccured

	RBNMICtrlCollAddControlIdx = RBNMICtrlCollAddControlThs(sControlName, sCaption, sKeytip, nControlType, marrTabNames(nGroupIdx), marrGroupNames(nGroupIdx), marrParentControlColls(nGroupIdx))

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNMICtrlCollAddControlIdx: " & sControlName & " to Group Index " & nGroupIdx)
	Call ERRShow()

End Function

'*******************************************************************************************************
'** WORKING WITH SPLITBUTTONS **************************************************************************
'*******************************************************************************************************

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Function RBNSplitButtonNumGroups(	  ByVal sTabName As String
							, ByVal sGroupName As String
							, ByVal sSplitButtonName As String
							) As Integer


Dim	rbnTab As This,
	rbnGroup As This,
	rbnSplitButton As This,
	rbnGroupsColl as This,
	rbnTabFound As RefPtr,
	rbnGroupFound As RefPtr,
	rbnControlFound As RefPtr

OnError GoTo ErrorOccured

RBNSplitButtonNumGroups = 0

	Call RBNInitiate

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

		If RBNTabGetGroupThs(rbnTab, sGroupName, rbnGroupFound) Then
			'Get the ribbon group collection.
			rbnGroup		= rbnGroupFound

			If RBNGroupGetControlThs(rbnGroup, sSplitButtonName, rbnControlFound) Then
				rbnSplitButton = rbnControlFound

				'Get Group controls collection
				rbnGroupsColl 			= GetRbnSplitCtrlCtrls(rbnSplitButton)
				'Add a new group.
				RBNSplitButtonNumGroups	= GetMICtrlCollCount(rbnGroupsColl)
'				RBNSplitButtonNumGroups	= GetRbnCtrlGrpCollCount(rbnGroupsColl)
			End If
		End If
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnTab			= NULL_PTR
'	rbnGroup			= NULL_PTR
'	rbnSplitButton		= NULL_PTR
'	rbnGroupsColl		= NULL_PTR
'	rbnTabFound		= NULL_PTR
'	rbnGroupFound		= NULL_PTR
'	rbnControlFound	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNSplitButtonNumGroups")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNSplitButtonAddGroup(	  ByVal sSplitButtonGroupName As String
							, ByVal sCaption As String
							, ByVal sTabName As String
							, ByVal sGroupName As String
							, ByVal sSplitButtonName As String
							) As Integer					'Returns the modular Idx of the group or 0, if it wasn't created


Dim	rbnTab As This,
	rbnGroup As This,
	rbnSplitButton As This,
	rbnGroupsColl as This,
	rbnTabFound As RefPtr,
	rbnGroupFound As RefPtr,
	rbnControlFound As RefPtr,
	nCtrl, nPrevIdx As Integer

OnError GoTo ErrorOccured

RBNSplitButtonAddGroup = 0

	Call RBNInitiate

	nPrevIdx	= RBNGetPrevSplitButtonElementIdx(sTabName, sGroupName, sSplitButtonName)
	If nPrevIdx > 0 and mnNumElements > 0 Then
		RBNSplitButtonAddGroup	= RBNSplitButtonAddGroupIdx(sSplitButtonGroupName, sCaption, nPrevIdx)
		Exit Function
	End If

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

		If RBNTabGetGroupThs(rbnTab, sGroupName, rbnGroupFound) Then
			'Get the ribbon group collection.
			rbnGroup		= rbnGroupFound

			If RBNGroupGetControlThs(rbnGroup, sSplitButtonName, rbnControlFound) Then
				rbnSplitButton = rbnControlFound

				nCtrl = RBNAddElement(sTabName, sGroupName, sSplitButtonName, sSplitButtonGroupName, "", ControlType_DropDownMenuGroup, ControlType_SplitButton)

				'Get Group controls collection
				marrParentControlColls(nCtrl) = GetRbnSplitCtrlCtrls(rbnSplitButton)

				'Add a new group.
				marrControls(nCtrl)			= MICtrlCollAddStrStrInt(marrParentControlColls(nCtrl), sSplitButtonGroupName, sCaption, ControlType_DropDownMenuGroup)

				Call SetRbnDropDownCtrlHorzAlign(marrControls(nCtrl), Horiz_Align_Stretch)
				Call SetRbnDropDownCtrlVertAlign(marrControls(nCtrl), Vert_Align_Stretch)
				RBNSplitButtonAddGroup = nCtrl
			End If
		End If
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnTab 			= NULL_PTR
'	rbnGroup 			= NULL_PTR
'	rbnSplitButton 	= NULL_PTR
'	rbnGroupsColl 		= NULL_PTR
'	rbnTabFound 		= NULL_PTR
'	rbnGroupFound 		= NULL_PTR
'	rbnControlFound 	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNSplitButtonAddGroup: " & sSplitButtonGroupName & " on SplitButton " & sSplitButtonName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNSplitButtonAddGroupThs(	  ByVal sSplitButtonGroupName As String
								, ByVal sCaption As String
								, ByVal sTabName As String
								, ByVal sGroupName As String
								, ByVal rbnSplitButton As This
								) As Integer					'Returns the modular Idx of the group or 0, if it wasn't created


Dim	nCtrl As Integer

OnError GoTo ErrorOccured

RBNSplitButtonAddGroupThs = 0

	Call RBNInitiate

	nCtrl = RBNAddElement(sTabName, sGroupName, GetRbnSplitCtrlName(rbnSplitButton), sSplitButtonGroupName, "", ControlType_DropDownMenuGroup, ControlType_SplitButton)

	'Get Group controls collection
	marrParentControlColls(nCtrl) = GetRbnSplitCtrlCtrls(rbnSplitButton)

	'Add a new group.
'	Call DEBUGPrint("   Adding the new Group " & sSplitButtonGroupName)
	marrControls(nCtrl)			= MICtrlCollAddStrStrInt(marrParentControlColls(nCtrl), sSplitButtonGroupName, sCaption, ControlType_DropDownMenuGroup)

	Call SetRbnDropDownCtrlHorzAlign(marrControls(nCtrl), Horiz_Align_Stretch)
	Call SetRbnDropDownCtrlVertAlign(marrControls(nCtrl), Vert_Align_Stretch)

	RBNSplitButtonAddGroupThs = nCtrl

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNSplitButtonAddGroup: " & sSplitButtonGroupName & " on SplitButton " & GetRbnSplitCtrlName(rbnSplitButton))
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNSplitButtonAddGroupIdx(	  ByVal sSplitButtonGroupName As String
								, ByVal sCaption As String
								, ByVal nSplitButtonIdx As Integer
								) As Integer					'Returns the modular Idx of the group or 0, if it wasn't created

OnError GoTo ErrorOccured

	RBNSplitButtonAddGroupIdx = RBNSplitButtonAddGroupThs(sSplitButtonGroupName, sCaption, marrTabNames(nSplitButtonIdx), marrGroupNames(nSplitButtonIdx), marrControls(nSplitButtonIdx))
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNSplitButtonAddGroup: " & sSplitButtonGroupName & " on SplitButton Index " & nSplitButtonIdx)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNSplitButtonGroupRemove(  ByVal sSplitButtonGroupName As String
							, ByVal sTabName As String
							, ByVal sGroupName As String
							, ByVal sSplitButtonName As String
							) As Integer

Dim	rbnGroup As This,
	rbnGroupsColl as This,
	rbnSplitButton As This,
	rbnTabFound As RefPtr,
	rbnGroupFound As RefPtr,
	rbnControlFound As RefPtr,
	rbnControlGroupFound As RefPtr,
	rbnTab As This,
	nCtrl, nGroupItem As Integer

OnError GoTo ErrorOccured

RBNSplitButtonGroupRemove = 0

	Call RBNInitiate

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

		If RBNTabGetGroupThs(rbnTab, sGroupName, rbnGroupFound) Then
			'Get the ribbon group collection.
			rbnGroup		= rbnGroupFound

			If RBNGroupGetControlThs(rbnGroup, sSplitButtonName, rbnControlFound) Then
				rbnSplitButton = rbnControlFound

				nGroupItem = RBNSplitButtonGetGroupIndexThs(rbnSplitButton, sSplitButtonGroupName)
				If nGroupItem > RBN_ELEMENT_NOT_FOUND Then
					'Get Group controls collection
					rbnGroupsColl = GetRbnSplitCtrlCtrls(rbnSplitButton)

					Call MICtrlCollRemoveAt(rbnGroupsColl, nGroupItem)
					nCtrl = RBNRemoveElement(sTabName, sGroupName, sSplitButtonName, sSplitButtonGroupName, "")
					RBNSplitButtonGroupRemove = nCtrl
				Else
'					Call DEBUGPrint("RBNSplitButtonGroupRemove: Control not found: " & sSplitButtonGroupName)
				End If
			End If
		End If
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnTab				= NULL_PTR
'	rbnGroup				= NULL_PTR
'	rbnGroupsColl			= NULL_PTR
'	rbnSplitButton			= NULL_PTR
'	rbnTabFound			= NULL_PTR
'	rbnGroupFound			= NULL_PTR
'	rbnControlFound		= NULL_PTR
'	rbnControlGroupFound	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNSplitButtonGroupRemove: " & sSplitButtonGroupName & " on tab " & sTabName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNSplitButtonGetGroupThs(  rbnSplitButton As This
							, ByVal sGroupName As String
							, rbnGroupFound As RefPtr
							) As Logical

Dim	nGroupIndex As Integer,
	rbnGroupsColl As This,
	rbnGroupItem As This

OnError GoTo ErrorOccured

RBNSplitButtonGetGroupThs = FALSE

	nGroupIndex	= RBNSplitButtonGetGroupIndexThs(rbnSplitButton, sGroupName)
	If nGroupIndex > RBN_ELEMENT_NOT_FOUND Then
		rbnGroupsColl			= GetRbnSplitCtrlCtrls(rbnSplitButton)

		rbnGroupItem 				= GetMICtrlCollItemInt(rbnGroupsColl, nGroupIndex)
		rbnGroupFound				= rbnGroupItem

		RBNSplitButtonGetGroupThs	= TRUE
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnGroupsColl 	= NULL_PTR
'	rbnGroupItem 	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNSplitButtonGetGroupThs")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNSplitButtonGetGroupIndexThs(  rbnSplitButton As This
								, ByVal sGroupName As String
								) As Integer

Dim	i, nNumGroups, nCtrlType As Integer,
	sName, sCaption As String,
	rbnGroupsColl As This,
	rbnGroupItem As This

OnError GoTo ErrorOccured

RBNSplitButtonGetGroupIndexThs = RBN_ELEMENT_NOT_FOUND

	rbnGroupsColl = GetRbnSplitCtrlCtrls(rbnSplitButton)
	nNumGroups = GetMICtrlCollCount(rbnGroupsColl)
'	Call DEBUGPrint("   RBNSplitButtonGetGroupIndexThs: Number of SplitButton Groups " & nNumGroups)
	For i = 0 To (nNumGroups - 1)
		rbnGroupItem = GetMICtrlCollItemInt(rbnGroupsColl, i)

		nCtrlType	= GetMICtrlCtrlType(rbnGroupItem)
		sName	= GetMICtrlName(rbnGroupItem)
'		sCaption	= GetMICtrlCaption(rbnGroupItem)
'		Call DEBUGPrint("   SplitButton Group " & i & " is named " & sName & " but shown as " & sCaption)

		If sName = sGroupName AND nCtrlType In (ControlType_DropDownMenuGroup, ControlType_WrapPanel, ControlType_StackPanel) Then
			RBNSplitButtonGetGroupIndexThs	= i
			Exit For
		End If
	Next

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnGroupsColl	= NULL_PTR
'	rbnGroupItem	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNSplitButtonGetGroupIndexThs: GroupName: " & sGroupName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNSplitButtonGroupExistsThs(	  rbnSplitButton As This
								, ByVal sGroupName As String
								) As Logical

OnError GoTo ErrorOccured

	RBNSplitButtonGroupExistsThs = (RBNSplitButtonGetGroupIndexThs(rbnSplitButton, sGroupName) > RBN_ELEMENT_NOT_FOUND)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNSplitButtonGroupExistsThs")
	Call ERRShow()

End Function

'**********************************************************************************************************
'** WORKING WITH PANELS ON SPLITBUTTON **********************************************************
'** A Panel, WrapPanel or StackPanel, is treated similar to a DropDownMenuGroup
'** A number of the functions below use the matching RBNDropDButtonGroup function
'*******************************************************************************************************

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNSplitButtonAddControl(	  ByVal sControlName As String
							, ByVal sCaption As String
							, ByVal nControlType As Integer
							, ByVal sTabName As String
							, ByVal sGroupName As String
							, ByVal sSplitButtonName As String
							) As Integer						'Returns the modular Idx of the Panel or 0, if it wasn't created

Dim	rbnTab As This,
	rbnGroup As This,
	rbnSplitButton As This,
	rbnGroupsColl as This,
	rbnTabFound As RefPtr,
	rbnGroupFound As RefPtr,
	rbnControlFound As RefPtr,
	nCtrl, nPrevIdx As Integer

OnError GoTo ErrorOccured

RBNSplitButtonAddControl = 0

	Call RBNInitiate

	nPrevIdx = RBNGetPrevSplitButtonElementIdx(sTabName, sGroupName, sSplitButtonName)
	If nPrevIdx > 0 and mnNumElements > 0 Then
		RBNSplitButtonAddControl	= RBNSplitButtonAddControlIdx(sControlName, sCaption, nControlType, sTabName, sGroupName, nPrevIdx)
		Exit Function
	End If

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

		If RBNTabGetGroupThs(rbnTab, sGroupName, rbnGroupFound) Then
			'Get the ribbon group collection.
			rbnGroup		= rbnGroupFound

			If RBNGroupGetControlThs(rbnGroup, sSplitButtonName, rbnControlFound) Then
				rbnSplitButton = rbnControlFound

				nCtrl = RBNAddElement(sTabName, sGroupName, sSplitButtonName, sControlName, "", nControlType, ControlType_SplitButton)

				'Get Group controls collection
				marrParentControlColls(nCtrl) = GetRbnDropDownCtrlCtrls(rbnSplitButton)

				'Add a new panel.
				marrControls(nCtrl)			= MICtrlCollAddStrStrInt(marrParentControlColls(nCtrl), sControlName, sCaption, nControlType)

				RBNSplitButtonAddControl = nCtrl
			End If
		End If
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnTab 			= NULL_PTR
'	rbnGroup 			= NULL_PTR
'	rbnSplitButton 	= NULL_PTR
'	rbnGroupsColl 		= NULL_PTR
'	rbnTabFound 		= NULL_PTR
'	rbnGroupFound 		= NULL_PTR
'	rbnControlFound 	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNSplitButtonAddControl: " & sControlName & " on DropDownButton " & sSplitButtonName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNSplitButtonAddControlThs(  ByVal sControlName As String
							, ByVal sCaption As String
							, ByVal nControlType As Integer
							, ByVal sTabName As String
							, ByVal sGroupName As String
							, ByVal rbnSplitButton As String
							) As Integer					'Returns the modular Idx of the Panel or 0, if it wasn't created


Dim	nCtrl As Integer

OnError GoTo ErrorOccured

RBNSplitButtonAddControlThs = 0

	Call RBNInitiate

	nCtrl = RBNAddElement(sTabName, sGroupName, GetRbnDropDownCtrlName(rbnSplitButton), sControlName, "", nControlType, ControlType_SplitButton)

	'Get Group controls collection
	marrParentControlColls(nCtrl) = GetRbnDropDownCtrlCtrls(rbnSplitButton)

	'Add a new group.
	marrControls(nCtrl)			= MICtrlCollAddStrStrInt(marrParentControlColls(nCtrl), sControlName, sCaption, nControlType)

	RBNSplitButtonAddControlThs = nCtrl

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNSplitButtonAddControlThs: " & sControlName & " on DropDownButton " & sSplitButtonName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNSplitButtonAddControlIdx(  ByVal sControlName As String
							, ByVal sCaption As String
							, ByVal nControlType As Integer
							, ByVal sTabName As String
							, ByVal sGroupName As String
							, ByVal nSplitButtonIdx As String
							) As Integer					'Returns the modular Idx of the Panel or 0, if it wasn't created

OnError GoTo ErrorOccured

	RBNSplitButtonAddControlIdx = RBNSplitButtonAddControlThs(sControlName, sCaption, nControlType, sTabName, sGroupName, marrControls(nSplitButtonIdx))
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNSplitButtonAddControlIdx: " & sControlName & " on DropDownButton Index " & nSplitButtonIdx)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNSplitButtonRemoveControl(	  ByVal sControlName As String
								, ByVal sTabName As String
								, ByVal sGroupName As String
								, ByVal sSplitButtonName As String
								) As Integer

Dim	rbnGroup As This,
	rbnGroupsColl as This,
	rbnSplitButton As This,
	rbnTabFound As RefPtr,
	rbnGroupFound As RefPtr,
	rbnControlFound As RefPtr,
	rbnControlGroupFound As RefPtr,
	rbnTab As This,
	nCtrl, nControlItem As Integer

OnError GoTo ErrorOccured

RBNSplitButtonRemoveControl = 0

	Call RBNInitiate

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

		If RBNTabGetGroupThs(rbnTab, sGroupName, rbnGroupFound) Then
			'Get the ribbon group collection.
			rbnGroup		= rbnGroupFound

			If RBNGroupGetControlThs(rbnGroup, sSplitButtonName, rbnControlFound) Then
				rbnSplitButton = rbnControlFound

				nControlItem = RBNSplitButtonGetControlIndexThs(rbnSplitButton, sControlName)
				If nControlItem > RBN_ELEMENT_NOT_FOUND Then
					'Get Group controls collection
					rbnGroupsColl = GetRbnSplitCtrlCtrls(rbnSplitButton)

					Call MICtrlCollRemoveAt(rbnGroupsColl, nControlItem)
					nCtrl = RBNRemoveElement(sTabName, sGroupName, sSplitButtonName, sControlName, "")
					RBNSplitButtonRemoveControl = nCtrl
				Else
'					Call DEBUGPrint("RBNSplitButtonRemoveControl: Control not found: " & sControlName)
				End If
			End If
		End If
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnTab				= NULL_PTR
'	rbnGroup				= NULL_PTR
'	rbnGroupsColl			= NULL_PTR
'	rbnSplitButton			= NULL_PTR
'	rbnTabFound			= NULL_PTR
'	rbnGroupFound			= NULL_PTR
'	rbnControlFound		= NULL_PTR
'	rbnControlGroupFound	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNSplitButtonRemoveControl: " & sControlName & " on tab " & sTabName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNSplitButtonGetControlThs(	  rbnSplitButton As This
								, ByVal sControlName As String
								, rbnControlFound As RefPtr
								) As Logical

Dim	nControlIndex As Integer,
	rbnGroupsColl As This,
	rbnControlItem As This

OnError GoTo ErrorOccured

RBNSplitButtonGetControlThs = FALSE

	nControlIndex	= RBNSplitButtonGetControlIndexThs(rbnSplitButton, sControlName)
	If nControlIndex > RBN_ELEMENT_NOT_FOUND Then
		rbnGroupsColl		= GetRbnSplitCtrlCtrls(rbnSplitButton)

		rbnControlItem		= GetMICtrlCollItemInt(rbnGroupsColl, nControlIndex)
		rbnControlFound	= rbnControlItem

		RBNSplitButtonGetControlThs	= TRUE
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnGroupsColl 	= NULL_PTR
'	rbnControlItem 	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNSplitButtonGetControlThs")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNSplitButtonGetControlIndexThs(	  rbnSplitButton As This
									, ByVal sControlName As String
									) As Integer

Dim	i, nNumControls, nCtrlType As Integer,
	sName, sCaption As String,
	rbnGroupsColl As This,
	rbnGroupItem As This

OnError GoTo ErrorOccured

RBNSplitButtonGetControlIndexThs = RBN_ELEMENT_NOT_FOUND

	rbnGroupsColl	= GetRbnSplitCtrlCtrls(rbnSplitButton)
	nNumControls	= GetMICtrlCollCount(rbnGroupsColl)
	For i = 0 To (nNumControls - 1)
		rbnGroupItem = GetMICtrlCollItemInt(rbnGroupsColl, i)

		nCtrlType	= GetMICtrlCtrlType(rbnGroupItem)
		sName	= GetMICtrlName(rbnGroupItem)

		If sName = sControlName Then
			RBNSplitButtonGetControlIndexThs	= i
			Exit For
		End If
	Next

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnGroupsColl	= NULL_PTR
'	rbnGroupItem	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNSplitButtonGetControlIndexThs: ControlName: " & sControlName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNSplitButtonControlExistsThs(  rbnSplitButton As This
								, ByVal sControlName As String
								) As Logical

OnError GoTo ErrorOccured

	RBNSplitButtonControlExistsThs = (RBNSplitButtonGetControlIndexThs(rbnSplitButton, sControlName) > RBN_ELEMENT_NOT_FOUND)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNSplitButtonGroupExistsThs")
	Call ERRShow()

End Function


'*******************************************************************************************************
'** WORKING WITH CONTROLS ON SPLITBUTTONS ***************************************************************
'*******************************************************************************************************

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNSplitButtonGroupAddControl(	  ByVal sControlName As String
								, ByVal sCaption As String
								, ByVal sKeytip As String
								, ByVal nControlType As Integer
								, ByVal sTabName As String
								, ByVal sGroupName As String
								, ByVal sSplitButtonName As string
								, ByVal sSplitButtonGroupName As string
								) As Integer					'Returns the modular Idx of the control or 0, if it wasn't created
Dim	rbnTab As This,
	rbnGroup As This,
	rbnSplitButton As This,
	rbnSplitButtonGroup As This,
	rbnControlsColl as This,
	rbnTabFound As RefPtr,
	rbnGroupFound As RefPtr,
	rbnControlFound As RefPtr,
	rbnControlGroupFound As RefPtr,
	nCtrl, nPrevIdx As Integer

OnError GoTo ErrorOccured

RBNSplitButtonGroupAddControl = 0

	Call RBNInitiate

	nPrevIdx	= RBNGetPrevSplitButtonGroupElementIdx(sTabName, sGroupName, sSplitButtonName, sSplitButtonGroupName)
	If nPrevIdx > 0 and mnNumElements > 0 Then
		RBNSplitButtonGroupAddControl	= RBNSplitButtonGroupAddControlIdx(sControlName, sCaption, sKeytip, nControlType, nPrevIdx)
		Exit Function
	End If

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

		If RBNTabGetGroupThs(rbnTab, sGroupName, rbnGroupFound) Then
			rbnGroup = rbnGroupFound

			If RBNGroupGetControlThs(rbnGroup, sSplitButtonName, rbnControlFound) Then
				rbnSplitButton = rbnControlFound

				If RBNSplitButtonGetGroupThs(rbnSplitButton, sSplitButtonGroupName, rbnControlGroupFound) Then
					rbnSplitButtonGroup	= rbnControlGroupFound

					nCtrl 					= RBNAddElement(GetRbnTabName(rbnTab), GetRbnCtrlGrpName(rbnGroup), sSplitButtonName, sSplitButtonGroupName, sControlName, nControlType, ControlType_SplitButton)

					'Get Group controls collection
					marrParentControlColls(nCtrl) = GetCtrlGrpCtrls(rbnSplitButtonGroup)
'					rbnControlsColl = GetCtrlGrpCtrls(rbnSplitButtonGroup)

					marrControls(nCtrl) 		= MICtrlCollAddStrStrInt(marrParentControlColls(nCtrl), sControlName, sCaption, nControlType)
'					marrControls(nCtrl) 		= MICtrlCollAddStrStrInt(rbnControlsColl, sControlName, sCaption, nControlType)

					If sKeytip <> "" Then
						'Set the KeyTip for the Control. KeyTip: The keyboard shortcut for the Control.
						'A KeyTip must have from 1 to 3 uppercase characters.
						Call SetMICtrlKeyTip(marrControls(nCtrl), sKeytip)
					End If
				End If

				RBNSplitButtonGroupAddControl = nCtrl
			End If
		End If
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnTab 				= NULL_PTR
'	rbnGroup 				= NULL_PTR
'	rbnSplitButton 		= NULL_PTR
'	rbnSplitButtonGroup 	= NULL_PTR
'	rbnControlsColl 		= NULL_PTR
'	rbnTabFound 			= NULL_PTR
'	rbnGroupFound 			= NULL_PTR
'	rbnControlFound 		= NULL_PTR
'	rbnControlGroupFound 	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNSplitButtonGroupAddControl: " & sControlName & " to " & sSplitButtonGroupName & " on " & sSplitButtonName & " - tab | group: " & sTabName & "|" & sGroupName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNSplitButtonGroupAddControlThs(	  ByVal sControlName As String
									, ByVal sCaption As String
									, ByVal sKeytip As String
									, ByVal nControlType As Integer
									, ByVal sTabName As String
									, ByVal sGroupName As String
									, ByVal sSplitButtonName As string
									, ByVal sSplitButtonGroupName As string
									, ByVal rbnSplitButtonGroup As This
									) As Integer					'Returns the modular Idx of the control or 0, if it wasn't created

Dim	nCtrl As Integer

OnError GoTo ErrorOccured

RBNSplitButtonGroupAddControlThs = 0

	Call RBNInitiate

	nCtrl 					= RBNAddElement(sTabName, sGroupName, sSplitButtonName, sSplitButtonGroupName, sControlName, nControlType, ControlType_SplitButton)

	'Get Group controls collection
	marrParentControlColls(nCtrl) = GetCtrlGrpCtrls(rbnSplitButtonGroup)
'	rbnControlsColl = GetCtrlGrpCtrls(rbnSplitButtonGroup)

	marrControls(nCtrl) 		= MICtrlCollAddStrStrInt(marrParentControlColls(nCtrl), sControlName, sCaption, nControlType)
'	marrControls(nCtrl) 		= MICtrlCollAddStrStrInt(rbnControlsColl, sControlName, sCaption, nControlType)

	If sKeytip <> "" Then
		'Set the KeyTip for the Control. KeyTip: The keyboard shortcut for the Control.
		'A KeyTip must have from 1 to 3 uppercase characters.
		Call SetMICtrlKeyTip(marrControls(nCtrl), sKeytip)
	End If

	RBNSplitButtonGroupAddControlThs = nCtrl

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNSplitButtonGroupAddControlThs: " & sControlName & " to " & sSplitButtonGroupName & " on " & sSplitButtonName & " - tab | group: " & sTabName & "|" & sGroupName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNSplitButtonGroupAddControlIdx(	  ByVal sControlName As String
									, ByVal sCaption As String
									, ByVal sKeytip As String
									, ByVal nControlType As Integer
									, ByVal nSplitButtonGroupIdx As Integer
									) As Integer					'Returns the modular Idx of the control or 0, if it wasn't created

OnError GoTo ErrorOccured

	RBNSplitButtonGroupAddControlIdx = RBNSplitButtonGroupAddControlThs(sControlName, sCaption, sKeytip, nControlType
										, marrTabNames(nSplitButtonGroupIdx), marrGroupNames(nSplitButtonGroupIdx), marrSplitButtonNames(nSplitButtonGroupIdx), marrSplitButtonGroupNames(nSplitButtonGroupIdx)
										, marrControls(nSplitButtonGroupIdx))
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNSplitButtonGroupAddControlIdx: " & sControlName & " to SplitButtonGroup Index " & nSplitButtonGroupIdx)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNSplitButtonGroupRemoveControl(	  ByVal sControlName As String
									, ByVal sTabName As String
									, ByVal sGroupName As String
									, ByVal sSplitButtonName As string
									, ByVal sSplitButtonGroupName As string
									) As Integer

Dim	rbnTab As This,
	rbnGroup As This,
	rbnSplitButton As This,
	rbnSplitButtonGroup As This,
	rbnControlsColl as This,
	rbnControlItem As This,
	rbnTabFound As RefPtr,
	rbnGroupFound As RefPtr,
	rbnControlFound As RefPtr,
	rbnControlGroupFound As RefPtr,
	nItem, nCtrl, nNumCntrls As Integer

OnError GoTo ErrorOccured

RBNSplitButtonGroupRemoveControl = 0

	Call RBNInitiate

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

		If RBNTabGetGroupThs(rbnTab, sGroupName, rbnGroupFound) Then
			rbnGroup = rbnGroupFound

			If RBNGroupGetControlThs(rbnGroup, sSplitButtonName, rbnControlFound) Then
				rbnSplitButton = rbnControlFound

				If RBNSplitButtonGetGroupThs(rbnSplitButton, sSplitButtonGroupName, rbnControlGroupFound) Then
					rbnSplitButtonGroup	= rbnControlGroupFound

					'Get Group controls collection
					rbnControlsColl	= GetCtrlGrpCtrls(rbnSplitButtonGroup)
					nNumCntrls 		= GetMICtrlCollCount(rbnControlsColl)

					For nItem = (nNumCntrls - 1) To 0 Step -1
						rbnControlItem	= GetMICtrlCollItemInt(rbnControlsColl, nItem)
						If sControlName = GetMICtrlName(rbnControlItem) Then
							Call MICtrlCollRemoveAt(rbnControlsColl, nItem)
							nCtrl 						= RBNRemoveElement(sTabName, sGroupName, sSplitButtonName, sSplitButtonGroupName, sControlName)
							RBNSplitButtonGroupRemoveControl	= nCtrl
						End If
					Next
				End If
			End If
		End If
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnTab				= NULL_PTR
'	rbnGroup				= NULL_PTR
'	rbnSplitButton			= NULL_PTR
'	rbnSplitButtonGroup		= NULL_PTR
'	rbnControlsColl		= NULL_PTR
'	rbnControlItem			= NULL_PTR
'	rbnTabFound			= NULL_PTR
'	rbnGroupFound			= NULL_PTR
'	rbnControlFound		= NULL_PTR
'	rbnControlGroupFound	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNSplitButtonGroupRemoveControl: " & sControlName & " from " & sSplitButtonGroupName & " on " & sSplitButtonName & " - tab | group: " & sTabName & "|" & sGroupName)
	Call ERRShow()

End Function

'*******************************************************************************************************
'** WORKING WITH DROPDOWNBUTTONS **************************************************************************
'*******************************************************************************************************

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Function RBNDropDButtonNumGroups(	  ByVal sTabName As String
							, ByVal sGroupName As String
							, ByVal sDropDButtonName As String
							) As Integer	'Returns the number of groups and panels in the control collection of the DropDownButton


Dim	rbnTab As This,
	rbnGroup As This,
	rbnDropDButton As This,
	rbnGroupsColl as This,
	rbnTabFound As RefPtr,
	rbnGroupFound As RefPtr,
	rbnControlFound As RefPtr

OnError GoTo ErrorOccured

RBNDropDButtonNumGroups = 0

	Call RBNInitiate

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

		If RBNTabGetGroupThs(rbnTab, sGroupName, rbnGroupFound) Then
			'Get the ribbon group collection.
			rbnGroup		= rbnGroupFound

			If RBNGroupGetControlThs(rbnGroup, sDropDButtonName, rbnControlFound) Then
				rbnDropDButton = rbnControlFound

				'Get Group controls collection
				rbnGroupsColl 			= GetRbnDropDownCtrlCtrls(rbnDropDButton)
				'Get the number of groups
				RBNDropDButtonNumGroups	= GetMICtrlCollCount(rbnGroupsColl)
			End If
		End If
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnTab			= NULL_PTR
'	rbnGroup			= NULL_PTR
'	rbnDropDButton		= NULL_PTR
'	rbnGroupsColl		= NULL_PTR
'	rbnTabFound		= NULL_PTR
'	rbnGroupFound		= NULL_PTR
'	rbnControlFound	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNDropDButtonNumGroups")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNDropDButtonAddGroup(	  ByVal sDropDButtonGroupName As String
							, ByVal sCaption As String
							, ByVal sTabName As String
							, ByVal sGroupName As String
							, ByVal sDropDButtonName As String
							) As Integer					'Returns the modular Idx of the group or 0, if it wasn't created

Dim	nCtrl As Integer

OnError GoTo ErrorOccured

	nCtrl = RBNDropDButtonAddControl(sDropDButtonGroupName, sCaption, ControlType_DropDownMenuGroup, sTabName, sGroupName, sDropDButtonName)
	If nCtrl > 0 Then
		Call SetRbnDropDownCtrlHorzAlign(marrControls(nCtrl), Horiz_Align_Stretch)
		Call SetRbnDropDownCtrlVertAlign(marrControls(nCtrl), Vert_Align_Stretch)
		RBNDropDButtonAddGroup = nCtrl
	End If

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNDropDButtonAddGroup: " & sDropDButtonGroupName & " on DropDownButton " & sDropDButtonName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNDropDButtonAddGroupThs(  ByVal sDropDButtonGroupName As String
							, ByVal sCaption As String
							, ByVal sTabName As String
							, ByVal sGroupName As String
							, ByVal rbnDropDButton As String
							) As Integer					'Returns the modular Idx of the group or 0, if it wasn't created

Dim	nCtrl As Integer

OnError GoTo ErrorOccured

RBNDropDButtonAddGroupThs = 0

	nCtrl	= RBNDropDButtonAddControlThs(sDropDButtonGroupName, sCaption, ControlType_DropDownMenuGroup, sTabName, sGroupName, rbnDropDButton)

	If nCtrl > 0 Then
		Call SetRbnDropDownCtrlHorzAlign(marrControls(nCtrl), Horiz_Align_Stretch)
		Call SetRbnDropDownCtrlVertAlign(marrControls(nCtrl), Vert_Align_Stretch)
		RBNDropDButtonAddGroupThs = nCtrl
	End If

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNDropDButtonAddGroupThs: " & sDropDButtonGroupName & " on DropDownButton " & sDropDButtonName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNDropDButtonAddGroupIdx(  ByVal sDropDButtonGroupName As String
							, ByVal sCaption As String
							, ByVal sTabName As String
							, ByVal sGroupName As String
							, ByVal nDropDButtonIdx As String
							) As Integer					'Returns the modular Idx of the group or 0, if it wasn't created

OnError GoTo ErrorOccured

	RBNDropDButtonAddGroupIdx = RBNDropDButtonAddControlThs(sDropDButtonGroupName, sCaption, ControlType_DropDownMenuGroup, sTabName, sGroupName, marrControls(nDropDButtonIdx))
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNDropDButtonAddGroupIdx: " & sDropDButtonGroupName & " on DropDownButton Index " & nDropDButtonIdx)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNDropDButtonGroupRemove(  ByVal sDropDButtonGroupName As String
							, ByVal sTabName As String
							, ByVal sGroupName As String
							, ByVal sDropDButtonName As String
							) As Integer

Dim	rbnGroup As This,
	rbnGroupsColl as This,
	rbnDropDButton As This,
	rbnTabFound As RefPtr,
	rbnGroupFound As RefPtr,
	rbnControlFound As RefPtr,
	rbnControlGroupFound As RefPtr,
	rbnTab As This,
	nCtrl, nGroupItem As Integer

OnError GoTo ErrorOccured

RBNDropDButtonGroupRemove = 0

	Call RBNInitiate

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

		If RBNTabGetGroupThs(rbnTab, sGroupName, rbnGroupFound) Then
			'Get the ribbon group collection.
			rbnGroup		= rbnGroupFound

			If RBNGroupGetControlThs(rbnGroup, sDropDButtonName, rbnControlFound) Then
				rbnDropDButton = rbnControlFound

				nGroupItem = RBNDropDButtonGetGroupIndexThs(rbnDropDButton, sDropDButtonGroupName)
				If nGroupItem > RBN_ELEMENT_NOT_FOUND Then
					'Get Group controls collection
					rbnGroupsColl = GetRbnDropDownCtrlCtrls(rbnDropDButton)

					Call MICtrlCollRemoveAt(rbnGroupsColl, nGroupItem)
					nCtrl = RBNRemoveElement(sTabName, sGroupName, sDropDButtonName, sDropDButtonGroupName, "")
					RBNDropDButtonGroupRemove = nCtrl
				Else
					Call DEBUGPrint("RBNDropDButtonGroupRemove: Control not found: " & sDropDButtonGroupName)
				End If
			End If
		End If
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnTab				= NULL_PTR
'	rbnGroup				= NULL_PTR
'	rbnGroupsColl			= NULL_PTR
'	rbnDropDButton			= NULL_PTR
'	rbnTabFound			= NULL_PTR
'	rbnGroupFound			= NULL_PTR
'	rbnControlFound		= NULL_PTR
'	rbnControlGroupFound	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNDropDButtonGroupRemove: " & sDropDButtonGroupName & " on tab " & sTabName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNDropDButtonGetGroupThs(  rbnDropDButton As This
							, ByVal sGroupName As String
							, rbnGroupFound As RefPtr
							) As Logical

Dim	nGroupIndex As Integer,
	rbnGroupsColl As This,
	rbnGroupItem As This

OnError GoTo ErrorOccured

RBNDropDButtonGetGroupThs = FALSE

	nGroupIndex	= RBNDropDButtonGetGroupIndexThs(rbnDropDButton, sGroupName)
	If nGroupIndex > RBN_ELEMENT_NOT_FOUND Then
		rbnGroupsColl			= GetRbnDropDownCtrlCtrls(rbnDropDButton)

		rbnGroupItem 				= GetMICtrlCollItemInt(rbnGroupsColl, nGroupIndex)
		rbnGroupFound				= rbnGroupItem

		RBNDropDButtonGetGroupThs	= TRUE
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnGroupsColl 	= NULL_PTR
'	rbnGroupItem 	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNDropDButtonGetGroupThs")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNDropDButtonGetGroupIndexThs(  rbnDropDButton As This
								, ByVal sGroupName As String
								) As Integer

Dim	i, nNumGroups, nCtrlType As Integer,
	sName, sCaption As String,
	rbnGroupsColl As This,
	rbnGroupItem As This

OnError GoTo ErrorOccured

RBNDropDButtonGetGroupIndexThs = RBN_ELEMENT_NOT_FOUND

	rbnGroupsColl = GetRbnDropDownCtrlCtrls(rbnDropDButton)
	nNumGroups = GetMICtrlCollCount(rbnGroupsColl)

	For i = 0 To (nNumGroups - 1)
		rbnGroupItem = GetMICtrlCollItemInt(rbnGroupsColl, i)

		nCtrlType	= GetMICtrlCtrlType(rbnGroupItem)
		sName	= GetMICtrlName(rbnGroupItem)
'		sCaption	= GetMICtrlCaption(rbnGroupItem)

		If sName = sGroupName AND nCtrlType In (ControlType_DropDownMenuGroup, ControlType_WrapPanel, ControlType_StackPanel) Then
			RBNDropDButtonGetGroupIndexThs	= i
			Exit For
		End If
	Next

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnGroupsColl	= NULL_PTR
'	rbnGroupItem	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNDropDButtonGetGroupIndexThs: GroupName: " & sGroupName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNDropDButtonGroupExistsThs(	  rbnDropDButton As This
								, ByVal sGroupName As String
								) As Logical

OnError GoTo ErrorOccured

	RBNDropDButtonGroupExistsThs = (RBNDropDButtonGetGroupIndexThs(rbnDropDButton, sGroupName) > RBN_ELEMENT_NOT_FOUND)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNDropDButtonGroupExistsThs")
	Call ERRShow()

End Function

'*******************************************************************************************************
'** WORKING WITH PANELS ON DROPDOWNBUTTONS *************************************************************
'** A Panel, WrapPanel or StackPanel, is treated similar to a DropDownMenuGroup
'** A number of the functions below use the matching RBNDropDButtonGroup function
'*******************************************************************************************************

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNDropDButtonAddControl(	  ByVal sControlName As String
							, ByVal sCaption As String
							, ByVal nControlType As Integer
							, ByVal sTabName As String
							, ByVal sGroupName As String
							, ByVal sDropDButtonName As String
							) As Integer						'Returns the modular Idx of the Panel or 0, if it wasn't created

Dim	rbnTab As This,
	rbnGroup As This,
	rbnDropDButton As This,
	rbnGroupsColl as This,
	rbnTabFound As RefPtr,
	rbnGroupFound As RefPtr,
	rbnControlFound As RefPtr,
	nCtrl, nPrevIdx As Integer

OnError GoTo ErrorOccured

RBNDropDButtonAddControl = 0

	Call RBNInitiate

	nPrevIdx = RBNGetPrevDropDButtonElementIdx(sTabName, sGroupName, sDropDButtonName)
	If nPrevIdx > 0 and mnNumElements > 0 Then
		RBNDropDButtonAddControl	= RBNDropDButtonAddControlIdx(sControlName, sCaption, nControlType, sTabName, sGroupName, nPrevIdx)
		Exit Function
	End If

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

		If RBNTabGetGroupThs(rbnTab, sGroupName, rbnGroupFound) Then
			'Get the ribbon group collection.
			rbnGroup		= rbnGroupFound

			If RBNGroupGetControlThs(rbnGroup, sDropDButtonName, rbnControlFound) Then
				rbnDropDButton = rbnControlFound

				nCtrl = RBNAddElement(sTabName, sGroupName, sDropDButtonName, sControlName, "", nControlType, ControlType_DropDownButton)

				'Get Group controls collection
				marrParentControlColls(nCtrl) = GetRbnDropDownCtrlCtrls(rbnDropDButton)

				'Add a new panel.
				marrControls(nCtrl)			= MICtrlCollAddStrStrInt(marrParentControlColls(nCtrl), sControlName, sCaption, nControlType)

				RBNDropDButtonAddControl = nCtrl
			End If
		End If
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnTab 			= NULL_PTR
'	rbnGroup 			= NULL_PTR
'	rbnDropDButton 	= NULL_PTR
'	rbnGroupsColl 		= NULL_PTR
'	rbnTabFound 		= NULL_PTR
'	rbnGroupFound 		= NULL_PTR
'	rbnControlFound 	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNDropDButtonAddControl: " & sControlName & " on DropDownButton " & sDropDButtonName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNDropDButtonAddControlThs(	  ByVal sControlName As String
								, ByVal sCaption As String
								, ByVal nControlType As Integer
								, ByVal sTabName As String
								, ByVal sGroupName As String
								, ByVal rbnDropDButton As String
								) As Integer					'Returns the modular Idx of the Panel or 0, if it wasn't created


Dim	nCtrl As Integer

OnError GoTo ErrorOccured

RBNDropDButtonAddControlThs = 0

	Call RBNInitiate

	nCtrl = RBNAddElement(sTabName, sGroupName, GetRbnDropDownCtrlName(rbnDropDButton), sControlName, "", nControlType, ControlType_DropDownButton)

	'Get Group controls collection
	marrParentControlColls(nCtrl) = GetRbnDropDownCtrlCtrls(rbnDropDButton)

	'Add a new group.
	marrControls(nCtrl)			= MICtrlCollAddStrStrInt(marrParentControlColls(nCtrl), sControlName, sCaption, nControlType)

	RBNDropDButtonAddControlThs = nCtrl

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNDropDButtonAddControlThs: " & sControlName & " on DropDownButton " & sDropDButtonName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNDropDButtonAddControlIdx(	  ByVal sControlName As String
								, ByVal sCaption As String
								, ByVal nControlType As Integer
								, ByVal sTabName As String
								, ByVal sGroupName As String
								, ByVal nDropDButtonIdx As String
								) As Integer					'Returns the modular Idx of the Panel or 0, if it wasn't created

OnError GoTo ErrorOccured

	RBNDropDButtonAddControlIdx = RBNDropDButtonAddControlThs(sControlName, sCaption, nControlType, sTabName, sGroupName, marrControls(nDropDButtonIdx))
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNDropDButtonAddControlIdx: " & sControlName & " on DropDownButton Index " & nDropDButtonIdx)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNDropDButtonRemoveControl(	  ByVal sControlName As String
								, ByVal sTabName As String
								, ByVal sGroupName As String
								, ByVal sDropDButtonName As String
								) As Integer

Dim	rbnGroup As This,
	rbnGroupsColl as This,
	rbnDropDButton As This,
	rbnTabFound As RefPtr,
	rbnGroupFound As RefPtr,
	rbnControlFound As RefPtr,
	rbnControlGroupFound As RefPtr,
	rbnTab As This,
	nCtrl, nControlItem As Integer

OnError GoTo ErrorOccured

RBNDropDButtonRemoveControl = 0

	Call RBNInitiate

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

		If RBNTabGetGroupThs(rbnTab, sGroupName, rbnGroupFound) Then
			'Get the ribbon group collection.
			rbnGroup		= rbnGroupFound

			If RBNGroupGetControlThs(rbnGroup, sDropDButtonName, rbnControlFound) Then
				rbnDropDButton = rbnControlFound

				nControlItem = RBNDropDButtonGetControlIndexThs(rbnDropDButton, sControlName)
				If nControlItem > RBN_ELEMENT_NOT_FOUND Then
					'Get Group controls collection
					rbnGroupsColl = GetRbnSplitCtrlCtrls(rbnDropDButton)

					Call MICtrlCollRemoveAt(rbnGroupsColl, nControlItem)
					nCtrl = RBNRemoveElement(sTabName, sGroupName, sDropDButtonName, sControlName, "")
					RBNDropDButtonRemoveControl = nCtrl
				Else
'					Call DEBUGPrint("RBNDropDButtonRemoveControl: Control not found: " & sControlName)
				End If
			End If
		End If
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnTab				= NULL_PTR
'	rbnGroup				= NULL_PTR
'	rbnGroupsColl			= NULL_PTR
'	rbnDropDButton			= NULL_PTR
'	rbnTabFound			= NULL_PTR
'	rbnGroupFound			= NULL_PTR
'	rbnControlFound		= NULL_PTR
'	rbnControlGroupFound	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNDropDButtonRemoveControl: " & sControlName & " on tab " & sTabName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNDropDButtonGetControlThs(	  rbnDropDButton As This
								, ByVal sControlName As String
								, rbnControlFound As RefPtr
								) As Logical

Dim	nControlIndex As Integer,
	rbnGroupsColl As This,
	rbnControlItem As This

OnError GoTo ErrorOccured

RBNDropDButtonGetControlThs = FALSE

	nControlIndex	= RBNDropDButtonGetControlIndexThs(rbnDropDButton, sControlName)
	If nControlIndex > RBN_ELEMENT_NOT_FOUND Then
		rbnGroupsColl		= GetRbnSplitCtrlCtrls(rbnDropDButton)

		rbnControlItem		= GetMICtrlCollItemInt(rbnGroupsColl, nControlIndex)
		rbnControlFound	= rbnControlItem

		RBNDropDButtonGetControlThs	= TRUE
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnGroupsColl 	= NULL_PTR
'	rbnControlItem 	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNDropDButtonGetControlThs")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNDropDButtonGetControlIndexThs(	  rbnDropDButton As This
									, ByVal sControlName As String
									) As Integer

Dim	i, nNumControls, nCtrlType As Integer,
	sName, sCaption As String,
	rbnGroupsColl As This,
	rbnGroupItem As This

OnError GoTo ErrorOccured

RBNDropDButtonGetControlIndexThs = RBN_ELEMENT_NOT_FOUND

	rbnGroupsColl	= GetRbnSplitCtrlCtrls(rbnDropDButton)
	nNumControls	= GetMICtrlCollCount(rbnGroupsColl)
	For i = 0 To (nNumControls - 1)
		rbnGroupItem = GetMICtrlCollItemInt(rbnGroupsColl, i)

		nCtrlType	= GetMICtrlCtrlType(rbnGroupItem)
		sName	= GetMICtrlName(rbnGroupItem)

		If sName = sControlName Then
			RBNDropDButtonGetControlIndexThs	= i
			Exit For
		End If
	Next

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnGroupsColl	= NULL_PTR
'	rbnGroupItem	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNDropDButtonGetControlIndexThs: ControlName: " & sControlName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNDropDButtonControlExistsThs(  rbnDropDButton As This
								, ByVal sControlName As String
								) As Logical

OnError GoTo ErrorOccured

	RBNDropDButtonControlExistsThs = (RBNDropDButtonGetControlIndexThs(rbnDropDButton, sControlName) > RBN_ELEMENT_NOT_FOUND)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNDropDButtonGroupExistsThs")
	Call ERRShow()

End Function


'*******************************************************************************************************
'** WORKING WITH CONTROLS ON DROPDOWNBUTTONS ***************************************************************
'*******************************************************************************************************

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNDropDButtonGroupAddControl(	  ByVal sControlName As String
								, ByVal sCaption As String
								, ByVal sKeytip As String
								, ByVal nControlType As Integer
								, ByVal sTabName As String
								, ByVal sGroupName As String
								, ByVal sDropDButtonName As string
								, ByVal sDropDButtonGroupName As string
								) As Integer					'Returns the modular Idx of the control or 0, if it wasn't created
Dim	rbnTab As This,
	rbnGroup As This,
	rbnDropDButton As This,
	rbnDropDButtonGroup As This,
	rbnControlsColl as This,
	rbnTabFound As RefPtr,
	rbnGroupFound As RefPtr,
	rbnControlFound As RefPtr,
	rbnControlGroupFound As RefPtr,
	nCtrl, nPrevIdx As Integer

OnError GoTo ErrorOccured

RBNDropDButtonGroupAddControl = 0

	Call RBNInitiate

	nPrevIdx = RBNGetPrevDropDButtonGroupElementIdx(sTabName, sGroupName, sDropDButtonName, sDropDButtonGroupName)
	If nPrevIdx > 0 and mnNumElements > 0 Then
		Call DEBUGPrint("Found DropDButtonGroup as #" & nPrevIdx)
		RBNDropDButtonGroupAddControl	= RBNDropDButtonGroupAddControlIdx(sControlName, sCaption, sKeytip, nControlType, sTabName, sGroupName, sDropDButtonName, nPrevIdx)
		Exit Function
	End If

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

		If RBNTabGetGroupThs(rbnTab, sGroupName, rbnGroupFound) Then
			rbnGroup = rbnGroupFound

			If RBNGroupGetControlThs(rbnGroup, sDropDButtonName, rbnControlFound) Then
				rbnDropDButton = rbnControlFound

				If RBNDropDButtonGetGroupThs(rbnDropDButton, sDropDButtonGroupName, rbnControlGroupFound) Then
					rbnDropDButtonGroup	= rbnControlGroupFound

					nCtrl 			= RBNAddElement(GetRbnTabName(rbnTab), GetRbnCtrlGrpName(rbnGroup), sDropDButtonName, sDropDButtonGroupName, sControlName, nControlType, ControlType_DropDownButton)

					'Get Group controls collection
					marrParentControlColls(nCtrl) = GetCtrlGrpCtrls(rbnDropDButtonGroup)
'					rbnControlsColl = GetCtrlGrpCtrls(rbnDropDButtonGroup)

					marrControls(nCtrl) 		= MICtrlCollAddStrStrInt(marrParentControlColls(nCtrl), sControlName, sCaption, nControlType)
'					marrControls(nCtrl) 		= MICtrlCollAddStrStrInt(rbnControlsColl, sControlName, sCaption, nControlType)

					If sKeytip <> "" Then
						'Set the KeyTip for the Control. KeyTip: The keyboard shortcut for the Control.
						'A KeyTip must have from 1 to 3 uppercase characters.
						Call SetMICtrlKeyTip(marrControls(nCtrl), sKeytip)
					End If
				End If

				RBNDropDButtonGroupAddControl = nCtrl
			End If
		End If
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnTab 				= NULL_PTR
'	rbnGroup 				= NULL_PTR
'	rbnDropDButton 		= NULL_PTR
'	rbnDropDButtonGroup 	= NULL_PTR
'	rbnControlsColl 		= NULL_PTR
'	rbnTabFound 			= NULL_PTR
'	rbnGroupFound 			= NULL_PTR
'	rbnControlFound 		= NULL_PTR
'	rbnControlGroupFound 	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNDropDButtonGroupAddControl: " & sControlName & " to " & sDropDButtonGroupName & " on " & sDropDButtonName & " - tab | group: " & sTabName & "|" & sGroupName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNDropDButtonGroupAddControlThs(	  ByVal sControlName As String
									, ByVal sCaption As String
									, ByVal sKeytip As String
									, ByVal nControlType As Integer
									, ByVal sTabName As String
									, ByVal sGroupName As String
									, ByVal sDropDButtonName As string
									, ByVal rbnDropDButtonGroup As string
									) As Integer					'Returns the modular Idx of the control or 0, if it wasn't created

Dim	nCtrl As Integer

OnError GoTo ErrorOccured

RBNDropDButtonGroupAddControlThs = 0

	Call RBNInitiate

	nCtrl 			= RBNAddElement(sTabName, sGroupName, sDropDButtonName, GetMICtrlName(rbnDropDButtonGroup), sControlName, nControlType, ControlType_DropDownButton)

	'Get Group controls collection
	marrParentControlColls(nCtrl) = GetCtrlGrpCtrls(rbnDropDButtonGroup)

	marrControls(nCtrl) 		= MICtrlCollAddStrStrInt(marrParentControlColls(nCtrl), sControlName, sCaption, nControlType)

	If sKeytip <> "" Then
		'Set the KeyTip for the Control. KeyTip: The keyboard shortcut for the Control.
		'A KeyTip must have from 1 to 3 uppercase characters.
		Call SetMICtrlKeyTip(marrControls(nCtrl), sKeytip)
	End If

	RBNDropDButtonGroupAddControlThs = nCtrl

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNDropDButtonGroupAddControlThs: " & sControlName & " to " & sDropDButtonGroupName & " on " & sDropDButtonName & " - tab | group: " & sTabName & "|" & sGroupName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNDropDButtonGroupAddControlIdx(	  ByVal sControlName As String
									, ByVal sCaption As String
									, ByVal sKeytip As String
									, ByVal nControlType As Integer
									, ByVal sTabName As String
									, ByVal sGroupName As String
									, ByVal sDropDButtonName As string
									, ByVal nDropDButtonGroupIdx As string
									) As Integer					'Returns the modular Idx of the control or 0, if it wasn't created

OnError GoTo ErrorOccured

	Call DEBUGPrint("nDropDButtonGroupIdx: " & nDropDButtonGroupIdx)
	Call DEBUGPrint("   Num Controls: " & Ubound(marrControls))
	RBNDropDButtonGroupAddControlIdx = RBNDropDButtonGroupAddControlThs(sControlName, sCaption, sKeytip, nControlType, sTabName, sGroupName, sDropDButtonName, marrControls(nDropDButtonGroupIdx))
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNDropDButtonGroupAddControlIdx: " & sControlName & " to " & sDropDButtonGroupName & " on " & sDropDButtonName & " - tab | group: " & sTabName & "|" & sGroupName)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNDropDButtonGroupRemoveControl(	  ByVal sControlName As String
									, ByVal sTabName As String
									, ByVal sGroupName As String
									, ByVal sDropDButtonName As string
									, ByVal sDropDButtonGroupName As string
									) As Integer

Dim	rbnTab As This,
	rbnGroup As This,
	rbnDropDButton As This,
	rbnDropDButtonGroup As This,
	rbnControlsColl as This,
	rbnControlItem As This,
	rbnTabFound As RefPtr,
	rbnGroupFound As RefPtr,
	rbnControlFound As RefPtr,
	rbnControlGroupFound As RefPtr,
	nItem, nCtrl, nNumCntrls As Integer

OnError GoTo ErrorOccured

RBNDropDButtonGroupRemoveControl = 0

	Call RBNInitiate

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

		If RBNTabGetGroupThs(rbnTab, sGroupName, rbnGroupFound) Then
			rbnGroup = rbnGroupFound

			If RBNGroupGetControlThs(rbnGroup, sDropDButtonName, rbnControlFound) Then
				rbnDropDButton = rbnControlFound

				If RBNDropDButtonGetGroupThs(rbnDropDButton, sDropDButtonGroupName, rbnControlGroupFound) Then
					rbnDropDButtonGroup	= rbnControlGroupFound

					'Get Group controls collection
					rbnControlsColl	= GetCtrlGrpCtrls(rbnDropDButtonGroup)
					nNumCntrls 		= GetMICtrlCollCount(rbnControlsColl)

					For nItem = 0 To (nNumCntrls - 1)
						rbnControlItem	= GetMICtrlCollItemInt(rbnControlsColl, nItem)
						If sControlName = GetMICtrlName(rbnControlItem) Then
							Call MICtrlCollRemoveAt(rbnControlsColl, nItem)
							nCtrl 						= RBNRemoveElement(sTabName, sGroupName, sDropDButtonName, sDropDButtonGroupName, sControlName)
							RBNDropDButtonGroupRemoveControl	= nCtrl
						End If
					Next
				End If
			End If
		End If
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnTab				= NULL_PTR
'	rbnGroup				= NULL_PTR
'	rbnDropDButton			= NULL_PTR
'	rbnDropDButtonGroup		= NULL_PTR
'	rbnControlsColl		= NULL_PTR
'	rbnControlItem			= NULL_PTR
'	rbnTabFound			= NULL_PTR
'	rbnGroupFound			= NULL_PTR
'	rbnControlFound		= NULL_PTR
'	rbnControlGroupFound	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNDropDButtonGroupRemoveControl: " & sControlName & " from " & sDropDButtonGroupName & " on " & sDropDButtonName & " - tab | group: " & sTabName & "|" & sGroupName & ", nItem: " & nItem)
	Call ERRPrint()
	Call ERRShow()

End Function

'*******************************************************************************************************
'** WORKING WITH GALLERY ************************************************************************
'*******************************************************************************************************

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGalleryGetGroupThs(	  rbnGallery As This
							, ByVal sGroupName As String
							, rbnGroupFound As RefPtr
							) As Logical

Dim	i, nGroupIndex As Integer,
	rbnGroupsColl As This,
	rbnGroupItem As This

OnError GoTo ErrorOccured

RBNGalleryGetGroupThs = FALSE

	nGroupIndex	= RBNGalleryGetGroupIndexThs(rbnGallery, sGroupName)
	If nGroupIndex > RBN_ELEMENT_NOT_FOUND Then
		rbnGroupsColl	= GetRbnGalleryCtrlGrps(rbnGallery)

		rbnGroupItem 			= GetMIGalleryGrpCollItemInt(rbnGroupsColl, nGroupIndex)
		rbnGroupFound			= rbnGroupItem

		RBNGalleryGetGroupThs	= TRUE
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnGroupsColl 	= NULL_PTR
'	rbnGroupItem 	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGalleryGetGroupThs")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGalleryGetGroupIndexThs( rbnGallery As This
							, ByVal sGroupName As String
							) As Integer

Dim	i, nNumGroups As Integer,
	sName, sCaption As String,
	rbnGroupsColl As This,
	rbnGroupItem As This

OnError GoTo ErrorOccured

RBNGalleryGetGroupIndexThs = RBN_ELEMENT_NOT_FOUND

	rbnGroupsColl = GetRbnGalleryCtrlGrps(rbnTab)
	nNumGroups = GetMIGalleryGrpCollCount(rbnGroupsColl)
'	Call DEBUGPrint("   RBNGalleryGetGroupIndexThs: Number of Gallery Groups " & nNumGroups)
	For i = 0 To (nNumGroups - 1)
		rbnGroupItem = GetMIGalleryGrpCollItemInt(rbnGroupsColl, i)

		sName	= GetRbnGalleryGrpName(rbnGroupItem)
'		sCaption	= GetRbnGalleryGrpCaption(rbnGroupItem)
'		Call DEBUGPrint("   Gallery Group " & i & " is named " & sName & " but shown as " & sCaption)

		If sName = sGroupName Then
			RBNGalleryGetGroupIndexThs	= i
			Exit For
		End If
	Next

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnGroupsColl	= NULL_PTR
	rbnGroupItem	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGalleryGetGroupIndexThs")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGalleryGroupExistsThs(	  rbnGallery As This
							, ByVal sGroupName As String
							) As Logical

OnError GoTo ErrorOccured

	RBNGalleryGroupExistsThs = (RBNGalleryGetGroupIndexThs(rbnGallery, sGroupName) > RBN_ELEMENT_NOT_FOUND)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGalleryGroupExistsThs")
	Call ERRShow()

End Function

'*******************************************************************************************************
'** WORKING WITH STATUSBAR *************************************************************
'*******************************************************************************************************
'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Business Insight
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNStatusbarAddControl(	  ByVal sControlName As String
							, ByVal sCaption As String
							, ByVal nControlType As Integer
							) As Integer				'Returns the modular Idx of the control or 0, if it wasn't created

Dim	nCtrl As Integer

OnError GoTo ErrorOccured

RBNStatusbarAddControl = 0

	Call RBNInitiate

	nCtrl = RBNAddElement("Statusbar", "", "", "", "", nControlType, CONTROL_TYPE_STATUSBAR)

	'Add a new Tab to theTabsColl collection
	marrParentControlColls(nCtrl)	= theStatusbarControlsColl
	marrControls(nCtrl) 		= MICtrlCollAddStrStrInt(marrParentControlColls(nCtrl), sControlName, sCaption, nControlType)

	RBNStatusbarAddControl = nCtrl

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNStatusbarAddControl")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNStatusbarInsertControl(  ByVal sControlName As String
							, ByVal sCaption As String
							, ByVal nControlType As Integer
							, ByVal nPosition As Integer
							) As Integer

Dim	nCtrl As Integer

OnError GoTo ErrorOccured

RBNStatusbarInsertControl = 0

	Call RBNInitiate

	nCtrl 					= RBNAddElement("Statusbar", "", "", "", "", nControlType, CONTROL_TYPE_STATUSBAR)
	'Add a new Tab to theTabsColl collection
	marrParentControlColls(nCtrl)	= theStatusbarControlsColl
	marrControls(nCtrl) 		= MICtrlCollAddStrStrInt(marrParentControlColls(nCtrl), sControlName, sCaption, nControlType)

	RBNStatusbarInsertControl = nCtrl

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNStatusbarInsertControl: " & sControlName & " at position " & nPosition)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNStatusbarInsertControlAfter(  ByVal sControlName As String
								, ByVal sCaption As String
								, ByVal nControlType As Integer
								, ByVal sNameAfter As String
								) As Integer

Dim	nPosition As Integer

OnError GoTo ErrorOccured

RBNStatusbarInsertControlAfter = 0

	nPosition = RBNStatusbarGetControlIndex(sNameAfter)
	If nPosition = 0 Then
		RBNStatusbarInsertControlAfter 	= RBNStatusbarAddControl(sControlName, sCaption, nControlType)
	Else
		nPosition					= nPosition + 1
		RBNStatusbarInsertControlAfter 	= RBNStatusbarInsertControl(sControlName, sCaption, nControlType, nPosition)
	End If

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNStatusbarInsertControlAfter: " & sControlName & " after " & sNameAfter)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNStatusbarInsertControlBefore( ByVal sControlName As String
								, ByVal sCaption As String
								, ByVal nControlType As Integer
								, ByVal sNameBefore As String
								) As Integer

Dim	nPosition As Integer

OnError GoTo ErrorOccured

RBNStatusbarInsertControlBefore = 0

	nPosition = RBNStatusbarGetControlIndex(sNameBefore)
	If nPosition = 0 Then
		RBNStatusbarInsertControlBefore 	= RBNStatusbarAddControl(sControlName, sCaption, nControlType)
	Else
		RBNStatusbarInsertControlBefore 	= RBNStatusbarInsertControl(sControlName, sCaption, nControlType, nPosition)
	End If

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNStatusbarInsertControlBefore: " & sControlName & " before " & sNameBefore)
	Call ERRShow()

End Function


'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Business Insight
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNStatusbarRemoveControl(  ByVal sControlName As String
							) As Integer

Dim	nCtrl, nItem, nNumCntrls As Integer,
	rbnControlItem As This

OnError GoTo ErrorOccured

RBNStatusbarRemoveControl = FALSE

	nNumCntrls 		= GetMICtrlCollCount(theStatusbarControlsColl)

	For nItem = 0 To (nNumCntrls - 1)
		rbnControlItem	= GetMICtrlCollItemInt(theStatusbarControlsColl, nItem)
		If sControlName = GetMICtrlName(rbnControlItem) Then
			Call MICtrlCollRemoveAt(theStatusbarControlsColl, nItem)
			nCtrl 					= RBNRemoveElement("Statusbar", "", "", "", sControlName)
			RBNStatusbarRemoveControl	= nCtrl
		End If
	Next

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNStatusbarRemoveControl")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNStatusbarGetControlIndex(	  ByVal sControlName As String
								) As Integer

OnError GoTo ErrorOccured

RBNStatusbarGetControlIndex = 0

	Call RBNInitiate

	RBNStatusbarGetControlIndex = RBNCollectionGetControlIndexThs(theStatusbarControlsColl, sControlName)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNStatusbarGetControlIndex")
	Call ERRShow()

End Function

'*******************************************************************************************************
'** WORKING WITH COLLECTIONS *************************************************************************
'*******************************************************************************************************

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNCollectionGetControlIndexThs( rbnControlsColl As this
								, ByVal sControlName As String
								) As Integer

Dim	i, nNumControls As Integer,
	sName As String,
	rbnControlItem As This

OnError GoTo ErrorOccured

RBNCollectionGetControlIndexThs = RBN_ELEMENT_NOT_FOUND

	Call RBNInitiate

	nNumControls = GetMICtrlCollCount(rbnControlsColl)
'	Call DEBUGPrint("   RBNCollectionGetControlIndexThs: Number of Controls " & nNumControls)
	For i = 0 To (nNumControls - 1)
		rbnControlItem	= GetMICtrlCollItemInt(rbnControlsColl, i)

		sName		= GetMICtrlName(rbnControlItem)
'		Call DEBUGPrint("     : " & i & " " & sName)

		If sName = sControlName Then
			RBNCollectionGetControlIndexThs	= i
			Exit For
		End If
	Next

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnControlItem		= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNCollectionGetControlIndexThs")
	Call ERRShow()

End Function

'*******************************************************************************************************
'** WORKING WITH CONTEXTGROUPS *************************************************************************
'*******************************************************************************************************

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGetContextGroup(	  rbnTab As This
						, ByVal sGroupName As String
						, rbnGroupFound As RefPtr
						) As Logical

Dim	i, nNumGroups As Integer,
	sName, sCaption As String,
	rbnGroupsColl As This,
	rbnGroupItem As This

OnError GoTo ErrorOccured

RBNGetContextGroup = FALSE

	rbnGroupsColl	= GetCntxtTabGrpsColl(theRibbon)
	nNumGroups	= GetRbnCntxtTabGrpCollCount(rbnGroupsColl)
'	Call DEBUGPrint("   RBNGetContextGroup: Number of Tab Groups " & nNumGroups)
	For i = 0 To (nNumGroups - 1)
		rbnGroupItem = GetRbnCntxtTabGrpCollItemInt(rbnGroupsColl, i)

		sName	= GetRbnCntxtTabGrpName(rbnTabGrpItem)
'		sCaption	= GetRbnCntxtTabGrpCaption(rbnTabGrpItem)
'		Call DEBUGPrint("   Tab Ctrl Group " & i & " is named " & sName & " but shown as " & sCaption)

		If sName = sGroupName Then
			rbnGroupFound		= rbnGroupItem
			RBNGetContextGroup	= TRUE
			Exit For
		End If
	Next

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnGroupsColl	= NULL_PTR
	rbnGroupItem	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGetContextGroup")
	Call ERRShow()

End Function

'*******************************************************************************************************
'** WORKING WITH CONTROLS ON CONTEXTGROUPS *************************************************************
'*******************************************************************************************************

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNContextGroupAddButton(	  ByVal sControlName As String
							, ByVal sCaption As String
							, ByVal sKeytip As String
							, ByVal sTabName As String
							, ByVal sGroupName As String
							) As Integer

Dim	rbnGroup As This,
	rbnGroupsColl as This,
	rbnTabFound As RefPtr,
	rbnGroupFound As RefPtr,
	rbnTab As This,
	nCtrl As Integer

OnError GoTo ErrorOccured

RBNContextGroupAddButton = 0

	Call RBNInitiate

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

		If RBNGetContextGroup(rbnTab, sGroupName, rbnGroupFound) Then
			rbnGroup = rbnGroupFound

			nCtrl 					= RBNAddElement(GetRbnTabName(rbnTab), GetRbnCtrlGrpName(rbnGroup), "", "", sControlName, ControlType_Button, 0)

			'Get Group controls collection
			marrParentControlColls(nCtrl) = GetRbnCtrlGrpCtrls(rbnGroup)

			marrControls(nCtrl) 		= MICtrlCollAddStrStrInt(marrParentControlColls(nCtrl), sControlName, sCaption, ControlType_Button)
'			marrControls(nCtrl) 		= MICtrlCollAddStrStrInt(rbnGroupsColl, sControlName, sCaption, ControlType_Button)

			RBNContextGroupAddButton = nCtrl
		End If
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnGroup		= NULL_PTR
	rbnGroupsColl	= NULL_PTR
	rbnTabFound	= NULL_PTR
	rbnGroupFound	= NULL_PTR
	rbnTab		= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNContextGroupAddButton")
	Call ERRShow()

End Function

'*******************************************************************************************************
'** WORKING WITH MENUITEMS ON TOOLCONTEXTMENU **********************************************************
'*******************************************************************************************************

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNToolContextMenuAddMenuItem(	  ByVal sControlName As String
								, ByVal sCaption As String		'If "(-" then a separator is added
								, ByVal sKeytip As String
								) As Integer					'Returns the modular Idx of the control or 0, if it wasn't created

Dim	nCtrl, nCtrlType as Integer

OnError GoTo ErrorOccured

RBNToolContextMenuAddMenuItem = 0

	Call RBNInitiate

	If sCaption = "(-" Then
		nCtrlType	= ControlType_ContextMenuSeparator
		sCaption	= ""
	Else
		nCtrlType	= ControlType_ContextMenuItem
	End If

	nCtrl 					= RBNAddElement("ToolContextMenu", "", "", "", sControlName, nCtrlType, 0)
	marrParentControlColls(nCtrl)	= theToolContextMenuItemsColl
	marrControls(nCtrl) 		= MICtrlCollAddStrStrInt(marrParentControlColls(nCtrl), sControlName, sCaption, nCtrlType)
'	marrControls(nCtrl) 		= MICtrlCollAddStrStrInt(theToolContextMenuItemsColl, sControlName, sCaption, nCtrlType)

	If sKeytip <> "" Then
		'Set the KeyTip for the Control. KeyTip: The keyboard shortcut for the Control.
		'A KeyTip must have from 1 to 3 uppercase characters.
		Call SetMICtrlKeyTip(marrControls(nCtrl), sKeytip)
	End If

	RBNToolContextMenuAddMenuItem = nCtrl
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNToolContextMenuAddMenuItem")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNToolContextMenuRemoveMenuItem(	  ByVal sControlName As String
									) As Integer					'Returns the modular Idx of the control or 0, if it wasn't created

Dim	nControlItem, nCtrl as Integer

OnError GoTo ErrorOccured

RBNToolContextMenuRemoveMenuItem = 0

	Call RBNInitiate

	nControlItem = RBNCollectionGetControlIndexThs(theToolContextMenuItemsColl, sControlName)
	If nControlItem > RBN_ELEMENT_NOT_FOUND Then
		Call MICtrlCollRemoveAt(theToolContextMenuItemsColl, nControlItem)
		nCtrl 					= RBNRemoveElement("ToolContextMenu", "", "", "", sControlName)
		RBNToolContextMenuRemoveMenuItem	= nCtrl
	Else
		Call DEBUGPrint("RBNToolContextMenuRemoveMenuItem: Menu Item not found: " & sControlName)
	End If

	RBNToolContextMenuRemoveMenuItem = nCtrl

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNToolContextMenuRemoveMenuItem")
	Call ERRShow()

End Function

'*******************************************************************************************************
'** WORKING WITH MENUITEMS ON CONTEXTMENUS *************************************************************
'*******************************************************************************************************
'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNCntxtMenuAddControl(		  ByVal nContextMenuID As Integer
								, ByVal sControlName As String
								, ByVal sCaption As String		'If "(-" then a separator is added
								, ByVal sKeytip As String
								, ByVal nControlType As Integer
								) As Integer					'Returns the modular Idx of the control or 0, if it wasn't created

OnError GoTo ErrorOccured

	RBNCntxtMenuAddControl = RBNCntxtMenuInsertControl(nContextMenuID, sControlName, sCaption, sKeytip, nControlType, RBN_ELEMENT_INSERT_AS_LAST)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNCntxtMenuAddControl")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNCntxtMenuInsertControl(	  ByVal nContextMenuID As Integer
								, ByVal sControlName As String
								, ByVal sCaption As String
								, ByVal sKeytip As String
								, ByVal nControlType As Integer
								, ByVal nPosition As Integer
								) As Integer

Dim	nCtrl As Integer,
	rbnCntxtMenu As This

OnError GoTo ErrorOccured

RBNCntxtMenuInsertControl = 0

	Call RBNInitiate
	rbnCntxtMenu 			= ICntxtMnusGetCntxtMnu(theContextMenus, nContextMenuID)

	nCtrl = RBNAddElement("CONTEXTMENU=" & Str$(nContextMenuID), "", "", "", sControlName, nControlType, CONTROL_TYPE_RLIB_CNTXT_MNU)
	marrParentControlColls(nCtrl)	= GetICntxtMnuCtrls(rbnCntxtMenu)

	If nPosition = RBN_ELEMENT_INSERT_AS_LAST Then
		marrControls(nCtrl) 		= MICtrlCollAddStrStrInt(marrParentControlColls(nCtrl), sControlName, sCaption, nControlType)
	Else
		marrControls(nCtrl) 		= MICtrlCollInsertIntStrStrInt(marrParentControlColls(nCtrl), nPosition, sControlName, sCaption, nControlType)
	End If

	If sKeytip <> "" Then
		'Set the KeyTip for the Control. KeyTip: The keyboard shortcut for the Control.
		'A KeyTip must have from 1 to 3 uppercase characters.
		Call SetMICtrlKeyTip(marrControls(nCtrl), sKeytip)
	End If

	RBNCntxtMenuInsertControl = nCtrl

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	'rbnCntxtMenu			= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNCntxtMenuInsertControl: " & sControlName & " at position " & nPosition)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNCntxtMenuInsertControlAfter(	  ByVal nContextMenuID As Integer
									, ByVal sControlName As String
									, ByVal sCaption As String
									, ByVal sKeytip As String
									, ByVal nControlType As Integer
									, ByVal sNameAfter As String
									) As Integer

Dim	nPosition As Integer

OnError GoTo ErrorOccured

RBNCntxtMenuInsertControlAfter = 0

	nPosition = RBNCntxtMenuGetControlIndex(nContextMenuID, sNameAfter)
	If nPosition <> RBN_ELEMENT_NOT_FOUND Then
		'**Let's insert it AFTER the control we found
		nPosition		= nPosition + 1
	Else
		'**Let's insert it as the LAST control
		nPosition		= RBN_ELEMENT_INSERT_AS_LAST
	End If
	RBNCntxtMenuInsertControlAfter	= RBNCntxtMenuInsertControl(nContextMenuID, sControlName, sCaption, sKeytip, nControlType, nPosition)

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNCntxtMenuInsertControlAfter: " & sControlName & " after " & sNameAfter)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNCntxtMenuInsertControlBefore(	  ByVal nContextMenuID As Integer
									, ByVal sControlName As String
									, ByVal sCaption As String
									, ByVal sKeytip As String
									, ByVal nControlType As Integer
									, ByVal sNameBefore As String
									) As Integer

Dim	nPosition As Integer

OnError GoTo ErrorOccured

RBNCntxtMenuInsertControlBefore = 0

	nPosition = RBNCntxtMenuGetControlIndex(nContextMenuID, sNameBefore)
	If nPosition = RBN_ELEMENT_NOT_FOUND Then
		'**Let's insert it as the LAST control
		nPosition		= RBN_ELEMENT_INSERT_AS_LAST
	End If
	RBNCntxtMenuInsertControlBefore 	= RBNCntxtMenuInsertControl(nContextMenuID, sControlName, sCaption, sKeytip, nControlType, nPosition)

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNCntxtMenuInsertControlBefore: " & sControlName & " before " & sNameBefore)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNCntxtMenuAddMenuItem(		  ByVal nContextMenuID As Integer
								, ByVal sControlName As String
								, ByVal sCaption As String		'If "(-" then a separator is added
								, ByVal sKeytip As String
								) As Integer					'Returns the modular Idx of the control or 0, if it wasn't created

OnError GoTo ErrorOccured

	If sCaption = "(-" Then
		RBNCntxtMenuAddMenuItem = RBNCntxtMenuInsertControl(nContextMenuID, sControlName, "", "", ControlType_ContextMenuSeparator, RBN_ELEMENT_INSERT_AS_LAST)
	Else
		RBNCntxtMenuAddMenuItem = RBNCntxtMenuInsertControl(nContextMenuID, sControlName, sCaption, sKeytip, ControlType_ContextMenuItem, RBN_ELEMENT_INSERT_AS_LAST)
	End If
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNCntxtMenuAddMenuItem")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNCntxtMenuInsertMenuItem(	  ByVal nContextMenuID As Integer
								, ByVal sControlName As String
								, ByVal sCaption As String		'If "(-" then a separator is added
								, ByVal sKeytip As String
								, ByVal nPosition As Integer
								) As Integer

OnError GoTo ErrorOccured

	If sCaption = "(-" Then
		RBNCntxtMenuInsertMenuItem = RBNCntxtMenuInsertControl(nContextMenuID, sControlName, "", "", ControlType_ContextMenuSeparator, nPosition)
	Else
		RBNCntxtMenuInsertMenuItem = RBNCntxtMenuInsertControl(nContextMenuID, sControlName, sCaption, sKeytip, ControlType_ContextMenuItem, nPosition)
	End If

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNCntxtMenuInsertMenuItem: " & sControlName & " at position " & nPosition)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNCntxtMenuInsertMenuItemAfter(	  ByVal nContextMenuID As Integer
									, ByVal sControlName As String
									, ByVal sCaption As String		'If "(-" then a separator is added
									, ByVal sKeytip As String
									, ByVal sNameAfter As String
									) As Integer

OnError GoTo ErrorOccured

	If sCaption = "(-" Then
		RBNCntxtMenuInsertMenuItemAfter = RBNCntxtMenuInsertControlAfter(nContextMenuID, sControlName, "", "", ControlType_ContextMenuSeparator, sNameAfter)
	Else
		RBNCntxtMenuInsertMenuItemAfter = RBNCntxtMenuInsertControlAfter(nContextMenuID, sControlName, sCaption, sKeytip, ControlType_ContextMenuItem, sNameAfter)
	End If

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNCntxtMenuInsertMenuItemAfter: " & sControlName & " after " & sNameAfter)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNCntxtMenuInsertMenuItemBefore(	  ByVal nContextMenuID As Integer
									, ByVal sControlName As String
									, ByVal sCaption As String		'If "(-" then a separator is added
									, ByVal sKeytip As String
									, ByVal sNameBefore As String
									) As Integer

OnError GoTo ErrorOccured

	If sCaption = "(-" Then
		RBNCntxtMenuInsertMenuItemBefore = RBNCntxtMenuInsertControlBefore(nContextMenuID, sControlName, "", "", ControlType_ContextMenuSeparator, sNameBefore)
	Else
		RBNCntxtMenuInsertMenuItemBefore = RBNCntxtMenuInsertControlBefore(nContextMenuID, sControlName, sCaption, sKeytip, ControlType_ContextMenuItem, sNameBefore)
	End If
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNCntxtMenuInsertMenuItemBefore: " & sControlName & " before " & sNameBefore)
	Call ERRShow()

End Function


'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNCntxtMenuRemoveControl(	  ByVal nContextMenuID As Integer
								, ByVal sControlName As String
								) As Integer					'Returns the modular Idx of the control or 0, if it wasn't created

Dim	nControlItem, nCtrl as Integer,
	rbnCntxtMenu As This,
	rbnCntxtMenuItemsColl As This

OnError GoTo ErrorOccured

RBNCntxtMenuRemoveControl = 0

	Call RBNInitiate
	rbnCntxtMenu 			= ICntxtMnusGetCntxtMnu(theContextMenus, nContextMenuID)
	rbnCntxtMenuItemsColl	= GetICntxtMnuCtrls(rbnCntxtMenu)

	nControlItem = RBNCollectionGetControlIndexThs(rbnCntxtMenuItemsColl, sControlName)
	If nControlItem > RBN_ELEMENT_NOT_FOUND Then
		Call MICtrlCollRemoveAt(rbnCntxtMenuItemsColl, nControlItem)
		nCtrl 					= RBNRemoveElement("CONTEXTMENU=" & Str$(nContextMenuID), "", "", "", sControlName)
		RBNCntxtMenuRemoveControl	= nCtrl
	Else
		Call DEBUGPrint("RBNCntxtMenuRemoveControl: Menu Item not found: " & sControlName)
	End If

	RBNCntxtMenuRemoveControl = nCtrl

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnCntxtMenuItemsColl	= NULL_PTR
'	rbnCntxtMenu			= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNCntxtMenuRemoveControl")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Sub RBNCntxtMenuRemoveControlItem(	  ByVal nContextMenuID As Integer
							, ByVal nControlItem As Integer	'Standard MapBasic indexed, 1 is the first control
							)

Dim	rbnCntxtMenu As This,
	rbnCntxtMenuItemsColl As This,
	nNumControls As Integer

OnError GoTo ErrorOccured

	Call RBNInitiate
	rbnCntxtMenu 			= ICntxtMnusGetCntxtMnu(theContextMenus, nContextMenuID)
	rbnCntxtMenuItemsColl	= GetICntxtMnuCtrls(rbnCntxtMenu)

	nNumControls	= GetMICtrlCollCount(rbnCntxtMenuItemsColl)
	If nControlItem = RBN_ELEMENT_REMOVE_LAST Then
		nControlItem = nNumControls
	End If

	If nControlItem > 0 And nControlItem <= nNumControls Then
'		Print "RBNCntxtMenuRemoveControlItem: Removing Item " & (nControlItem - 1)
		Call MICtrlCollRemoveAt(rbnCntxtMenuItemsColl, (nControlItem - 1))
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnCntxtMenuItemsColl	= NULL_PTR
'	rbnCntxtMenu			= NULL_PTR

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNCntxtMenuRemoveControlItem: " & nControlItem)
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'**********************************************************************************************''
Sub RBNCntxtMenuClear(	  ByVal nContextMenuID As Integer
					)

Dim	rbnCntxtMenu As This,
	rbnCntxtMenuItemsColl As This

OnError GoTo ErrorOccured

	Call RBNInitiate
	rbnCntxtMenu 			= ICntxtMnusGetCntxtMnu(theContextMenus, nContextMenuID)
	rbnCntxtMenuItemsColl	= GetICntxtMnuCtrls(rbnCntxtMenu)

	'*Clear the controls collection
	Call MICtrlCollClear(rbnCntxtMenuItemsColl)

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnCntxtMenuItemsColl	= NULL_PTR
'	rbnCntxtMenu			= NULL_PTR

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNCntxtMenuClear")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNCntxtMenuCount(	  ByVal nContextMenuID As Integer
						) As Integer					'Returns the number of controls in the context menu.

Dim	rbnCntxtMenu As This,
	rbnCntxtMenuItemsColl As This

OnError GoTo ErrorOccured

RBNCntxtMenuCount = 0

	Call RBNInitiate
	rbnCntxtMenu 			= ICntxtMnusGetCntxtMnu(theContextMenus, nContextMenuID)
	rbnCntxtMenuItemsColl	= GetICntxtMnuCtrls(rbnCntxtMenu)

	RBNCntxtMenuCount = GetMICtrlCollCount(rbnCntxtMenuItemsColl)

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnCntxtMenuItemsColl	= NULL_PTR
'	rbnCntxtMenu			= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNCntxtMenuCount")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNCntxtMenuGetControlIndex(	  ByVal nContextMenuID As Integer
								, ByVal sControlName As String
								) As Integer

Dim	rbnCntxtMenu As This,
	rbnCntxtMenuItemsColl As This

OnError GoTo ErrorOccured

RBNCntxtMenuGetControlIndex = 0

	Call RBNInitiate
	rbnCntxtMenu 				= ICntxtMnusGetCntxtMnu(theContextMenus, nContextMenuID)
	rbnCntxtMenuItemsColl		= GetICntxtMnuCtrls(rbnCntxtMenu)

	RBNCntxtMenuGetControlIndex = RBNCollectionGetControlIndexThs(rbnCntxtMenuItemsColl, sControlName)

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNCntxtMenuGetControlIndex")
	Call ERRShow()

End Function

'*******************************************************************************************************
'** WORKING WITH QAT - QUICK ACCESS TOOLBAR  **********************************************
'*******************************************************************************************************
'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Sub RBNQATSetVisibility(	  ByVal bVisible As Logical)

OnError GoTo ErrorOccured

	Call RBNInitiate

	Call SetQATVisible(theQAT, bVisible)

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNQATSetVisibility")
	Call ERRShow()

End Sub
'**********************************************************************************************''
Function RBNQATGetVisibility() As Logical

OnError GoTo ErrorOccured

	Call RBNInitiate

	RBNQATGetVisibility = GetQATVisible(theQAT)

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNQATGetVisibility")
	Call ERRShow()

End Function

'*******************************************************************************************************
'** WORKING WITH QAT - QUICK ACCESS TOOLBAR  **********************************************
'*******************************************************************************************************
'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Based on procedure created by David Wilson, Buchanan Computing
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Sub RBNMapMTBSetVisibility(	  ByVal bVisible As Logical)

OnError GoTo ErrorOccured

	Call RBNInitiate

	Call SetIMapMiniToolBarVisible(theMapMTB, bVisible)

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNMapMTBSetVisibility")
	Call ERRShow()

End Sub
'**********************************************************************************************''
Function RBNMapMTBGetVisibility() As Logical

OnError GoTo ErrorOccured

	Call RBNInitiate

	RBNMapMTBGetVisibility = GetIMapMiniToolBarVisible(theMapMTB)

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNQATGetVisibility")
	Call ERRShow()

End Function

'** WORKING WITH MapMTB - Map Mini Toolbar ***************************************************


'*******************************************************************************************************
'** WORKING WITH STACKPANELS ON MINI MAP TOOLBAR **********************************************
'*******************************************************************************************************
'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNMapMTBNumStackPanels() As Integer

Dim	i, nNumCntrls, nNumStackPanels, nCntrlType As Integer,
	sName, sCaption As String,
	rbnControlItem As This

OnError GoTo ErrorOccured

	Call RBNInitiate

	nNumCntrls = GetMICtrlCollCount(theMapMTBControlsColl)
'	Call DEBUGPrint("   Map MiniToolBar: Number of Controls " & nNumCntrls)
	For i = 0 To (nNumCntrls - 1)
		rbnControlItem	= GetMICtrlCollItemInt(theMapMTBControlsColl, i)

'		sName		= GetMICtrlName(rbnControlItem)
		nCntrlType	= GetMICtrlCtrlType(rbnControlItem)
'		sCaption		= GetMICtrlCaption(rbnControlItem)
'		Call DEBUGPrint("      MiniToolBar Control " & i & " is named '" & sName & "' but shown as '" & sCaption & "' and Control Type is " & nCntrlType & " (" & RBNControlGetTypeName(nCntrlType) & ")")

		If nCntrlType = ControlType_StackPanel Then
			nNumStackPanels = nNumStackPanels + 1
		End If
	Next

	RBNMapMTBNumStackPanels = nNumStackPanels
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNMapMTBNumStackPanels")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNMapMTBAddStackPanel(	  ByVal sStackPanelName As String
							, ByVal sCaption As String
							) As Integer					'Returns the modular Idx of the StackPanel or 0, if it wasn't created

OnError GoTo ErrorOccured

	Call RBNInitiate

	RBNMapMTBAddStackPanel = RBNMapMTBAddControl(sStackPanelName, sCaption, "", ControlType_StackPanel)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNMapMTBAddStackPanel")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNMapMTBInsertStackPanelAfter(  ByVal sStackPanelName As String
								, ByVal sCaption As String
								, ByVal sNameAfter As String
								) As Logical

OnError GoTo ErrorOccured

	Call RBNInitiate

	RBNMapMTBInsertStackPanelAfter = RBNMapMTBInsertControlAfter(sStackPanelName, sCaption, "", ControlType_StackPanel, sNameAfter)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNMapMTBInsertStackPanelAfter")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNMapMTBInsertStackPanelBefore( ByVal sStackPanelName As String
								, ByVal sCaption As String
								, ByVal sNameBefore As String
								) As Logical

OnError GoTo ErrorOccured

	Call RBNInitiate

	RBNMapMTBInsertStackPanelBefore = RBNMapMTBInsertControlBefore(sStackPanelName, sCaption, "", ControlType_StackPanel, sNameBefore)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNMapMTBInsertStackPanelBefore")
	Call ERRShow()

End Function


'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNMapMTBStackPanelRemove(	  ByVal sStackPanelName As String
								) As Integer

OnError GoTo ErrorOccured

	Call RBNInitiate

	RBNMapMTBStackPanelRemove = RBNMapMTBRemoveControl(sStackPanelName)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNMapMTBStackPanelRemove")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNMapMTBGetStackPanel(	 ByVal sStackPanelName As String
							, rbnsStackPanelFound As RefPtr
							) As Logical

Dim	nIndex As Integer

OnError GoTo ErrorOccured

RBNMapMTBGetStackPanel = FALSE

	Call RBNInitiate

	nIndex	= RBNMapMTBGetStackPanelIndex(sStackPanelName)
	If nIndex > RBN_ELEMENT_NOT_FOUND Then
		rbnsStackPanelFound	= GetMICtrlCollItemInt(theMapMTBControlsColl, nIndex)
		RBNMapMTBGetStackPanel = TRUE
	End If

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNMapMTBGetStackPanel")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNMapMTBGetStackPanelIndex(	  ByVal sStackPanelName As String
								) As Integer

Dim	i, nNumCntrls, nCntrlType As Integer,
	sName, sCaption As String,
	rbnControlItem As This

OnError GoTo ErrorOccured

RBNMapMTBGetStackPanelIndex	= RBN_ELEMENT_NOT_FOUND

	Call RBNInitiate

	nNumCntrls = GetMICtrlCollCount(theMapMTBControlsColl)
'	Call DEBUGPrint("   Map MiniToolBar: Number of Controls " & nNumCntrls)
	For i = 0 To (nNumCntrls - 1)
		rbnControlItem	= GetMICtrlCollItemInt(theMapMTBControlsColl, i)

		sName		= GetMICtrlName(rbnControlItem)
		nCntrlType	= GetMICtrlCtrlType(rbnControlItem)
'		sCaption		= GetMICtrlCaption(rbnControlItem)
'		Call DEBUGPrint("      MiniToolBar Control " & i & " is named '" & sName & "' but shown as '" & sCaption & "' and Control Type is " & nCntrlType & " (" & RBNControlGetTypeName(nCntrlType) & ")")

		If nCntrlType = ControlType_StackPanel Then
			If sStackPanelName = sName Then
				RBNMapMTBGetStackPanelIndex = i
			End If
		End If
	Next

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNMapMTBGetStackPanelIndex")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNMapMTBStackPanelExists(	  ByVal sStackPanelName As String
								) As Logical

OnError GoTo ErrorOccured

	Call RBNInitiate

	RBNMapMTBStackPanelExists = (RBNMapMTBGetStackPanelIndex(sStackPanelName) > RBN_ELEMENT_NOT_FOUND)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNMapMTBStackPanelExists")
	Call ERRShow()

End Function

'*******************************************************************************************************
'** WORKING WITH CONTROLS AND BUTTONS ON MINI MAP TOOLBAR **********************************************
'*******************************************************************************************************

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNMapMTBAddControl(	  ByVal sControlName As String
						, ByVal sCaption As String
						, ByVal sKeytip As String
						, ByVal nControlType As Integer
						) As Integer					'Returns the modular Idx of the control or 0, if it wasn't created

Dim	nCtrl as Integer

OnError GoTo ErrorOccured

RBNMapMTBAddControl = 0

	Call RBNInitiate

	nCtrl 					= RBNAddElement("MapMiniToolbar", "", "", "", sControlName, nControlType, 0)
	marrParentControlColls(nCtrl)	= theMapMTBControlsColl
	marrControls(nCtrl) 		= MICtrlCollAddStrStrInt(marrParentControlColls(nCtrl), sControlName, sCaption, nControlType)
'	marrControls(nCtrl) 		= MICtrlCollAddStrStrInt(theMapMTBControlsColl, sControlName, sCaption, nControlType)

	If sKeytip <> "" Then
		'Set the KeyTip for the Control. KeyTip: The keyboard shortcut for the Control.
		'A KeyTip must have from 1 to 3 uppercase characters.
		Call SetMICtrlKeyTip(marrControls(nCtrl), sKeytip)
	End If

	RBNMapMTBAddControl = nCtrl

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNMapMTBAddControl")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNMapMTBInsertControl(	  ByVal sControlName As String
							, ByVal sCaption As String
							, ByVal sKeytip As String
							, ByVal nControlType As Integer
							, ByVal nPosition As Integer
							) As Integer

Dim	nCtrl As Integer

OnError GoTo ErrorOccured

RBNMapMTBInsertControl = 0

	Call RBNInitiate

	nCtrl 					= RBNAddElement("MapMiniToolbar", "", "", "", sControlName, nControlType, 0)
	marrParentControlColls(nCtrl)	= theMapMTBControlsColl
	marrControls(nCtrl) 		= MICtrlCollInsertIntStrStrInt(marrParentControlColls(nCtrl), nPosition, sControlName, sCaption, nControlType)
'	marrControls(nCtrl) 		= MICtrlCollInsertIntStrStrInt(theMapMTBControlsColl, nPosition, sControlName, sCaption, nControlType)

	If sKeytip <> "" Then
		'Set the KeyTip for the Control. KeyTip: The keyboard shortcut for the Control.
		'A KeyTip must have from 1 to 3 uppercase characters.
		Call SetMICtrlKeyTip(marrControls(nCtrl), sKeytip)
	End If

	RBNMapMTBInsertControl = nCtrl

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNMapMTBInsertControl: " & sControlName & " at position " & nPosition)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNMapMTBInsertControlAfter(	  ByVal sControlName As String
								, ByVal sCaption As String
								, ByVal sKeytip As String
								, ByVal nControlType As Integer
								, ByVal sNameAfter As String
								) As Integer

Dim	nPosition As Integer

OnError GoTo ErrorOccured

RBNMapMTBInsertControlAfter = 0

	nPosition = RBNMapMTBGetControlIndex(sNameAfter)
	If nPosition = 0 Then
		RBNMapMTBInsertControlAfter 	= RBNMapMTBAddControl(sControlName, sCaption, sKeytip, nControlType)
	Else
		nPosition					= nPosition + 1
		RBNMapMTBInsertControlAfter 	= RBNMapMTBInsertControl(sControlName, sCaption, sKeytip, nControlType, nPosition)
	End If

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNMapMTBInsertControlAfter: " & sControlName & " after " & sNameAfter)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNMapMTBInsertControlBefore(	  ByVal sControlName As String
								, ByVal sCaption As String
								, ByVal sKeytip As String
								, ByVal nControlType As Integer
								, ByVal sNameBefore As String
								) As Integer

Dim	nPosition As Integer

OnError GoTo ErrorOccured

RBNMapMTBInsertControlBefore = 0

	nPosition = RBNMapMTBGetControlIndex(sNameBefore)
	If nPosition = 0 Then
		RBNMapMTBInsertControlBefore 	= RBNMapMTBAddControl(sControlName, sCaption, sKeytip, nControlType)
	Else
		RBNMapMTBInsertControlBefore 	= RBNMapMTBInsertControl(sControlName, sCaption, sKeytip, nControlType, nPosition)
	End If

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNMapMTBInsertControlBefore: " & sControlName & " before " & sNameBefore)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNMapMTBRemoveControl(  ByVal sControlName As String
							) As Integer

Dim	nControlItem, nCtrl as Integer

OnError GoTo ErrorOccured

RBNMapMTBRemoveControl = 0

	Call RBNInitiate

	nControlItem = RBNMapMTBGetControlIndex(sControlName)
	If nControlItem > RBN_ELEMENT_NOT_FOUND Then
		Call MICtrlCollRemoveAt(theMapMTBControlsColl, nControlItem)
		nCtrl 				= RBNRemoveElement("MapMiniToolbar", "", "", "", sControlName)
		RBNMapMTBRemoveControl	= nCtrl
	Else
		Call DEBUGPrint("RBNMapMTBRemoveControl: Menu Item not found: " & sControlName)
	End If

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNMapMTBRemoveControl")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNMapMTBAddButton(	  ByVal sControlName As String
						, ByVal sCaption As String
						, ByVal sKeytip As String
						) As Integer					'Returns the modular Idx of the control or 0, if it wasn't created

OnError GoTo ErrorOccured

	RBNMapMTBAddButton = RBNMapMTBAddControl(sControlName, sCaption, sKeytip, ControlType_Button)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNMapMTBAddButton")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNMapMTBGetControlIndex(	  ByVal sControlName As String
							) As Integer

OnError GoTo ErrorOccured

RBNMapMTBGetControlIndex = 0

	Call RBNInitiate

	RBNMapMTBGetControlIndex = RBNCollectionGetControlIndexThs(theMapMTBControlsColl, sControlName)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNMapMTBGetControlIndex")
	Call ERRShow()

End Function

'*******************************************************************************************************
'** WORKING WITH CONTROLS ON STACKPANEL ON MINI MAP TOOLBAR ********************************************
'*******************************************************************************************************

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNMapMTBStackPanelAddControl(	  ByVal sControlName As String
								, ByVal sCaption As String
								, ByVal sKeytip As String
								, ByVal nControlType As Integer
								, ByVal sStackPanelName As string
								) As Integer					'Returns the modular Idx of the control or 0, if it wasn't created

Dim	nCtrl As Integer,
	rbnsStackPanelFound As RefPtr,
	rbnsStackPanel As This,
	stackPanelColl As This

OnError GoTo ErrorOccured

	If RBNMapMTBGetStackPanel(sStackPanelName, rbnsStackPanelFound) > RBN_ELEMENT_NOT_FOUND Then
		rbnsStackPanel	= rbnsStackPanelFound

		nCtrl 					= RBNAddElement("MapMiniToolbar", sStackPanelName, "", "", sControlName, nControlType, 0)

		marrParentControlColls(nCtrl)	= GetIStackPanelCtrls(rbnsStackPanel)
'		stackPanelColl	= GetIStackPanelCtrls(rbnsStackPanel)

		marrControls(nCtrl) 		= MICtrlCollAddStrStrInt(marrParentControlColls(nCtrl), sControlName, sCaption, nControlType)
'		marrControls(nCtrl) 		= MICtrlCollAddStrStrInt(stackPanelColl, sControlName, sCaption, nControlType)

		If sKeytip <> "" Then
			'Set the KeyTip for the Control. KeyTip: The keyboard shortcut for the Control.
			'A KeyTip must have from 1 to 3 uppercase characters.
			Call SetMICtrlKeyTip(marrControls(nCtrl), sKeytip)
		End If
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnsStackPanelFound	= NULL_PTR
	rbnsStackPanel		= NULL_PTR
	stackPanelColl		= NULL_PTR

	RBNMapMTBStackPanelAddControl = nCtrl

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNMapMTBStackPanelAddControl")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNMapMTBStackPanelRemoveControl(	  ByVal sControlName As String
									, ByVal sStackPanelName As string
									) As Integer

Dim	nCtrl, nControlItem As Integer,
	rbnsStackPanelFound As RefPtr,
	rbnsStackPanel As This,
	stackPanelColl As This

OnError GoTo ErrorOccured

RBNMapMTBStackPanelRemoveControl = 0

	If RBNMapMTBGetStackPanel(sStackPanelName, rbnsStackPanelFound) > RBN_ELEMENT_NOT_FOUND Then
		rbnsStackPanel	= rbnsStackPanelFound

		stackPanelColl	= GetIStackPanelCtrls(rbnsStackPanel)

		nControlItem = RBNCollectionGetControlIndexThs(stackPanelColl, sControlName)
		If nControlItem > RBN_ELEMENT_NOT_FOUND Then
			Call MICtrlCollRemoveAt(stackPanelColl, nControlItem)
			nCtrl 				= RBNRemoveElement("MapMiniToolbar", "", "", "", sControlName)
			RBNMapMTBStackPanelRemoveControl	= nCtrl
		Else
			Call DEBUGPrint("RBNMapMTBStackPanelRemoveControl: Item not found: " & sControlName)
		End If
	Else
		Call DEBUGPrint("RBNMapMTBStackPanelRemoveControl: StackPanel not found: " & sStackPanelName)
	End If

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNMapMTBStackPanelRemoveControl")
	Call ERRShow()

End Function

'*******************************************************************************************************
'** WORKING WITH CONTROLS ******************************************************************************
'*******************************************************************************************************
'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNToolTipSetShowHelpText(ByVal bValue As Logical)

OnError GoTo ErrorOccured

	mbToolTipShowHelpText = bValue
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNToolTipThsSetShowHelpText")
	Call ERRShow()

End Sub
'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNToolTipSetPlacement(ByVal nValue As Integer)

OnError GoTo ErrorOccured

	mnTooltipPlacement = nValue
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNToolTipThsSetShowHelpText")
	Call ERRShow()

End Sub



'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSetToolTipThs(	  rbnControl As This
						, ByVal sDescription As String
						, ByVal sText As String
						, ByVal sDisabledText As String
						)

Dim	rbnControlToolTip As This

OnError GoTo ErrorOccured

	If sDescription = "" Then
		sDescription = sText
	End If
'	If sDisabledText = "" Then
'		sDisabledText = sText
'	End If

	'Create & Set the button tooltip
	rbnControlToolTip = New_MapInfoRibbonToolTip()
	Call SetMIRbnToolTipToolTipText (rbnControlToolTip, sText)
	Call SetMIRbnToolTipToolTipDescription (rbnControlToolTip, sDescription)
	Call SetMIRbnToolTipToolTipDisabledText (rbnControlToolTip, sDisabledText)
	Call SetMIRbnToolTipShowHelpText (rbnControlToolTip, mbToolTipShowHelpText)

'	If SystemInfo(SYS_INFO_MIFULLVERSION) >= 1520 Then
'		If SystemInfo(SYS_INFO_MIFULLVERSION) < 1601 Then
			Call SetMIRbnToolTipPlacement (rbnControlToolTip, Place_MousePoint)
'		End If
'	End If

	Do Case GetMICtrlCtrlType(rbnControl)
		Case ControlType_Button
			Call SetMICtrlToolTip(rbnControl, rbnControlToolTip)

		Case ControlType_ToolButton
			Call SetMICtrlToolTip(rbnControl, rbnControlToolTip)

		Case ControlType_RibbonMenuItem
			Call SetRbnMenuItemCtrlToolTip(rbnControl, rbnControlToolTip)

		Case ControlType_RibbonButtonPanel
			Call SetRbnBtnPnlToolTip(rbnControl, rbnControlToolTip)

'		Case ControlType_RibbonSeparator

		Case ControlType_ContextMenuItem
			Call SetICntxtMnuMenuItemToolTip(rbnControl, rbnControlToolTip)

'		Case ControlType_ContextMenuSeparator
'		Case ControlType_MenuItemSeparator

		Case ControlType_DropDownButton
			Call SetRbnDropDownCtrlToolTip(rbnControl, rbnControlToolTip)

		Case ControlType_SplitButton
			Call SetRbnSplitCtrlToolTip(rbnControl, rbnControlToolTip)

'		Case ControlType_DropDownMenuGroup

		Case ControlType_GalleryControl
			Call SetRbnGalleryCtrlToolTip(rbnControl, rbnControlToolTip)

		Case ControlType_GalleryItem
			Call SetRbnGalleryItemToolTip(rbnControl, rbnControlToolTip)

		Case ControlType_GalleryGroup
			Call SetRbnGalleryGrpToolTip(rbnControl, rbnControlToolTip)

'		Case ControlType_CustomControl
'		Case ControlType_TextBlock
'		Case ControlType_Image
'		Case ControlType_BackStageTabItem

		Case ControlType_BackStageButton
			Call SetIBackStageBtnToolTip(rbnControl, rbnControlToolTip)

		Case ControlType_BackStageTabSection
			Call SetIBackStageTabItemToolTip(rbnControl, rbnControlToolTip)

'		Case ControlType_BackStageSeparator

		Case ControlType_StackPanel, ControlType_WrapPanel
			Call SetIStackPanelToolTip(rbnControl, rbnControlToolTip)


'		Case
'			Call SetRbnItemToolTip(rbnControl, rbnControlToolTip)
'		Case
'			Call SetIMapMTBToolTip(rbnControl, rbnControlToolTip)
'		Case
'			Call SetRbnToolBtnCtrlToolTip(rbnControl, rbnControlToolTip)
'		Case
'			Call SetIBackStageOptionTabToolTip(rbnControl, rbnControlToolTip)
'		Case
'			Call SetRbnBtnCtrlToolTip(rbnControl, rbnControlToolTip)
	End Case

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnControlToolTip = NULL_PTR

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSetToolTipThs: ToolTips Text: " & sText)
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSetToolTipIdx(	  ByVal nElementIdx As Integer
						, ByVal sDescription As String
						, ByVal sText As String
						, ByVal sDisabledText As String)

OnError GoTo ErrorOccured

	Call RBNControlSetToolTipThs(marrControls(nElementIdx), sDescription, sText, sDisabledText)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSetToolTipIdx")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSetKeyGestureThs( rbnControl As This
						, ByVal sGesture As String		'For example "Ctrl+Y", "Alt+Ctrl+Y"
						)

OnError GoTo ErrorOccured

	Do Case GetMICtrlCtrlType(rbnControl)
		Case ControlType_Button
			Call SetRbnBtnCtrlKeyGesture(rbnControl, sGesture)

		Case ControlType_ToolButton
			Call SetRbnToolBtnCtrlKeyGesture(rbnControl, sGesture)

		Case ControlType_RibbonMenuItem
			Call SetRbnMenuItemCtrlKeyGesture(rbnControl, sGesture)

'		Case ControlType_RibbonButtonPanel
'		Case ControlType_RibbonSeparator

		Case ControlType_ContextMenuItem
			Call SetICntxtMnuMenuItemKeyGesture(rbnControl, sGesture)

'		Case ControlType_ContextMenuSeparator
'		Case ControlType_MenuItemSeparator
'		Case ControlType_DropDownButton

		Case ControlType_SplitButton
			Call SetRbnSplitCtrlKeyGesture(rbnControl, sGesture)

'		Case ControlType_DropDownMenuGroup
'		Case ControlType_GalleryControl

		Case ControlType_GalleryItem
			Call SetRbnGalleryItemKeyGesture(rbnControl, sGesture)

'		Case ControlType_GalleryGroup
'		Case ControlType_CustomControl
'		Case ControlType_TextBlock
'		Case ControlType_Image
'		Case ControlType_BackStageTabItem

		Case ControlType_BackStageButton
			Call SetIBackStageBtnKeyGesture(rbnControl, sGesture)
'		Case ControlType_BackStageTabSection
'		Case ControlType_BackStageSeparator
'		Case ControlType_StackPanel, ControlType_WrapPanel
	End Case

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSetKeyGestureThs: Gesture: " & sGesture)
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSetKeyGestureIdx(	  ByVal nElementIdx As Integer
							, ByVal sGesture As String		'For example "Ctrl+Y", "Alt+Ctrl+Y"
							)

OnError GoTo ErrorOccured

	Call RBNControlSetKeyGestureThs(marrControls(nElementIdx), sGesture)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSetKeyGestureIdx")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSetCaptionThs(	  rbnControl As This
						, ByVal sCaption As String		'The Caption to to be seen in the Ribbon
						)

OnError GoTo ErrorOccured

	Do Case GetMICtrlCtrlType(rbnControl)
		Case ControlType_Button
			Call SetRbnBtnCtrlCaption(rbnControl, sCaption)

		Case ControlType_ToolButton
			Call SetRbnToolBtnCtrlCaption(rbnControl, sCaption)

		Case ControlType_RibbonMenuItem
			Call SetRbnMenuItemCtrlCaption(rbnControl, sCaption)

'		Case ControlType_RibbonButtonPanel
'		Case ControlType_RibbonSeparator

		Case ControlType_ContextMenuItem
			Call SetICntxtMnuMenuItemCaption(rbnControl, sCaption)

'		Case ControlType_ContextMenuSeparator
'		Case ControlType_MenuItemSeparator

		Case ControlType_DropDownButton
			Call SetRbnDropDownCtrlCaption(rbnControl, sCaption)

		Case ControlType_SplitButton
			Call SetRbnSplitCtrlCaption(rbnControl, sCaption)

'		Case ControlType_DropDownMenuGroup

		Case ControlType_GalleryControl
			Call SetRbnGalleryCtrlCaption(rbnControl, sCaption)

		Case ControlType_GalleryItem
			Call SetRbnGalleryItemCaption(rbnControl, sCaption)

		Case ControlType_GalleryGroup
			Call SetRbnGalleryGrpCaption(rbnControl, sCaption)

		Case ControlType_CustomControl
			Call SetRbnCustomCtrlCaption(rbnControl, sCaption)

		Case ControlType_TextBlock
			Call SetITextBlockCaption(rbnControl, sCaption)

		Case ControlType_Image
			Call SetIImageCaption(rbnControl, sCaption)

'		Case ControlType_BackStageTabItem

		Case ControlType_BackStageButton
			Call SetIBackStageBtnCaption(rbnControl, sCaption)

'		Case ControlType_BackStageTabSection
'		Case ControlType_BackStageSeparator

		Case ControlType_StackPanel, ControlType_WrapPanel
			Call SetIStackPanelCaption(rbnControl, sCaption)

	End Case

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSetCaptionThs: Caption: " & sCaption)
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSetCaptionIdx(	  ByVal nElementIdx As Integer
						, ByVal sCaption As String		'The Caption to to be seen in the Ribbon
						)

OnError GoTo ErrorOccured

	Call RBNControlSetCaptionThs(marrControls(nElementIdx), sCaption)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSetCaptionIdx")
	Call ERRShow()

End Sub


'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Function RBNControlGetSizeThs(  rbnControl As This
						) As Integer

OnError GoTo ErrorOccured

	RBNControlGetSizeThs = CONTROL_SIZE_SMALL

	Do Case GetMICtrlCtrlType(rbnControl)
		Case ControlType_Button
			If GetRbnBtnCtrlIsExtraSmall(rbnControl) Then
				RBNControlGetSizeThs = CONTROL_SIZE_EXTRASMALL
			ElseIf GetRbnBtnCtrlIsLarge(rbnControl) Then
				RBNControlGetSizeThs = CONTROL_SIZE_LARGE
			End If

		Case ControlType_ToolButton
			If GetRbnToolBtnCtrlIsExtraSmall(rbnControl) Then
				RBNControlGetSizeThs = CONTROL_SIZE_EXTRASMALL
			ElseIf GetRbnToolBtnCtrlIsLarge(rbnControl) Then
				RBNControlGetSizeThs = CONTROL_SIZE_LARGE
			End If

		Case ControlType_RibbonMenuItem
'			If GetRbnMenuItemCtrlIsExtraSmall(rbnControl) Then
'				RBNControlGetSizeThs = CONTROL_SIZE_EXTRASMALL
			If GetRbnMenuItemCtrlIsLarge(rbnControl) Then
				RBNControlGetSizeThs = CONTROL_SIZE_LARGE
			End If

'		Case ControlType_RibbonButtonPanel
'		Case ControlType_RibbonSeparator
'		Case ControlType_ContextMenuItem
'		Case ControlType_ContextMenuSeparator
'		Case ControlType_MenuItemSeparator

		Case ControlType_DropDownButton
			If GetRbnDropDownCtrlIsExtraSmall(rbnControl) Then
				RBNControlGetSizeThs = CONTROL_SIZE_EXTRASMALL
			ElseIf GetRbnDropDownCtrlIsLarge(rbnControl) Then
				RBNControlGetSizeThs = CONTROL_SIZE_LARGE
			End If

		Case ControlType_SplitButton
			If GetRbnSplitCtrlIsExtraSmall(rbnControl) Then
				RBNControlGetSizeThs = CONTROL_SIZE_EXTRASMALL
			ElseIf GetRbnSplitCtrlIsLarge(rbnControl) Then
				RBNControlGetSizeThs = CONTROL_SIZE_LARGE
			End If

'		Case ControlType_DropDownMenuGroup

		Case ControlType_GalleryControl
			If GetRbnGalleryCtrlIsExtraSmall(rbnControl) Then
				RBNControlGetSizeThs = CONTROL_SIZE_EXTRASMALL
			ElseIf GetRbnGalleryCtrlIsLarge(rbnControl) Then
				RBNControlGetSizeThs = CONTROL_SIZE_LARGE
			End If

		Case ControlType_GalleryItem
			If GetRbnGalleryItemIsExtraSmall(rbnControl) Then
				RBNControlGetSizeThs = CONTROL_SIZE_EXTRASMALL
			ElseIf GetRbnGalleryItemIsLarge(rbnControl) Then
				RBNControlGetSizeThs = CONTROL_SIZE_LARGE
			End If

'		Case ControlType_GalleryGroup
'		Case ControlType_CustomControl
'		Case ControlType_TextBlock

		Case ControlType_Image
			If GetIImageCtrlIsExtraSmall(rbnControl) Then
				RBNControlGetSizeThs = CONTROL_SIZE_EXTRASMALL
			ElseIf GetIImageCtrlIsLarge(rbnControl) Then
				RBNControlGetSizeThs = CONTROL_SIZE_LARGE
			End If

'		Case ControlType_BackStageTabItem

		Case ControlType_BackStageButton
			If GetIBackStageBtnIsExtraSmall(rbnControl) Then
				RBNControlGetSizeThs = CONTROL_SIZE_EXTRASMALL
			ElseIf GetIBackStageBtnIsLarge(rbnControl) Then
				RBNControlGetSizeThs = CONTROL_SIZE_LARGE
			End If

'		Case ControlType_BackStageTabSection
'		Case ControlType_BackStageSeparator
'		Case ControlType_StackPanel, ControlType_WrapPanel

	End Case

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlGetSizeThs")
	Call ERRShow()

End Function


'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSetIconsThs( rbnControl As This
					, ByVal nSize As Integer
					, ByVal sSmallIcon As String
					, ByVal sLargeIcon As String
					)

OnError GoTo ErrorOccured

	If sSmallIcon = "" Then
		sSmallIcon = sLargeIcon
	End If
	If sLargeIcon = "" Then
		sLargeIcon = sSmallIcon
	End If

	Do Case GetMICtrlCtrlType(rbnControl)
		Case ControlType_Button
			'Set the button icon
			Call SetRbnBtnCtrlIsExtraSmall(rbnControl, (nSize = CONTROL_SIZE_EXTRASMALL))
			Call SetRbnBtnCtrlIsLarge(rbnControl, (nSize = CONTROL_SIZE_LARGE))
			Call SetRbnBtnCtrlLargeIcon(rbnControl, New_Uri(sLargeIcon, 0))
			Call SetRbnBtnCtrlSmallIcon(rbnControl, New_Uri(sSmallIcon, 0))

		Case ControlType_ToolButton
			'Set the button icon
			Call SetRbnToolBtnCtrlIsExtraSmall(rbnControl, (nSize = CONTROL_SIZE_EXTRASMALL))
			Call SetRbnToolBtnCtrlIsLarge(rbnControl, (nSize = CONTROL_SIZE_LARGE))
			Call SetRbnToolBtnCtrlLargeIcon(rbnControl, New_Uri(sLargeIcon, 0))
			Call SetRbnToolBtnCtrlSmallIcon(rbnControl, New_Uri(sSmallIcon, 0))

		Case ControlType_RibbonMenuItem
'			Call SetRbnMenuItemCtrlIsExtraSmall(rbnControl, (nSize = CONTROL_SIZE_EXTRASMALL))
'			Call SetRbnMenuItemCtrlIsLarge(rbnControl, (nSize = CONTROL_SIZE_LARGE))
'			Call SetRbnMenuItemCtrlLargeIcon(rbnControl, New_Uri(sLargeIcon, 0))
'			Call SetRbnMenuItemCtrlSmallIcon(rbnControl, New_Uri(sSmallIcon, 0))

'		Case ControlType_RibbonButtonPanel
'		Case ControlType_RibbonSeparator

		Case ControlType_ContextMenuItem
			'Set the menu item icon
			'Call SetICntxtMnuMenuItemIsExtraSmall(rbnControl, (nSize = CONTROL_SIZE_EXTRASMALL))	''Not supported ??
			'Call SetICntxtMnuMenuItemIsLarge(rbnControl, (nSize = CONTROL_SIZE_LARGE))			''Not supported ??
			Call SetICntxtMnuMenuItemLargeIcon(rbnControl, New_Uri(sLargeIcon, 0))
			Call SetICntxtMnuMenuItemSmallIcon(rbnControl, New_Uri(sSmallIcon, 0))

'		Case ControlType_ContextMenuSeparator
'		Case ControlType_MenuItemSeparator

		Case ControlType_DropDownButton
			Call SetRbnDropDownCtrlIsExtraSmall(rbnControl, (nSize = CONTROL_SIZE_EXTRASMALL))
			Call SetRbnDropDownCtrlIsLarge(rbnControl, (nSize = CONTROL_SIZE_LARGE))
			Call SetRbnDropDownCtrlLargeIcon(rbnControl, New_Uri(sLargeIcon, 0))
			Call SetRbnDropDownCtrlSmallIcon(rbnControl, New_Uri(sSmallIcon, 0))

		Case ControlType_SplitButton
			Call SetRbnSplitCtrlIsExtraSmall(rbnControl, (nSize = CONTROL_SIZE_EXTRASMALL))
			Call SetRbnSplitCtrlIsLarge(rbnControl, (nSize = CONTROL_SIZE_LARGE))
			Call SetRbnSplitCtrlLargeIcon(rbnControl, New_Uri(sLargeIcon, 0))
			Call SetRbnSplitCtrlSmallIcon(rbnControl, New_Uri(sSmallIcon, 0))

'		Case ControlType_DropDownMenuGroup

		Case ControlType_GalleryControl
			Call SetRbnGalleryCtrlIsExtraSmall(rbnControl, (nSize = CONTROL_SIZE_EXTRASMALL))
			Call SetRbnGalleryCtrlIsLarge(rbnControl, (nSize = CONTROL_SIZE_LARGE))
			Call SetRbnGalleryCtrlLargeIcon(rbnControl, New_Uri(sLargeIcon, 0))
			Call SetRbnGalleryCtrlSmallIcon(rbnControl, New_Uri(sSmallIcon, 0))

		Case ControlType_GalleryItem
			Call SetRbnGalleryItemIsExtraSmall(rbnControl, (nSize = CONTROL_SIZE_EXTRASMALL))
			Call SetRbnGalleryItemIsLarge(rbnControl, (nSize = CONTROL_SIZE_LARGE))
			Call SetRbnGalleryItemLargeIcon(rbnControl, New_Uri(sLargeIcon, 0))
			Call SetRbnGalleryItemSmallIcon(rbnControl, New_Uri(sSmallIcon, 0))

'		Case ControlType_GalleryGroup
'		Case ControlType_CustomControl
'		Case ControlType_TextBlock

		Case ControlType_Image
			Call SetIImageCtrlIsExtraSmall(rbnControl, (nSize = CONTROL_SIZE_EXTRASMALL))
			Call SetIImageCtrlIsLarge(rbnControl, (nSize = CONTROL_SIZE_LARGE))
			Call SetIImageCtrlLargeIcon(rbnControl, New_Uri(sLargeIcon, 0))
			Call SetIImageCtrlSmallIcon(rbnControl, New_Uri(sSmallIcon, 0))

'		Case ControlType_BackStageTabItem

		Case ControlType_BackStageButton
			Call SetIBackStageBtnIsExtraSmall(rbnControl, (nSize = CONTROL_SIZE_EXTRASMALL))
			Call SetIBackStageBtnIsLarge(rbnControl, (nSize = CONTROL_SIZE_LARGE))
			Call SetIBackStageBtnLargeIcon(rbnControl, New_Uri(sLargeIcon, 0))
			Call SetIBackStageBtnSmallIcon(rbnControl, New_Uri(sSmallIcon, 0))

'		Case ControlType_BackStageTabSection
'		Case ControlType_BackStageSeparator
'		Case ControlType_StackPanel, ControlType_WrapPanel

	End Case

	If mfDefaultLeftMarginInControls > 0 Then
		Call SetMICtrlLtMargin(rbnControl, mfDefaultLeftMarginInControls)
	End If

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSetIconsThs")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSetIconsIdx( ByVal nElementIdx As Integer
					, ByVal nSize As Integer
					, ByVal sSmallIcon As String
					, ByVal sLargeIcon As String)

OnError GoTo ErrorOccured

	Call RBNControlSetIconsThs(marrControls(nElementIdx), nSize, sSmallIcon, sLargeIcon)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSetIconsIdx")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSetDefaultLeftMargin(	ByVal fMargin As Float)

OnError GoTo ErrorOccured

	mfDefaultLeftMarginInControls	= fMargin
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSetDefaultLeftMargin")
	Call ERRShow()

End Sub

'		Case ControlType_Button
'		Case ControlType_ToolButton
'		Case ControlType_RibbonMenuItem
'		Case ControlType_RibbonButtonPanel
'		Case ControlType_RibbonSeparator
'		Case ControlType_ContextMenuItem
'		Case ControlType_ContextMenuSeparator
'		Case ControlType_MenuItemSeparator
'		Case ControlType_DropDownButton
'		Case ControlType_SplitButton
'		Case ControlType_DropDownMenuGroup
'		Case ControlType_GalleryControl
'		Case ControlType_GalleryItem
'		Case ControlType_GalleryGroup
'		Case ControlType_CustomControl
'		Case ControlType_TextBlock
'		Case ControlType_Image
'		Case ControlType_BackStageTabItem
'		Case ControlType_BackStageButton
'		Case ControlType_BackStageTabSection
'		Case ControlType_BackStageSeparator
'		Case ControlType_StackPanel, ControlType_WrapPanel
'		Case ControlType_CheckBox
'		Case ControlType_RadioButton
'		Case ControlType_WrapPanel

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSetLeftMarginThs( rbnControl As This
						, ByVal fMargin As Float
						)

OnError GoTo ErrorOccured

	Do Case GetMICtrlCtrlType(rbnControl)
		Case ControlType_Button
			Call SetMICtrlLtMargin(rbnControl, fMargin)

		Case ControlType_ToolButton
			Call SetRbnToolBtnCtrlLtMargin(rbnControl, fMargin)

		Case ControlType_RibbonMenuItem
			Call SetRbnMenuItemCtrlLtMargin(rbnControl, fMargin)

		Case ControlType_RibbonButtonPanel
			Call SetRbnBtnPnlLtMargin(rbnControl, fMargin)

'		Case ControlType_RibbonSeparator

		Case ControlType_ContextMenuItem
			Call SetICntxtMnuMenuItemLtMargin(rbnControl, fMargin)

'		Case ControlType_ContextMenuSeparator
'		Case ControlType_MenuItemSeparator

		Case ControlType_DropDownButton
			Call SetRbnDropDownCtrlLtMargin(rbnControl, fMargin)

		Case ControlType_SplitButton
			Call SetRbnSplitCtrlLtMargin(rbnControl, fMargin)

'		Case ControlType_DropDownMenuGroup

		Case ControlType_GalleryControl
			Call SetRbnGalleryCtrlLtMargin(rbnControl, fMargin)

		Case ControlType_GalleryItem
			Call SetRbnGalleryItemLtMargin(rbnControl, fMargin)

		Case ControlType_GalleryGroup
			Call SetRbnGalleryGrpLtMargin(rbnControl, fMargin)

'		Case ControlType_CustomControl

		Case ControlType_TextBlock
			Call SetITextBlockLtMargin(rbnControl, fMargin)

		Case ControlType_Image
			Call SetIImageLtMargin(rbnControl, fMargin)

		Case ControlType_BackStageTabItem
			Call SetIBackStageTabItemLtMargin(rbnControl, fMargin)

		Case ControlType_BackStageButton
			Call SetIBackStageBtnLtMargin(rbnControl, fMargin)

		Case ControlType_BackStageTabSection
			Call SetIBackStageTabItemLtMargin(rbnControl, fMargin)

'		Case ControlType_BackStageSeparator

		Case ControlType_StackPanel, ControlType_WrapPanel
			Call SetIStackPanelLtMargin(rbnControl, fMargin)

	End Case

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSetLeftMarginThs")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSetLeftMarginIdx(	  ByVal nElementIdx As Integer
							, ByVal fMargin As Float
							)

OnError GoTo ErrorOccured

	Call RBNControlSetLeftMarginThs(marrControls(nElementIdx), fMargin)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSetLeftMarginIdx")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSetCustomMBXHandlerThs(	  ByVal rbnControl As This
								, ByVal sMBXHandler As String
								)

Dim	nMaxLen As Integer

OnError GoTo ErrorOccured

	nMaxLen	= 31
	If Len(sMBXHandler) > nMaxLen Then
		Print "The name of you Mapbasic subprocedure/MBX Handler is longer than the allowed " & nMaxLen & " characters: '" & sMBXHandler & "'."
	End If

	Do Case GetMICtrlCtrlType(rbnControl)
		Case ControlType_Button
			Call SetRbnBtnCtrlCallingHandler(rbnControl, sMBXHandler)

		Case ControlType_ToolButton
			Call SetRbnToolBtnCtrlCallingHandler(rbnControl, sMBXHandler)

		Case ControlType_RibbonMenuItem
			Call SetRbnMenuItemCtrlCallingHandler(rbnControl, sMBXHandler)

'		Case ControlType_RibbonButtonPanel
		'Case ControlType_RibbonSeparator

		Case ControlType_ContextMenuItem
			Call SetICntxtMnuMenuItemCallingHandler(rbnControl, sMBXHandler)

		'Case ControlType_ContextMenuSeparator
		'Case ControlType_MenuItemSeparator
'		Case ControlType_DropDownButton

		Case ControlType_SplitButton
			Call SetRbnSplitCtrlCallingHandler(rbnControl, sMBXHandler)

'		Case ControlType_DropDownMenuGroup
'		Case ControlType_GalleryControl

		Case ControlType_GalleryItem
			Call SetRbnGalleryItemCallingHandler(rbnControl, sMBXHandler)

'		Case ControlType_GalleryGroup
'		Case ControlType_CustomControl
'		Case ControlType_TextBlock
'		Case ControlType_Image
'		Case ControlType_BackStageTabItem

		Case ControlType_BackStageButton
			Call SetIBackStageBtnCallingHandler(rbnControl, sMBXHandler)

'		Case ControlType_BackStageTabSection
'		Case ControlType_BackStageSeparator
'		Case ControlType_StackPanel, ControlType_WrapPanel
		Case ControlType_CheckBox
			Call SetICmdCtrlCallingHandler(rbnControl, sMBXHandler)
		Case ControlType_RadioButton
			Call SetICmdCtrlCallingHandler(rbnControl, sMBXHandler)
'		Case ControlType_WrapPanel
	End Case

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSetCustomMBXHandlerThs")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSetCustomMBXHandlerIdx(	  ByVal nElementIdx As Integer
								, ByVal sMBXHandler As String)
OnError GoTo ErrorOccured

	Call RBNControlSetCustomMBXHandlerThs(marrControls(nElementIdx), sMBXHandler)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSetCustomMBXHandlerIdx")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSetCmdIDThs(	  ByVal rbnControl As This
						, ByVal nCmdID As Integer)

OnError GoTo ErrorOccured

	Do Case GetMICtrlCtrlType(rbnControl)
		Case ControlType_Button
			Call SetRbnBtnCtrlCmdId(rbnControl, nCmdID)

		Case ControlType_ToolButton
			Call SetRbnToolBtnCtrlCmdId(rbnControl, nCmdID)

		Case ControlType_RibbonMenuItem
			Call SetRbnMenuItemCtrlCmdId(rbnControl, nCmdID)

'		Case ControlType_RibbonButtonPanel
		'Case ControlType_RibbonSeparator

		Case ControlType_ContextMenuItem
			Call SetICntxtMnuMenuItemCmdId(rbnControl, nCmdID)

		'Case ControlType_ContextMenuSeparator
		'Case ControlType_MenuItemSeparator
'		Case ControlType_DropDownButton

		Case ControlType_SplitButton
			Call SetRbnSplitCtrlCmdId(rbnControl, nCmdID)

'		Case ControlType_DropDownMenuGroup
'		Case ControlType_GalleryControl

		Case ControlType_GalleryItem
			Call SetRbnGalleryItemCmdId(rbnControl, nCmdID)

'		Case ControlType_GalleryGroup
'		Case ControlType_CustomControl
'		Case ControlType_TextBlock
'		Case ControlType_Image
'		Case ControlType_BackStageTabItem

		Case ControlType_BackStageButton
			Call SetIBackStageBtnCmdId(rbnControl, nCmdID)

'		Case ControlType_BackStageTabSection
'		Case ControlType_BackStageSeparator
'		Case ControlType_StackPanel, ControlType_WrapPanel
	End Case

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSetCmdIDThs")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSetCmdIDIdx(	  ByVal nElementIdx As Integer
						, ByVal nCmdID As Integer
						)

OnError GoTo ErrorOccured

	Call RBNControlSetCmdIDThs(marrControls(nElementIdx), nCmdID)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSetCmdIDIdx")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSetDrawModeThs(	  ByVal rbnControl As This
						, ByVal nDrawMode As Integer
						)
OnError GoTo ErrorOccured

	Do Case GetMICtrlCtrlType(rbnControl)
		Case ControlType_Button
			'Doesn't have a drawmode
			'Call SetRbnBtnCtrlCallingHandler(rbnControl, sMBXHandler)
		Case ControlType_ToolButton
			Call SetRbnToolBtnCtrlDrawMode(rbnControl, nDrawMode)
		Case ControlType_ContextMenuItem
			'Not supported
		'Case ...	'Potentially this needs to be extended with other control types
	End Case

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSetDrawModeThs")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSetDrawModeIdx(	  ByVal nElementIdx As Integer
						, ByVal nDrawMode As Integer)

OnError GoTo ErrorOccured

	Call RBNControlSetDrawModeThs(marrControls(nElementIdx), nDrawMode)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSetDrawModeIdx")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSetMICursorThs(	  ByVal rbnControl As This
						, ByVal nCursor As Integer
						, ByVal sFile As String
						)

OnError GoTo ErrorOccured

	Do Case GetMICtrlCtrlType(rbnControl)
		Case ControlType_Button
			'Doesn't have a drawmode
			'Call SetRbnBtnCtrlCallingHandler(rbnControl, sMBXHandler)
		Case ControlType_ToolButton
			If sFile = "" Then
				Call SetRbnToolBtnCtrlCursorId(rbnControl, nCursor)
			Else
'				<ID> FILE <FILENAME>
				Call SetRbnToolBtnCtrlCursor(rbnControl, Str$(nCursor) & " File " & sFile)
			End If

		Case ControlType_ContextMenuItem
			'Not supported
		'Case ...	'Potentially this needs to be extended with other control types
	End Case

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSetMICursorThs")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSetMICursorIdx(	  ByVal nElementIdx As Integer
						, ByVal nCursor As Integer
						, ByVal sFile As String
						)

OnError GoTo ErrorOccured

	Call RBNControlSetMICursorThs(marrControls(nElementIdx), nCursor, sFile)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSetMICursorIdx")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlEnableThs(	  ByVal rbnControl As This
					, ByVal bEnabled As Logical)

Dim	sType As String

OnError GoTo ErrorOccured

	Do Case GetMICtrlCtrlType(rbnControl)
		Case ControlType_Button
			Call SetRbnBtnCtrlEnabled(rbnControl, bEnabled)

		Case ControlType_ToolButton
			Call SetRbnToolBtnCtrlEnabled(rbnControl, bEnabled)

		Case ControlType_RibbonMenuItem
			Call SetRbnMenuItemCtrlEnabled(rbnControl, bEnabled)

'		Case ControlType_RibbonButtonPanel
'		Case ControlType_RibbonSeparator

		Case ControlType_ContextMenuItem
			Call SetICntxtMnuMenuItemEnabled(rbnControl, bEnabled)

'		Case ControlType_ContextMenuSeparator
'		Case ControlType_MenuItemSeparator

		Case ControlType_DropDownButton
			Call SetRbnDropDownCtrlEnabled(rbnControl, bEnabled)

		Case ControlType_SplitButton
			Call SetRbnSplitCtrlEnabled(rbnControl, bEnabled)

'		Case ControlType_DropDownMenuGroup
'		Case ControlType_GalleryControl

		Case ControlType_GalleryItem
			Call SetRbnGalleryItemEnabled(rbnControl, bEnabled)

'		Case ControlType_GalleryGroup
'		Case ControlType_CustomControl
'		Case ControlType_TextBlock
'		Case ControlType_Image
'		Case ControlType_BackStageTabItem

		Case ControlType_BackStageButton
			Call SetIBackStageBtnEnabled(rbnControl, bEnabled)

'		Case ControlType_BackStageTabSection
'		Case ControlType_BackStageSeparator
'		Case ControlType_StackPanel, ControlType_WrapPanel

	End Case
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlEnableThs")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlEnableIdx(	  ByVal nElementIdx As Integer
					, ByVal bEnabled As Logical)

OnError GoTo ErrorOccured

	Call RBNControlEnableThs(marrControls(nElementIdx), bEnabled)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlEnableIdx")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSetVisibilityThs(	  ByVal rbnControl As This
							, ByVal bVisible As Logical)

Dim	sType As String

OnError GoTo ErrorOccured

	Do Case GetMICtrlCtrlType(rbnControl)
		Case ControlType_Button
			Call SetRbnBtnCtrlVisible(rbnControl, bVisible)

		Case ControlType_ToolButton
			Call SetRbnToolBtnCtrlVisible(rbnControl, bVisible)

		Case ControlType_RibbonMenuItem
			Call SetRbnMenuItemCtrlVisible(rbnControl, bVisible)

		Case ControlType_RibbonButtonPanel
			Call SetRbnBtnPnlVisible(rbnControl, bVisible)

'		Case ControlType_RibbonSeparator

		Case ControlType_ContextMenuItem
			Call SetICntxtMnuMenuItemVisible(rbnControl, bVisible)

'		Case ControlType_ContextMenuSeparator
'		Case ControlType_MenuItemSeparator

		Case ControlType_DropDownButton
			Call SetRbnDropDownCtrlVisible(rbnControl, bVisible)

		Case ControlType_SplitButton
			Call SetRbnSplitCtrlVisible(rbnControl, bVisible)

'		Case ControlType_DropDownMenuGroup
'		Case ControlType_GalleryControl

		Case ControlType_GalleryItem
			Call SetRbnGalleryItemVisible(rbnControl, bVisible)

		Case ControlType_GalleryGroup
			Call SetRbnGalleryGrpVisible(rbnControl, bVisible)

		Case ControlType_CustomControl
			Call SetRbnGalleryCtrlVisible(rbnControl, bVisible)

		Case ControlType_TextBlock
			Call SetITextBlockVisible(rbnControl, bVisible)

		Case ControlType_Image
			Call SetIImageVisible(rbnControl, bVisible)

		Case ControlType_BackStageTabItem
			Call SetIBackStageTabItemVisible(rbnControl, bVisible)

		Case ControlType_BackStageButton
			Call SetIBackStageBtnVisible(rbnControl, bVisible)

'		Case ControlType_BackStageTabSection
'		Case ControlType_BackStageSeparator

		Case ControlType_StackPanel, ControlType_WrapPanel
			Call SetIStackPanelVisible(rbnControl, bVisible)

          Case ControlType_RibbonSeparator
                     call SetCtrlVisible(rbnControl, bVisible)

	End Case
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSetVisibilityThs")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSetVisibilityIdx(	  ByVal nElementIdx As Integer
							, ByVal bVisible As Logical
							)

OnError GoTo ErrorOccured

	Call RBNControlSetVisibilityThs(marrControls(nElementIdx), bVisible)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSetVisibilityIdx")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSetVisibility(	  ByVal sTabName As String
						, ByVal sGroupName As String
						, ByVal sControlName As String
						, ByVal bVisible As Logical
						)

Dim	rbnControl As This,
	rbnControlFound As RefPtr

OnError GoTo ErrorOccured

	Call RBNInitiate

	If RBNGroupGetControl(sTabName, sGroupName, sControlName, rbnControlFound) Then
		rbnControl = rbnControlFound
		Call RBNControlSetVisibilityThs(rbnControl, bVisible)
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnControl		= NULL_PTR
	rbnControlFound	= NULL_PTR

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSetVisibility")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSetOrientationThs(	  ByVal rbnControl As This
							, ByVal nOrientation As Integer
							)

OnError GoTo ErrorOccured

	Do Case GetMICtrlCtrlType(rbnControl)
'		Case ControlType_Button
'		Case ControlType_ToolButton
'		Case ControlType_RibbonMenuItem
'		Case ControlType_RibbonButtonPanel
'		Case ControlType_RibbonSeparator
'		Case ControlType_ContextMenuItem
'		Case ControlType_ContextMenuSeparator
'		Case ControlType_MenuItemSeparator
'		Case ControlType_DropDownButton
'		Case ControlType_SplitButton
'		Case ControlType_DropDownMenuGroup
'		Case ControlType_GalleryControl
		Case ControlType_GalleryItem
			CAll SetRbnGalleryItemOrientation(rbnControl, nOrientation)
'		Case ControlType_GalleryGroup
'		Case ControlType_CustomControl
'		Case ControlType_TextBlock
'		Case ControlType_Image
'		Case ControlType_BackStageTabItem
'		Case ControlType_BackStageButton
'		Case ControlType_BackStageTabSection
'		Case ControlType_BackStageSeparator
		Case ControlType_StackPanel, ControlType_WrapPanel
			Call SetIStackPanelOrientation(rbnControl, nOrientation)
	End Case

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSetOrientationThs")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSetOrientationIdx(	  ByVal nElementIdx As Integer
							, ByVal nOrientation As Integer
					)

OnError GoTo ErrorOccured

	Call RBNControlSetOrientationThs(marrControls(nElementIdx), nOrientation)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSetOrientationIdx")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSetWidthThs(	  ByVal rbnControl As This
						, ByVal fWidth As Float
						)

OnError GoTo ErrorOccured

	Do Case GetMICtrlCtrlType(rbnControl)
		Case ControlType_Button
			Call SetRbnBtnCtrlWidth(rbnControl, fWidth)
		Case ControlType_ToolButton
			Call SetRbnToolBtnCtrlWidth(rbnControl, fWidth)
		Case ControlType_RibbonMenuItem
			Call SetRbnMenuItemCtrlWidth(rbnControl, fWidth)
		Case ControlType_RibbonButtonPanel
			Call SetRbnBtnPnlWidth(rbnControl, fWidth)
'		Case ControlType_RibbonSeparator
		Case ControlType_ContextMenuItem
			Call SetICntxtMnuMenuItemWidth(rbnControl, fWidth)
'		Case ControlType_ContextMenuSeparator
'		Case ControlType_MenuItemSeparator
		Case ControlType_DropDownButton
			Call SetRbnDropDownCtrlWidth(rbnControl, fWidth)
		Case ControlType_SplitButton
			Call SetRbnSplitCtrlWidth(rbnControl, fWidth)
'		Case ControlType_DropDownMenuGroup
		Case ControlType_GalleryControl
			Call SetRbnGalleryCtrlWidth(rbnControl, fWidth)
		Case ControlType_GalleryItem
			Call SetRbnGalleryItemWidth(rbnControl, fWidth)
		Case ControlType_GalleryGroup
			Call SetRbnGalleryGrpWidth(rbnControl, fWidth)
		Case ControlType_CustomControl
			Call SetRbnCustomCtrlWidth(rbnControl, fWidth)
		Case ControlType_TextBlock
			Call SetITextBlockWidth(rbnControl, fWidth)
		Case ControlType_Image
			Call SetIImageWidth(rbnControl, fWidth)
		Case ControlType_BackStageTabItem
			Call SetIBackStageTabItemWidth(rbnControl, fWidth)
		Case ControlType_BackStageButton
			Call SetIBackStageBtnWidth(rbnControl, fWidth)
'		Case ControlType_BackStageTabSection
'		Case ControlType_BackStageSeparator
		Case ControlType_StackPanel, ControlType_WrapPanel
			Call SetIStackPanelWidth(rbnControl, fWidth)
	End Case

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSetWidthThs")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSetWidthIdx( ByVal nElementIdx As Integer
					, ByVal fWidth As Float
					)

OnError GoTo ErrorOccured

	Call RBNControlSetWidthThs(marrControls(nElementIdx), fWidth)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSetWidthIdx")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSetHeightThs(	  ByVal rbnControl As This
						, ByVal fHeight As Float
						)

OnError GoTo ErrorOccured

	Do Case GetMICtrlCtrlType(rbnControl)
		Case ControlType_Button
			Call SetRbnBtnCtrlHeight(rbnControl, fHeight)
		Case ControlType_ToolButton
			Call SetRbnToolBtnCtrlHeight(rbnControl, fHeight)
		Case ControlType_RibbonMenuItem
			Call SetRbnMenuItemCtrlHeight(rbnControl, fHeight)
		Case ControlType_RibbonButtonPanel
			Call SetRbnBtnPnlHeight(rbnControl, fHeight)
'		Case ControlType_RibbonSeparator
		Case ControlType_ContextMenuItem
			Call SetICntxtMnuMenuItemHeight(rbnControl, fHeight)
'		Case ControlType_ContextMenuSeparator
'		Case ControlType_MenuItemSeparator
		Case ControlType_DropDownButton
			Call SetRbnDropDownCtrlHeight(rbnControl, fHeight)
		Case ControlType_SplitButton
			Call SetRbnSplitCtrlHeight(rbnControl, fHeight)
'		Case ControlType_DropDownMenuGroup
		Case ControlType_GalleryControl
			Call SetRbnGalleryCtrlHeight(rbnControl, fHeight)
		Case ControlType_GalleryItem
			Call SetRbnGalleryItemHeight(rbnControl, fHeight)
		Case ControlType_GalleryGroup
			Call SetRbnGalleryGrpHeight(rbnControl, fHeight)
		Case ControlType_CustomControl
			Call SetRbnCustomCtrlHeight(rbnControl, fHeight)
		Case ControlType_TextBlock
			Call SetITextBlockHeight(rbnControl, fHeight)
		Case ControlType_Image
			Call SetIImageHeight(rbnControl, fHeight)
		Case ControlType_BackStageTabItem
			Call SetIBackStageTabItemHeight(rbnControl, fHeight)
		Case ControlType_BackStageButton
			Call SetIBackStageBtnHeight(rbnControl, fHeight)
'		Case ControlType_BackStageTabSection
'		Case ControlType_BackStageSeparator
		Case ControlType_StackPanel, ControlType_WrapPanel
			Call SetIStackPanelHeight(rbnControl, fHeight)
	End Case

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSetHeightThs")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSetHeightIdx( ByVal nElementIdx As Integer
					, ByVal fHeight As Float
					)

OnError GoTo ErrorOccured

	Call RBNControlSetHeightThs(marrControls(nElementIdx), fHeight)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSetHeightIdx")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlCheckThs(	  ByVal rbnControl As This
					, ByVal bChecked As Logical)

OnError GoTo ErrorOccured

	Do Case GetMICtrlCtrlType(rbnControl)
'		Case ControlType_Button
'		Case ControlType_ToolButton

		Case ControlType_RibbonMenuItem
			Call SetRbnMenuItemCtrlIsChecked(rbnControl, bChecked)

'		Case ControlType_RibbonButtonPanel
'		Case ControlType_RibbonSeparator

		Case ControlType_ContextMenuItem
			Call SetICntxtMnuMenuItemIsChecked(rbnControl, bChecked)

'		Case ControlType_ContextMenuSeparator
'		Case ControlType_MenuItemSeparator
'		Case ControlType_DropDownButton
'		Case ControlType_SplitButton
'		Case ControlType_DropDownMenuGroup
'		Case ControlType_GalleryControl

		Case ControlType_GalleryItem
			Call SetRbnGalleryItemIsChecked(rbnControl, bChecked)

'		Case ControlType_GalleryGroup
'		Case ControlType_CustomControl
'		Case ControlType_TextBlock
'		Case ControlType_Image
'		Case ControlType_BackStageTabItem
'		Case ControlType_BackStageButton
'		Case ControlType_BackStageTabSection
'		Case ControlType_BackStageSeparator
'		Case ControlType_StackPanel, ControlType_WrapPanel

	End Case

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlCheckThs")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlCheckIdx(	  ByVal nElementIdx As Integer
					, ByVal bChecked As Logical
					)

OnError GoTo ErrorOccured

	Call RBNControlCheckThs(marrControls(nElementIdx), bChecked)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlCheckIdx")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSelectedThs(	  ByVal rbnControl As This
						, ByVal bSelected As Logical
						)

OnError GoTo ErrorOccured

	Do Case GetMICtrlCtrlType(rbnControl)
		Case ControlType_Button
'			Call DEBUGPrint("SetRbnBtnCtrlIsSelected(rbnControl, " & bSelected)
			Call SetRbnBtnCtrlIsSelected(rbnControl, bSelected)
'		Case ControlType_ToolButton
		Case ControlType_RibbonMenuItem
			Call SetRbnMenuItemCtrlIsChecked(rbnControl, bSelected)
'		Case ControlType_RibbonButtonPanel
'		Case ControlType_RibbonSeparator
		Case ControlType_ContextMenuItem
			Call SetICntxtMnuMenuItemIsChecked(rbnControl, bSelected)
'		Case ControlType_ContextMenuSeparator
'		Case ControlType_MenuItemSeparator
'		Case ControlType_DropDownButton
'		Case ControlType_SplitButton
'		Case ControlType_DropDownMenuGroup
'		Case ControlType_GalleryControl
		Case ControlType_GalleryItem
			Call SetRbnGalleryItemIsChecked(rbnControl, bSelected)
'		Case ControlType_GalleryGroup
'		Case ControlType_CustomControl
'		Case ControlType_TextBlock
'		Case ControlType_Image
'		Case ControlType_BackStageTabItem
		Case ControlType_BackStageButton
			Call SetIBackStageBtnIsSelected(rbnControl, bSelected)
'		Case ControlType_BackStageTabSection
'		Case ControlType_BackStageSeparator
'		Case ControlType_StackPanel, ControlType_WrapPanel

	End Case

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSelectedThs")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlSelectedIdx(	  ByVal nElementIdx As Integer
						, ByVal bSelected As Logical
					)

OnError GoTo ErrorOccured

	Call RBNControlSelectedThs(marrControls(nElementIdx), bSelected)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlSelectedIdx")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlToggleThs(	  ByVal rbnControl As This
					, ByVal bIsToggle As Logical
					)

OnError GoTo ErrorOccured

	Do Case GetMICtrlCtrlType(rbnControl)
		Case ControlType_Button
			Call SetRbnBtnCtrlIsToggle(rbnControl, bIsToggle)
'		Case ControlType_ToolButton
		Case ControlType_RibbonMenuItem
			Call SetRbnMenuItemCtrlIsCheckable(rbnControl, bIsToggle)
'		Case ControlType_RibbonButtonPanel
'		Case ControlType_RibbonSeparator
		Case ControlType_ContextMenuItem
			Call SetICntxtMnuMenuItemIsCheckable(rbnControl, bIsToggle)
'		Case ControlType_ContextMenuSeparator
'		Case ControlType_MenuItemSeparator
'		Case ControlType_DropDownButton
'		Case ControlType_SplitButton
'		Case ControlType_DropDownMenuGroup
'		Case ControlType_GalleryControl
'		Case ControlType_GalleryItem
'		Case ControlType_GalleryGroup
'		Case ControlType_CustomControl
'		Case ControlType_TextBlock
'		Case ControlType_Image
'		Case ControlType_BackStageTabItem
'		Case ControlType_BackStageButton
'		Case ControlType_BackStageTabSection
'		Case ControlType_BackStageSeparator
'		Case ControlType_StackPanel, ControlType_WrapPanel

	End Case

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlToggleThs")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNControlToggleIdx(	  ByVal nElementIdx As Integer
					, ByVal bIsToggle As Logical
					)

OnError GoTo ErrorOccured

	Call RBNControlToggleThs(marrControls(nElementIdx), bIsToggle)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlToggleIdx")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Business Insight
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNControlGetControlIDThs(	  ByVal rbnControl As This
								)  As Integer	'Will return the ID of the control used CommandInfo(CMD_INFO_MENUITEM) and CommandInfo(CMD_INFO_TOOLBTN)

OnError GoTo ErrorOccured

	Do Case GetMICtrlCtrlType(rbnControl)
		Case ControlType_Button
			RBNControlGetControlIDThs	= GetMICtrlCtrlId(rbnControl)

		Case ControlType_ToolButton
			RBNControlGetControlIDThs	= GetRbnToolBtnCtrlCtrlId(rbnControl)

		Case ControlType_RibbonMenuItem
			RBNControlGetControlIDThs	= GetRbnMenuItemCtrlCtrlId(rbnControl)

		Case ControlType_RibbonButtonPanel
			RBNControlGetControlIDThs	= GetRbnBtnPnlCtrlId(rbnControl)
		'Case ControlType_RibbonSeparator

		Case ControlType_ContextMenuItem
			RBNControlGetControlIDThs	= GetICntxtMnuMenuItemCtrlId(rbnControl)

		'Case ControlType_ContextMenuSeparator
		'Case ControlType_MenuItemSeparator

		Case ControlType_DropDownButton
			RBNControlGetControlIDThs	= GetRbnDropDownCtrlCtrlId(rbnControl)

		Case ControlType_SplitButton
			RBNControlGetControlIDThs	= GetRbnSplitCtrlCtrlId(rbnControl)

'		Case ControlType_DropDownMenuGroup
		Case ControlType_GalleryControl
			RBNControlGetControlIDThs	= GetRbnGalleryCtrlCtrlId(rbnControl)

		Case ControlType_GalleryItem
			RBNControlGetControlIDThs	= GetRbnGalleryItemCtrlId(rbnControl)

		Case ControlType_GalleryGroup
			RBNControlGetControlIDThs	= GetRbnGalleryGrpCtrlId(rbnControl)

		Case ControlType_CustomControl
			RBNControlGetControlIDThs	= GetRbnCustomCtrlCtrlId(rbnControl)

		Case ControlType_TextBlock
			RBNControlGetControlIDThs	= GetITextBlockCtrlId(rbnControl)

		Case ControlType_Image
			RBNControlGetControlIDThs	= GetIImageCtrlId(rbnControl)

		Case ControlType_BackStageTabItem
			RBNControlGetControlIDThs	= GetIBackStageTabItemCtrlId(rbnControl)

		Case ControlType_BackStageButton
			RBNControlGetControlIDThs	= GetIBackStageBtnCtrlId(rbnControl)

'		Case ControlType_BackStageTabSection
'		Case ControlType_BackStageSeparator
		Case ControlType_StackPanel, ControlType_WrapPanel
			RBNControlGetControlIDThs	= GetIStackPanelCtrlId(rbnControl)

	End Case
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlGetControlIDThs")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Business Insight
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNControlGetControlIDIdx(  nElementIdx As Integer
								)  As Integer	'Will return the ID of the control used CommandInfo(CMD_INFO_MENUITEM) and CommandInfo(CMD_INFO_TOOLBTN)
OnError GoTo ErrorOccured

	RBNControlGetControlIDIdx = RBNControlGetControlIDThs(marrControls(nElementIdx))
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "PleaseEnterNameOfFunctionHere")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNControlGetIndex(	  ByVal sTabName As String
						, ByVal sGroupName As String
						, ByVal sControlName As String
						) As Integer

Dim	rbnTab As This,
	rbnGroup As This,
	rbnTabFound As RefPtr,
	rbnGroupFound As RefPtr

OnError GoTo ErrorOccured

RBNControlGetIndex = 0

	Call RBNInitiate

	If RBNGetTab(sTabName, rbnTabFound) Then
		rbnTab = rbnTabFound

		If RBNTabGetGroupThs(rbnTab, sGroupName, rbnGroupFound) Then

			rbnGroup = rbnGroupFound

			RBNControlGetIndex = RBNGroupGetControlIndexThs(rbnGroup, sControlName)
			Exit Function
		End If
	End If

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnTab		= NULL_PTR
	rbnGroup		= NULL_PTR
	rbnTabFound	= NULL_PTR
	rbnGroupFound	= NULL_PTR

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNControlGetIndex")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNAddElement(	  ByVal sTabName As String
					, ByVal sGroupName As String
					, ByVal sSplitButtonName As String
					, ByVal sSplitButtonGroupName As String
					, ByVal sControlName As String
					, ByVal nControlType As Integer
					, ByVal nParentControlType As Integer
					) As Integer

OnError GoTo ErrorOccured

RBNAddElement = 0

	mnNumElements = mnNumElements + 1
	Redim marrControls(mnNumElements)
	Redim marrParentControlColls(mnNumElements)
	Redim marrTabNames(mnNumElements)
	Redim marrGroupNames(mnNumElements)
	Redim marrControlNames(mnNumElements)
	Redim marrSplitButtonNames(mnNumElements)
	Redim marrSplitButtonGroupNames(mnNumElements)
	Redim marrControlTypes(mnNumElements)
	Redim marrParentControlTypes(mnNumElements)

	marrTabNames(mnNumElements)				= sTabName
	marrGroupNames(mnNumElements)				= sGroupName
	marrControlNames(mnNumElements)			= sControlName
	marrSplitButtonNames(mnNumElements)		= sSplitButtonName
	marrSplitButtonGroupNames(mnNumElements)	= sSplitButtonGroupName
	marrControlTypes(mnNumElements)			= nControlType
	marrParentControlTypes(mnNumElements)		= nParentControlType

	RBNAddElement = mnNumElements

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNAddElement")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNRemoveElement( ByVal sTabName As String
					, ByVal sGroupName As String
					, ByVal sSplitButtonName As String
					, ByVal sSplitButtonGroupName As String
					, ByVal sControlName As String
					) As Integer

Dim	nElementIdx, i As Integer

OnError GoTo ErrorOccured

RBNRemoveElement = 0

	nElementIdx = RBNGetElementIndex(sTabName, sGroupName, sSplitButtonName, sSplitButtonGroupName, sControlName)
	If nElementIdx > 0 Then
		For i = nElementIdx To (mnNumElements - 1)
			marrControls(nElementIdx)			= NULL_PTR
			marrControls(nElementIdx)			= marrControls(nElementIdx + 1)
			marrParentControlColls(nElementIdx)	= NULL_PTR
			marrParentControlColls(nElementIdx)	= marrParentControlColls(nElementIdx + 1)
			marrTabNames(nElementIdx)			= marrTabNames(nElementIdx + 1)
			marrGroupNames(nElementIdx)			= marrGroupNames(nElementIdx + 1)
			marrControlNames(nElementIdx)			= marrControlNames(nElementIdx + 1)
			marrSplitButtonNames(nElementIdx) 		= marrSplitButtonNames(nElementIdx + 1)
			marrSplitButtonGroupNames(nElementIdx)	= marrSplitButtonGroupNames(nElementIdx + 1)
			marrControlTypes(nElementIdx)			= marrControlTypes(nElementIdx + 1)
			marrParentControlTypes(nElementIdx)	= marrParentControlTypes(nElementIdx + 1)
		Next

		marrControls(mnNumElements)	= NULL_PTR
		mnNumElements = mnNumElements - 1
		Redim marrControls(mnNumElements)
		Redim marrParentControlColls(mnNumElements)
		Redim marrTabNames(mnNumElements)
		Redim marrGroupNames(mnNumElements)
		Redim marrControlNames(mnNumElements)
		Redim marrSplitButtonNames(mnNumElements)
		Redim marrSplitButtonGroupNames(mnNumElements)
		Redim marrControlTypes(mnNumElements)
		Redim marrParentControlTypes(mnNumElements)
	End If

RBNRemoveElement = nElementIdx

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNRemoveElement")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGetElementIndex(	  ByVal sTabName As String
						, ByVal sGroupName As String
						, ByVal sSplitButtonName As String
						, ByVal sSplitButtonGroupName As String
						, ByVal sControlName As String
						) As Integer

Dim	nElement As Integer

OnError GoTo ErrorOccured

RBNGetElementIndex = 0

	RBNGetElementIndex = RBNGetElementIndexOffset(sTabName, sGroupName, sSplitButtonName, sSplitButtonGroupName, sControlName, 1)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGetElementIndex")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGetElementIndexOffset(	  ByVal sTabName As String
							, ByVal sGroupName As String
							, ByVal sSplitButtonName As String
							, ByVal sSplitButtonGroupName As String
							, ByVal sControlName As String
							, ByVal nOffset As Integer
							) As Integer

Dim	nElement As Integer

OnError GoTo ErrorOccured

RBNGetElementIndexOffset = 0

'	Call DEBUGPrint(sTabName & " | " & sGroupName & " | " & sControlName & " | " & sSplitButtonName & " | " & sSplitButtonGroupName)
	For nElement = nOffset To mnNumElements
		If sTabName = marrTabNames(nElement) OR sTabName = "" Then
			If sGroupName = marrGroupNames(nElement) OR sGroupName = "" Then
				If sControlName = marrControlNames(nElement) OR sControlName = "" Then
					If sSplitButtonName = marrSplitButtonNames(nElement) OR sSplitButtonName = "" Then
						If sSplitButtonGroupName = marrSplitButtonGroupNames(nElement) OR sSplitButtonGroupName = "" Then
							RBNGetElementIndexOffset = nElement
							Exit Function
						End If
					End If
				End If
			End If
		End If
	Next

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGetElementIndexOffset")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGetPrevTabElementIdx(	  ByVal sTabName As String
							) As Integer

Dim	nElement As Integer

OnError GoTo ErrorOccured

RBNGetPrevTabElementIdx = 0

	If mnNumElements = 0 Then
		Exit Sub
	End If

'	Call DEBUGPrint("RBNGetPrevTabElementIdx: " & sTabName)
	For nElement = mnNumElements To 1 Step -1
		If sTabName = marrTabNames(nElement) Then
			If marrControlTypes(nElement) = CONTROL_TYPE_RLIB_TAB Then
				RBNGetPrevTabElementIdx = nElement
				Exit Function
			End If
		End If
	Next

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGetPrevTabElementIdx")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGetPrevGroupElementIdx(  ByVal sTabName As String
							, ByVal sGroupName As String
							) As Integer

Dim	nElement As Integer

OnError GoTo ErrorOccured

RBNGetPrevGroupElementIdx = 0

	If mnNumElements = 0 Then
		Exit Sub
	End If

'	Call DEBUGPrint("RBNGetPrevGroupElementIdx: " & sTabName & " | " & sGroupName)
'	Call DEBUGPrint("   Max Elements: " & mnNumElements)
	For nElement = mnNumElements To 1 Step -1
		If sTabName = marrTabNames(nElement) Then
			If sGroupName = marrGroupNames(nElement) Then
				If marrControlTypes(nElement) = CONTROL_TYPE_RLIB_GROUP Then
					RBNGetPrevGroupElementIdx = nElement
					Exit Function
				End If
			End If
		End If
	Next

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGetPrevGroupElementIdx")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGetPrevSplitButtonElementIdx( ByVal sTabName As String
								, ByVal sGroupName As String
								, ByVal sSplitButtonName As String
								) As Integer

Dim	nElement As Integer

OnError GoTo ErrorOccured

RBNGetPrevSplitButtonElementIdx = 0

	If mnNumElements = 0 Then
		Exit Sub
	End If

	For nElement = mnNumElements to 1 Step - 1
		If sTabName = marrTabNames(nElement) Then
			If sGroupName = marrGroupNames(nElement) Then
				If sSplitButtonName = marrSplitButtonNames(nElement) Then
					If marrControlTypes(nElement) = ControlType_SplitButton Then
						RBNGetPrevSplitButtonElementIdx = nElement
						Exit Function
					End If
				End If
			End If
		End If
	Next

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGetPrevSplitButtonElementIdx")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGetPrevSplitButtonGroupElementIdx( ByVal sTabName As String
									, ByVal sGroupName As String
									, ByVal sSplitButtonName As String
									, ByVal sSplitButtonGroupName As String
									) As Integer

Dim	nElement As Integer

OnError GoTo ErrorOccured

RBNGetPrevSplitButtonGroupElementIdx = 0

	If mnNumElements = 0 Then
		Exit Sub
	End If

	For nElement = mnNumElements to 1 Step - 1
		If sTabName = marrTabNames(nElement) Then
			If sGroupName = marrGroupNames(nElement) Then
				If sSplitButtonName = marrSplitButtonNames(nElement) Then
					If sSplitButtonGroupName = marrSplitButtonGroupNames(nElement) Then
						If marrControlTypes(nElement) In (ControlType_DropDownMenuGroup, ControlType_StackPanel, ControlType_WrapPanel) Then
							RBNGetPrevSplitButtonGroupElementIdx = nElement
							Exit Function
						End If
					End If
				End If
			End If
		End If
	Next

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGetPrevSplitButtonGroupElementIdx")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGetPrevDropDButtonElementIdx( ByVal sTabName As String
								, ByVal sGroupName As String
								, ByVal sDropDButtonName As String
								) As Integer

Dim	nElement As Integer

OnError GoTo ErrorOccured

RBNGetPrevDropDButtonElementIdx = 0

	If mnNumElements = 0 Then
		Exit Sub
	End If

	For nElement = mnNumElements to 1 Step - 1
		If sTabName = marrTabNames(nElement) Then
			If sGroupName = marrGroupNames(nElement) Then
				If sDropDButtonName = marrSplitButtonNames(nElement) Then
					If marrControlTypes(nElement) In (ControlType_DropDownMenuGroup, ControlType_StackPanel, ControlType_WrapPanel) Then
						RBNGetPrevDropDButtonElementIdx = nElement
						Exit Function
					End If
				End If
			End If
		End If
	Next

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGetPrevDropDButtonElementIdx")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGetPrevDropDButtonGroupElementIdx( ByVal sTabName As String
									, ByVal sGroupName As String
									, ByVal sDropDButtonName As String
									, ByVal sDropDButtonGroupName As String
									) As Integer

Dim	nElement As Integer

OnError GoTo ErrorOccured

RBNGetPrevDropDButtonGroupElementIdx = 0

	If mnNumElements = 0 Then
		Exit Sub
	End If

'	Call DEBUGPrint("Max Elements: " & mnNumElements)
	For nElement = mnNumElements to 1 Step - 1
		If sTabName = marrTabNames(nElement) Then
			If sGroupName = marrGroupNames(nElement) Then
				If sDropDButtonName = marrSplitButtonNames(nElement) Then
					If sDropDButtonGroupName = marrSplitButtonGroupNames(nElement) Then
						If marrControlTypes(nElement) In (ControlType_DropDownMenuGroup, ControlType_StackPanel, ControlType_WrapPanel) Then
							RBNGetPrevDropDButtonGroupElementIdx = nElement
							Exit Function
						End If
					End If
				End If
			End If
		End If
	Next

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGetPrevDropDButtonGroupElementIdx")
	Call ERRShow()

End Function


'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNClearCustomRibbonElements

Dim	bRemoved as Logical,
	i As Integer
'	, nResult, nTabIndex, nGroupIndex, nContextMenuID As Integer,
'	rbnTab As This,
'	rbnGroupsColl As This,
'	rbnGroupItem As This,
'	rbnControlsColl As This,
'	rbnControl As RefPtr

OnError GoTo ErrorOccured

	Call RBNInitiate

'	Print Time(24) & " RBNClearCustomRibbonElements Starting"

'If false then
'	Call DEBUGPrint("Removing Controls from the ribbon")
	For i = mnNumElements To 1 Step -1
		If marrControlTypes(i) = CONTROL_TYPE_RLIB_TAB Then
			Call DEBUGPrint(i & " Removing tab " & marrTabNames(i) & " of type " & marrControlTypes(i))
'			Call DEBUGPrint("    from list of " & GetRbnTabCollCount(marrParentControlColls(i)) & " elements")
			bRemoved = RbnTabCollRemove(theTabsColl, marrControls(i))
		ElseIf marrControlTypes(i) = CONTROL_TYPE_RLIB_GROUP Then
			Call DEBUGPrint(i & " Removing group " & marrGroupNames(i) & " of type " & marrControlTypes(i))
'			Call DEBUGPrint("    from list of " & GetRbnCtrlGrpCollCount(marrParentControlColls(i)) & " elements")
			bRemoved = RbnCtrlGrpCollRemove(marrParentControlColls(i), marrControls(i))
		Else
			Call DEBUGPrint(i & " Removing control " & marrControlNames(i) & " of type " & marrControlTypes(i))
'			Call DEBUGPrint("    from list of " & GetMICtrlCollCount(marrParentControlColls(i)) & " elements")
			bRemoved = MICtrlCollRemove(marrParentControlColls(i), marrControls(i))
		End If
	Next
'Else
''	Call DEBUGPrint("Removing Controls from the ribbon")
'	For i = mnNumElements To 1 Step -1
''		Call DEBUGPrint("   " & i & " Tab: " & marrTabNames(i) & " | Group: " & marrGroupNames(i) & " | SplitButton: " & marrSplitButtonNames(i) & " | SplitButtonGroup: " & marrSplitButtonGroupNames(i) & " | Control: " & marrControlNames(i))
'
'		If NOT marrSplitButtonGroupNames(i) = "" Then
''			Call DEBUGPrint("   Removing from a SplitButton or DropDButton")
'			If NOT marrControlNames(i) = "" Then
'				If marrParentControlTypes(i) = ControlType_SplitButton Then
'					'**Remove SplitButton Control
'					nResult = RBNSplitButtonGroupRemoveControl(  marrControlNames(i), marrTabNames(i), marrGroupNames(i), marrSplitButtonNames(i), marrSplitButtonGroupNames(i))
''					Call DEBUGPrint("   " & i & " Control Removed Result: " & nResult)
'				ElseIf marrParentControlTypes(i) = ControlType_DropDownButton Then
'					'**Remove DropDownButton Control
'					nResult = RBNDropDButtonGroupRemoveControl(  marrControlNames(i), marrTabNames(i), marrGroupNames(i), marrSplitButtonNames(i), marrSplitButtonGroupNames(i))
'	'				Call DEBUGPrint("   " & i & " Control Removed Result: " & nResult)
'				Else
''					Call DEBUGPrint("   " & i & " Unexpected Control Type: " & marrControlTypes(i))
'				End If
'			Else
'				If marrParentControlTypes(i) = ControlType_SplitButton Then
'					nResult = RBNSplitButtonGroupRemove(marrSplitButtonGroupNames(i), marrTabNames(i), marrGroupNames(i), marrSplitButtonNames(i))
''					Call DEBUGPrint("   " & i & " SplitButton Group Removed Result: " & nResult)
'				ElseIf marrParentControlTypes(i) = ControlType_DropDownButton Then
'					nResult = RBNDropDButtonGroupRemove(marrSplitButtonGroupNames(i), marrTabNames(i), marrGroupNames(i), marrSplitButtonNames(i))
''					Call DEBUGPrint("   " & i & " DropDownButton Group Removed Result: " & nResult)
'				End If
'			End If
'		ElseIf NOT marrControlNames(i) = "" Then
'			'**Remove Control
'			If marrTabNames(i) = "ToolContextMenu" Then
'				nResult = RBNToolContextMenuRemoveMenuItem(marrControlNames(i))
''				Call DEBUGPrint("   " & i & " Control Removed Result: " & nResult)
'			ElseIf marrTabNames(i) = "MapMiniToolbar" Then
'				If marrGroupNames(i) = "" Then
'					nResult = RBNMapMTBRemoveControl(marrControlNames(i))
''					Call DEBUGPrint("   " & i & " Control Removed Result: " & nResult)
'				Else
'					nResult = RBNMapMTBStackPanelRemoveControl(marrControlNames(i), marrGroupNames(i))
''					Call DEBUGPrint("   " & i & " Control Removed Result: " & nResult)
'				End If
'			ElseIf marrParentControlTypes(i) = CONTROL_TYPE_RLIB_CNTXT_MNU Then
'				nContextMenuID	= Val(Right$(marrTabNames(i), Len(marrTabNames(i)) - Len("ContextMenu=") ))
'				nResult 		= RBNCntxtMenuRemoveControl(nContextMenuID, marrControlNames(i))
''				Call DEBUGPrint("   " & i & "RBNCntxtMenuRemoveControl: Control Removed Result: " & nResult)
'			Else
'				nResult = RBNGroupRemoveControl(marrControlNames(i), marrTabNames(i), marrGroupNames(i))
''				Call DEBUGPrint("   " & i & " Control Removed Result: " & nResult)
'			End If
'		ElseIf NOT marrGroupNames(i) = "" Then
'			If RBNGroupNumControls(marrGroupNames(i), marrTabNames(i)) = 0 Then
'				'**Remove Group
'				nResult = RBNTabGroupRemove(marrGroupNames(i), marrTabNames(i))
''				Call DEBUGPrint("   " & i & " Group Removed Result: " & nResult)
'			Else
''				Call DEBUGPrint("   " & i & " Group has still Controls")
'			End If
'		Else
'			If RBNTabNumGroups(marrTabNames(i)) = 0 Then
'				'**Remove Tab
'				nResult = RBNRemoveTab(marrTabNames(i))
''				Call DEBUGPrint("   " & i & " Tab Removed Result: " & nResult)
'			Else
''				Call DEBUGPrint("   " & i & " Tab has still Groups")
'			End If
'		End If
'	Next
'End If

'	Print Time(24) & " RBNClearCustomRibbonElements End"

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	rbnTab			= NULL_PTR
'	rbnGroupsColl		= NULL_PTR
'	rbnGroupItem		= NULL_PTR
'	rbnControlsColl	= NULL_PTR
'	rbnControl		= NULL_PTR

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNClearCustomRibbonElements: Ctrl Group Index: " & i & " Tab: " & marrTabNames(i) & ", Group: " & marrGroupNames(i) & ", Control: " & marrControlNames(i))
	Call ERRPrint()
	If ERRGetLatestErrorNo() In (1660, 1666) Then
		Do Case marrControlTypes(i)
			Case CONTROL_TYPE_RLIB_TAB
				Call DEBUGPrint(i & " Removing tab (Error Handling) " & marrTabNames(i) & " of type " & marrControlTypes(i))
				bRemoved = (RBNRemoveTab(marrTabNames(i)) > 0)
			Case CONTROL_TYPE_RLIB_GROUP
				Call DEBUGPrint(i & " Removing group (Error Handling) " & marrGroupNames(i) & " of type " & marrControlTypes(i))
				bRemoved = (RBNTabGroupRemove(marrGroupNames(i), marrTabNames(i)) > 0)
			Case Else
				If marrTabNames(i) = "MapMiniToolbar" Then
					Call DEBUGPrint(i & " Removing MTB control (Error Handling) " & marrControlNames(i) & " of type " & marrControlTypes(i))
					bRemoved = MICtrlCollRemove(theMapMTBControlsColl, marrControls(i))
				Else
					Call DEBUGPrint(i & " Removing control (Error Handling) " & marrControlNames(i) & " of type " & marrControlTypes(i))
					bRemoved = (RBNGroupRemoveControl(marrControlNames(i), marrTabNames(i), marrGroupNames(i)) > 0)
				End If
		End Case
	Else
		Print "Latest error: " & ERRGetLatestErrorNo()
		Call ERRShow()
	End If
	Resume Next

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNEndHandler

Dim	i As Integer

OnError GoTo ErrorOccured

	Call RBNClearCustomRibbonElements
	If NOT RBNEventUnsubscribeAll() Then
		'**Whoops, not all events were unsubscribed from
	End If
	If NOT RBNUnregisterAllFunctionsAsPublic() Then
		'**Whoops, not all public functions were unregistered
	End If

	theMapInfoApplication		= NULL_PTR
	theMapBasicApplication		= NULL_PTR
	theMapInfoEvents			= NULL_PTR
	theStatusbar				= NULL_PTR
	theRibbon					= NULL_PTR
	theQAT					= NULL_PTR
	theToolContextMenu			= NULL_PTR
	theTabsColl				= NULL_PTR
	theToolContextMenuItemsColl	= NULL_PTR
	theContextMenus			= NULL_PTR
	theMapMTB					= NULL_PTR
	theMapMTBControlsColl		= NULL_PTR
	theNotification			= NULL_PTR

	For i = 1 To Ubound(marrControls)
		marrControls(i)	= NULL_PTR
	Next
	Redim marrControls(0)

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNEndHandler")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNEventSubscribe(	  ByVal nEventType As Integer
						, ByVal sMBXHandler As String
						) As Logical

Dim	bWasSubscribed As Logical

OnError GoTo ErrorOccured

RBNEventSubscribe = FALSE

	Call RBNInitiate

'	Call DEBUGPrint("MIEventsSubscribe(theMapInfoEvents, " & nEventType & ", " & sMBXHandler & ")")
	bWasSubscribed = MIEventsSubscribe(theMapInfoEvents, nEventType, sMBXHandler)

	If bWasSubscribed Then
		mnNumEvents	= mnNumEvents + 1
		Redim marrEventTypes(mnNumEvents)
		Redim marrEventMBXHandlers(mnNumEvents)
		marrEventTypes(mnNumEvents)		= nEventType
		marrEventMBXHandlers(mnNumEvents)	= sMBXHandler
		RBNEventSubscribe = TRUE
	End If

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNEventSubscribe")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNEventUnsubscribe(	  ByVal nEventType As Integer
						, ByVal sMBXHandler As String
						) As Logical

Dim	bWasUnsubscribed As Logical,
	i As Integer

OnError GoTo ErrorOccured

RBNEventUnsubscribe = FALSE

	Call RBNInitiate

'	Call DEBUGPrint("MIEventsUnSubscribe(theMapInfoEvents, " & nEventType & ", " & sMBXHandler & ")")
	bWasUnsubscribed	= MIEventsUnSubscribe(theMapInfoEvents, nEventType, sMBXHandler)
	If bWasUnsubscribed Then
		For i = 1 To mnNumEvents
			If marrEventTypes(i) = nEventType Then
				If marrEventMBXHandlers(i) = sMBXHandler Then
					Call ARRAYRemoveItemString(marrEventMBXHandlers, i)
					Call ARRAYRemoveItemInteger(marrEventTypes, i)
					mnNumEvents	= mnNumEvents - 1
				End If
			End If
		Next
	End If

	RBNEventUnsubscribe = bWasUnsubscribed

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNEventUnsubscribe")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNEventUnsubscribeAll() As Logical

Dim	bWasUnsubscribed As Logical,
	i As Integer

OnError GoTo ErrorOccured

RBNEventUnsubscribeAll = FALSE

	Call RBNInitiate

	For i = mnNumEvents To 1 Step -1
		bWasUnsubscribed	= MIEventsUnSubscribe(theMapInfoEvents, marrEventTypes(i), marrEventMBXHandlers(i))
		If bWasUnsubscribed Then
			Call ARRAYRemoveItemString(marrEventMBXHandlers, i)
			Call ARRAYRemoveItemInteger(marrEventTypes, i)
			mnNumEvents	= mnNumEvents - 1
		End If
	Next

	RBNEventUnsubscribeAll = (mnNumEvents = 0)

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNEventUnsubscribeAll")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNRegisterFunctionAsPublic(	  ByVal sFunctionName As String
								, ByVal sPublicName As String
								, ByVal sDescription As String
							  	) As Logical

Dim	nFuncID As Integer

OnError GoTo ErrorOccured

RBNRegisterFunctionAsPublic = FALSE

	Call RBNInitiate

	Call DEBUGPrint("_RegisterPublicMBXFunction(" & sFunctionName & ", " & sPublicName & ", " & sDescription & ")")
	nFuncID = _RegisterPublicMBXFunction(theMapBasicApplication, sFunctionName, sPublicName, sDescription)

	If nFuncID Then
		mnNumPublicFunctions	= mnNumPublicFunctions + 1
		Redim marrPublicFunctionNames(mnNumPublicFunctions)
		Redim marrPublicFunctionIDs(mnNumPublicFunctions)
		marrPublicFunctionNames(mnNumPublicFunctions)	= sFunctionName
		marrPublicFunctionIDs(mnNumPublicFunctions)	= nFuncID

		RBNRegisterFunctionAsPublic = TRUE
	End If

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNRegisterFunctionAsPublic")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNUnregisterFunctionAsPublic(	  ByVal sFunctionName As String
								) As Logical

Dim	i As Integer

OnError GoTo ErrorOccured

RBNUnregisterFunctionAsPublic = FALSE

	Call RBNInitiate

	For i = 1 To mnNumPublicFunctions
		If marrPublicFunctionNames(i) = sFunctionName Then
			Call _UnregisterPublicMBXFunction(theMapBasicApplication, marrPublicFunctionIDs(i))
			Call ARRAYRemoveItemString(marrPublicFunctionNames, i)
			Call ARRAYRemoveItemInteger(marrPublicFunctionIDs, i)
			mnNumPublicFunctions	= mnNumPublicFunctions - 1

			RBNUnregisterFunctionAsPublic = TRUE
		End If
	Next

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNUnregisterFunctionAsPublic")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNUnregisterAllFunctionsAsPublic() As Logical

Dim	i As Integer

OnError GoTo ErrorOccured

RBNUnregisterAllFunctionsAsPublic = FALSE

	Call RBNInitiate

	If mnNumPublicFunctions > 0 Then
		Call _UnregisterPublicMBXFunction(theMapBasicApplication, -1)

		mnNumPublicFunctions	= 0
		Redim marrPublicFunctionNames(mnNumPublicFunctions)
		Redim marrPublicFunctionIDs(mnNumPublicFunctions)
	End If

	RBNUnregisterAllFunctionsAsPublic = (mnNumEvents = 0)

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNUnregisterAllFunctionsAsPublic")
	Call ERRShow()

End Function

'**********************************************************************************************''
'**** N O T I F I C A T I O N *****************************************************************''
'**********************************************************************************************''

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNNotificationShow(	  ByVal sTitle As String
					, ByVal sMessage As String
					, ByVal nNotificationType As Integer
					, ByVal nTimeToShow As Integer
					)

Dim	refNotification As RefPtr

OnError GoTo ErrorOccured

	Call RBNInitiate

	Call SetNotificationObjectMessage(theNotification, sMessage)
	Call SetNotificationObjectTitle(theNotification, sTitle)
	Call SetNotificationObjectType(theNotification, nNotificationType)

	If nTimeToShow <= 0 Then
		nTimeToShow = 10000
	End If
	Call SetNotificationObjectTimeToShow(theNotification, nTimeToShow)

	refNotification	= theNotification
	Call ShowNotification(theMapInfoApplication, refNotification)

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	refNotification	= NULL_PTR

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNNotificationShow")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Based on procedure created by David Wilson, Buchanan Computing
'Parameters:
'
'**********************************************************************************************''
Sub RBNNotificationShowAtCursor(	  ByVal sTitle As String
							, ByVal sMessage As String
							, ByVal nNotificationType As Integer
							, ByVal nTimeToShow As Integer
							)

Dim	refNotification As RefPtr,
	apipCursor as PointAPI,
	pLocation as Point,
	nResult As Integer

OnError GoTo ErrorOccured

	Call RBNInitiate

	Call SetNotificationObjectMessage(theNotification, sMessage)
	Call SetNotificationObjectTitle(theNotification, sTitle)
	Call SetNotificationObjectType(theNotification, nNotificationType)

	If nTimeToShow <= 0 Then
		nTimeToShow = 10000
	End If
	Call SetNotificationObjectTimeToShow(theNotification, nTimeToShow)

	nResult = WAPIGetCursorPosition(apipCursor)
	If nResult > 0 Then
		If apipCursor.x < 100 Then
			apipCursor.x = 150
		End If
		If apipCursor.y > 1000 Then
			apipCursor.y = 1000
		End If
		pLocation.x = apipCursor.x
		pLocation.y = apipCursor.y
	End If
	Call SetNotificationObjectNotificationLocation(theNotification, pLocation)

	refNotification	= theNotification
	Call ShowNotification(theMapInfoApplication, refNotification)

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
'	refNotification	= NULL_PTR

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNNotificationShow")
	Call ERRShow()

End Sub




'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNLoop

OnError GoTo ErrorOccured

Dim	nNumTabs, nNumGroups, nNumCntrls, nNumGalleryGroups, nNumGalleryCtrls, nNumSplitCtrlCtrls, nNumDropDownMenuCtrls, nNumDropDownCtrlCtrls, nNumStackPanelCtrls As Integer,
	i, j, k, l, m, nMenu As Integer,
	arrContextMenuIDs() As Integer,
	arrContextMenuNames() As String,
	sName, sCaption As String,
	nCntrlType As Integer,
	rbnTabItem As This,
	rbnGroupsColl As This,
	rbnGroupItem As This,
	rbnControlsColl As This,
	rbnControlItem As This,
	rbnGalleryGroupsColl As This,
	rbnGalleryGroupItem As This,
	rbnGalleryControlsColl As This,
	rbnGalleryControlItem As This,
	rbnSplitCtrlControlsColl As This,
	rbnSplitCtrlControlItem As This,
	rbnDropDownMenuControlsColl As This,
	rbnDropDownMenuControlItem As This,
	rbnDropDownCtrlControlsColl As This,
	rbnDropDownCtrlControlItem As This,
	rbnStackPanelControlsColl As This,
	rbnStackPanelControlItem As This,
	rbnCntxtMenuItemsColl As This,
	rbnCntxtMenu As This,
	rbnStatusbarControlsColl As This,
	rbnBackStageControlsColl As This,
	rbnBackstageTabItem As This,
	rbnBackstageTabItemColl As This

	'--------------------------------
	Call RBNInitiate

	If FileExists(ApplicationDirectory$() & "Ribbon Elements.txt") Then
		Kill ApplicationDirectory$() & "Ribbon Elements.txt"
	End If

	Open File ApplicationDirectory$() & "Ribbon Elements.txt"
		For Append
		As #369
		CharSet SystemInfo(SYS_INFO_CHARSET)

	nNumTabs = GetRbnTabCollCount(theTabsColl)
'	Call DEBUGPrint("Number of Tabs " & nNumTabs)

	For i = 0 To (nNumTabs - 1)	'**Do note that the collection starts at 0 and not at 1 like normal MapBasic Arrays
		rbnTabItem = GetRbnTabCollItemInt(theTabsColl, i)

		sName	= GetRbnTabName(rbnTabItem)
		sCaption	= GetRbnTabCaption(rbnTabItem)
		Call DEBUGPrint("--------------------------------------------------------------")
		Print #369, "--------------------------------------------------------------"
		Call DEBUGPrint("Tab " & i & " is named '" & sName & "' but shown as '" & sCaption & "'")
		Print #369, "Tab " & i & " is named '" & sName & "' but shown as '" & sCaption & "'"

		rbnGroupsColl = GetRbnTabGrps(rbnTabItem)
		nNumGroups = GetRbnCtrlGrpCollCount(rbnGroupsColl)
'		Call DEBUGPrint("   Number of Tab Groups " & nNumGroups)

		For j = 0 To (nNumGroups - 1)
			rbnGroupItem = GetRbnCtrlGrpCollItemInt(rbnGroupsColl, j)

			sName	= GetRbnCtrlGrpName(rbnGroupItem)
			sCaption	= GetRbnCtrlGrpCaption(rbnGroupItem)
'			Call DEBUGPrint("   Tab Group " & j & " is named '" & sName & "' but shown as '" & sCaption & "'")
			Print #369, "   Tab Group " & j & " is named '" & sName & "' but shown as '" & sCaption & "'"

			rbnControlsColl = GetRbnCtrlGrpCtrls(rbnGroupItem)
			nNumCntrls = GetMICtrlCollCount(rbnControlsColl)
'			Call DEBUGPrint("      Number of Controls " & nNumCntrls)

			For k = 0 To (nNumCntrls - 1)
				rbnControlItem	= GetMICtrlCollItemInt(rbnControlsColl, k)

				nCntrlType	= GetMICtrlCtrlType(rbnControlItem)
				sName		= GetMICtrlName(rbnControlItem)
				sCaption		= GetMICtrlCaption(rbnControlItem)
'				Call DEBUGPrint("      Control " & k & " is named '" & sName & "' but shown as '" & sCaption & "' and Control Type is " & nCntrlType & " (" & RBNControlGetTypeName(nCntrlType) & ")")
				Print #369, "      Control " & k & " is named '" & sName & "' but shown as '" & sCaption & "' and Control Type is " & nCntrlType & " (" & RBNControlGetTypeName(nCntrlType) & ")"

				Do Case nCntrlType
					Case ControlType_GalleryControl
						rbnGalleryGroupsColl = GetRbnGalleryCtrlGrps(rbnControlItem)
						nNumGalleryGroups 	 = GetMIGalleryGrpCollCount(rbnGalleryGroupsColl)
'						Call DEBUGPrint("      Gallery has " & nNumGalleryGroups & " Groups/controls")
						Print #369, "      Gallery has " & nNumGalleryGroups & " Groups/controls"

						For l = 0 To (nNumGalleryGroups - 1)
							rbnGalleryGroupItem		= GetMIGalleryGrpCollItemInt(rbnGalleryGroupsColl, l)

							sName	= GetRbnGalleryGrpName(rbnGalleryGroupItem)
							sCaption	= GetRbnGalleryGrpCaption(rbnGalleryGroupItem)
'							Call DEBUGPrint("      Gallery Group " & l & " is named '" & sName & "' but shown as '" & sCaption & "'")
							Print #369, "      Gallery Group " & l & " is named '" & sName & "' but shown as '" & sCaption & "'"

							rbnGalleryControlsColl	= GetRbnGalleryGrpCtrls(rbnGalleryGroupItem)
							nNumGalleryCtrls		= GetMICtrlCollCount(rbnGalleryControlsColl)

							For m = 0 To (nNumGalleryCtrls - 1)
								rbnGalleryControlItem	= GetMICtrlCollItemInt(rbnGalleryControlsColl, m)

								nCntrlType	= GetMICtrlCtrlType(rbnGalleryControlItem)
								sName		= GetMICtrlName(rbnGalleryControlItem)
								sCaption		= GetMICtrlCaption(rbnGalleryControlItem)
'								Call DEBUGPrint("         Gallery Control " & m & " is named '" & sName & "' but shown as '" & sCaption & "' and Control Type is " & nCntrlType & " (" & RBNControlGetTypeName(nCntrlType) & ")")
								Print #369, "         Gallery Control " & m & " is named '" & sName & "' but shown as '" & sCaption & "' and Control Type is " & nCntrlType & " (" & RBNControlGetTypeName(nCntrlType) & ")"
							Next
						Next

						'GetRbnGalleryCtrlMenuItems - not sure how to work with these yet

					Case ControlType_SplitButton
						rbnSplitCtrlControlsColl	= GetRbnSplitCtrlCtrls(rbnControlItem)
						nNumSplitCtrlCtrls		= GetMICtrlCollCount(rbnSplitCtrlControlsColl)
'						Call DEBUGPrint("      SplitButton has " & nNumSplitCtrlCtrls & " Groups/controls")
						Print #369, "      SplitButton has " & nNumSplitCtrlCtrls & " Groups/controls"

						For l = 0 To (nNumSplitCtrlCtrls - 1)
							rbnSplitCtrlControlItem	= GetMICtrlCollItemInt(rbnSplitCtrlControlsColl, l)

							nCntrlType	= GetMICtrlCtrlType(rbnSplitCtrlControlItem)
							sName		= GetMICtrlName(rbnSplitCtrlControlItem)
							sCaption		= GetMICtrlCaption(rbnSplitCtrlControlItem)
'							Call DEBUGPrint("         SplitButton Control " & l & " is named '" & sName & "' but shown as '" & sCaption & "' and Control Type is " & nCntrlType & " (" & RBNControlGetTypeName(nCntrlType) & ")")
							Print #369, "         SplitButton Control " & l & " is named '" & sName & "' but shown as '" & sCaption & "' and Control Type is " & nCntrlType & " (" & RBNControlGetTypeName(nCntrlType) & ")"

							If nCntrlType In (ControlType_DropDownMenuGroup, ControlType_StackPanel, ControlType_WrapPanel) Then
								rbnDropDownMenuControlsColl	= GetCtrlGrpCtrls(rbnSplitCtrlControlItem)
								nNumDropDownMenuCtrls		= GetMICtrlCollCount(rbnDropDownMenuControlsColl)
'								Call DEBUGPrint("            DropDownMenu Control has " & nNumDropDownMenuCtrls & " Controls")
								Print #369, "            DropDownMenu Control has " & nNumDropDownMenuCtrls & " Controls"

								For m = 0 To (nNumDropDownMenuCtrls - 1)
									rbnDropDownMenuControlItem	= GetMICtrlCollItemInt(rbnDropDownMenuControlsColl, m)

									nCntrlType	= GetMICtrlCtrlType(rbnDropDownMenuControlItem)
									sName		= GetMICtrlName(rbnDropDownMenuControlItem)
									sCaption		= GetMICtrlCaption(rbnDropDownMenuControlItem)
'									Call DEBUGPrint("            DropDownMenu Control " & m & " is named '" & sName & "' but shown as '" & sCaption & "' and Control Type is " & nCntrlType & " (" & RBNControlGetTypeName(nCntrlType) & ")")
									Print #369, "            DropDownMenu Control " & m & " is named '" & sName & "' but shown as '" & sCaption & "' and Control Type is " & nCntrlType & " (" & RBNControlGetTypeName(nCntrlType) & ")"
								Next

							End If
						Next

					Case ControlType_DropDownButton
						rbnDropDownCtrlControlsColl	= GetRbnDropDownCtrlCtrls(rbnControlItem)
						nNumDropDownCtrlCtrls		= GetMICtrlCollCount(rbnDropDownCtrlControlsColl)
'						Call DEBUGPrint("      DropDownButton has " & nNumDropDownCtrlCtrls & " Groups/controls")
						Print #369, "      DropDownButton has " & nNumDropDownCtrlCtrls & " Groups/controls"

						For l = 0 To (nNumDropDownCtrlCtrls - 1)
							rbnDropDownCtrlControlItem	= GetMICtrlCollItemInt(rbnDropDownCtrlControlsColl, l)

							nCntrlType	= GetMICtrlCtrlType(rbnDropDownCtrlControlItem)
							sName		= GetMICtrlName(rbnDropDownCtrlControlItem)
							sCaption		= GetMICtrlCaption(rbnDropDownCtrlControlItem)
'							Call DEBUGPrint("         DropDownButton Control " & l & " is named '" & sName & "' but shown as '" & sCaption & "' and Control Type is " & nCntrlType & " (" & RBNControlGetTypeName(nCntrlType) & ")")
							Print #369, "         DropDownButton Control " & l & " is named '" & sName & "' but shown as '" & sCaption & "' and Control Type is " & nCntrlType & " (" & RBNControlGetTypeName(nCntrlType) & ")"

							If nCntrlType In (ControlType_DropDownMenuGroup, ControlType_StackPanel, ControlType_WrapPanel) Then
								rbnDropDownMenuControlsColl	= GetCtrlGrpCtrls(rbnDropDownCtrlControlItem)
								nNumDropDownMenuCtrls		= GetMICtrlCollCount(rbnDropDownMenuControlsColl)
'								Call DEBUGPrint("            DropDownMenu Control has " & nNumDropDownMenuCtrls & " Controls")
								Print #369, "            DropDownMenu Control has " & nNumDropDownMenuCtrls & " Controls"

								For m = 0 To (nNumDropDownMenuCtrls - 1)
									rbnDropDownMenuControlItem	= GetMICtrlCollItemInt(rbnDropDownMenuControlsColl, m)

									nCntrlType	= GetMICtrlCtrlType(rbnDropDownMenuControlItem)
									sName		= GetMICtrlName(rbnDropDownMenuControlItem)
									sCaption		= GetMICtrlCaption(rbnDropDownMenuControlItem)
'									Call DEBUGPrint("            DropDown Control " & m & " is named '" & sName & "' but shown as '" & sCaption & "' and Control Type is " & nCntrlType & " (" & RBNControlGetTypeName(nCntrlType) & ")")
									Print #369, "            DropDown Control " & m & " is named '" & sName & "' but shown as '" & sCaption & "' and Control Type is " & nCntrlType & " (" & RBNControlGetTypeName(nCntrlType) & ")"
								Next

							End If
						Next

				End Case
			Next
		Next
	Next

	nNumCntrls = GetMICtrlCollCount(theMapMTBControlsColl)
	Call DEBUGPrint("   Map MiniToolBar: Number of Controls " & nNumCntrls)
	Print #369, "--------------------------------------------------------------"
	Print #369, "Map Mini Toolbar"
	Print #369, "   Map Mini ToolBar: Number of Controls " & nNumCntrls
	For i = 0 To (nNumCntrls - 1)
		rbnControlItem	= GetMICtrlCollItemInt(theMapMTBControlsColl, i)

		sName		= GetMICtrlName(rbnControlItem)
		nCntrlType	= GetMICtrlCtrlType(rbnControlItem)
		sCaption		= GetMICtrlCaption(rbnControlItem)
'		Call DEBUGPrint("      Map Mini ToolBar Control " & i & " is named '" & sName & "' but shown as '" & sCaption & "' and Control Type is " & nCntrlType & " (" & RBNControlGetTypeName(nCntrlType) & ")")
		Print #369, "      Map MiniTool Bar Control " & i & " is named '" & sName & "' but shown as '" & sCaption & "' and Control Type is " & nCntrlType & " (" & RBNControlGetTypeName(nCntrlType) & ")"

		If nCntrlType In (ControlType_StackPanel, ControlType_WrapPanel) Then
			rbnStackPanelControlsColl	= GetIStackPanelCtrls(rbnControlItem)
			nNumStackPanelCtrls			= GetMICtrlCollCount(rbnStackPanelControlsColl)

			For l = 0 To (nNumStackPanelCtrls - 1)
				rbnStackPanelControlItem	= GetMICtrlCollItemInt(rbnStackPanelControlsColl, l)

				nCntrlType	= GetMICtrlCtrlType(rbnStackPanelControlItem)
				sName		= GetMICtrlName(rbnStackPanelControlItem)
				sCaption		= GetMICtrlCaption(rbnStackPanelControlItem)
'				Call DEBUGPrint("         StackPanel Control " & l & " is named '" & sName & "' but shown as '" & sCaption & "' and Control Type is " & nCntrlType & " (" & RBNControlGetTypeName(nCntrlType) & ")")
				Print #369, "         Stack-/WrapPanel Control " & l & " is named '" & sName & "' but shown as '" & sCaption & "' and Control Type is " & nCntrlType & " (" & RBNControlGetTypeName(nCntrlType) & ")"
			Next
		End If
	Next

	Call ARRAYAddValueInteger(arrContextMenuIDs, MenuId_MapperShortcut)
	Call ARRAYAddValueString(arrContextMenuNames, "MapperShortcut")
	Call ARRAYAddValueInteger(arrContextMenuIDs, MenuId_BrowserShortcut)
	Call ARRAYAddValueString(arrContextMenuNames, "BrowserShortcut")
'	Call ARRAYAddValueInteger(arrContextMenuIDs, MenuId_LayoutShortcut)
'	Call ARRAYAddValueString(arrContextMenuNames, "LayoutShortcut")
	Call ARRAYAddValueInteger(arrContextMenuIDs, MenuId_RedistrictShortcut)
	Call ARRAYAddValueString(arrContextMenuNames, "RedistrictShortcut")
	Call ARRAYAddValueInteger(arrContextMenuIDs, MenuId_LcLayersShortcut)
	Call ARRAYAddValueString(arrContextMenuNames, "LcLayersShortcut")
	Call ARRAYAddValueInteger(arrContextMenuIDs, MenuId_LcMapsShortcut)
	Call ARRAYAddValueString(arrContextMenuNames, "LcMapsShortcut")
	Call ARRAYAddValueInteger(arrContextMenuIDs, MenuId_LcGroupsShortcut)
	Call ARRAYAddValueString(arrContextMenuNames, "LcGroupsShortcut")
	Call ARRAYAddValueInteger(arrContextMenuIDs, MenuId_TableListTablesShortcut)
	Call ARRAYAddValueString(arrContextMenuNames, "TableListTablesShortcut")
	Call ARRAYAddValueInteger(arrContextMenuIDs, MenuId_DataGridColFilterShortcut)
	Call ARRAYAddValueString(arrContextMenuNames, "DataGridColFilterShortcut")
	Call ARRAYAddValueInteger(arrContextMenuIDs, MenuId_DataGridColFilterSelectShortcut)
	Call ARRAYAddValueString(arrContextMenuNames, "DataGridColFilterSelectShortcut")
	Call ARRAYAddValueInteger(arrContextMenuIDs, MenuId_WindowListShortcut)
	Call ARRAYAddValueString(arrContextMenuNames, "WindowListShortcut")

	Print #369, "--------------------------------------------------------------"
	Print #369, "Context Menus"
	For nMenu = 1 To Ubound(arrContextMenuIDs)
		Call DEBUGPrint("   " & arrContextMenuNames(nMenu) & " Menu")
		rbnCntxtMenu 			= ICntxtMnusGetCntxtMnu(theContextMenus, arrContextMenuIDs(nMenu))
		rbnCntxtMenuItemsColl	= GetICntxtMnuCtrls(rbnCntxtMenu)
		nNumCntrls 			= GetMICtrlCollCount(rbnCntxtMenuItemsColl)
		Call DEBUGPrint("      : Number of Controls " & nNumCntrls)
		Print #369, "   " & arrContextMenuNames(nMenu) & " Menu: Number of Controls " & nNumCntrls
		For i = 0 To (nNumCntrls - 1)
			rbnControlItem	= GetMICtrlCollItemInt(rbnCntxtMenuItemsColl, i)

			sName		= GetMICtrlName(rbnControlItem)
			nCntrlType	= GetMICtrlCtrlType(rbnControlItem)
			sCaption		= GetMICtrlCaption(rbnControlItem)
	'		Call DEBUGPrint("      Map Context Menu Control " & i & " is named '" & sName & "' but shown as '" & sCaption & "' and Control Type is " & nCntrlType & " (" & RBNControlGetTypeName(nCntrlType) & ")")
			Print #369, "      " & arrContextMenuNames(nMenu) & " Menu Control " & i & " is named '" & sName & "' but shown as '" & sCaption & "' and Control Type is " & nCntrlType & " (" & RBNControlGetTypeName(nCntrlType) & ")"
		Next
	Next

	Print #369, "--------------------------------------------------------------"
	Print #369, "Backstage"
	rbnBackStageControlsColl = GetRbnBackStageCtrls(theBackstage)
	nNumCntrls 			= GetMICtrlCollCount(rbnBackStageControlsColl)
	Print #369, "   Backstage: Number of Controls " & nNumCntrls
	For k = 0 To (nNumCntrls - 1)
		rbnControlItem	= GetMICtrlCollItemInt(rbnBackStageControlsColl, k)

		nCntrlType	= GetMICtrlCtrlType(rbnControlItem)
		sName		= GetMICtrlName(rbnControlItem)
		sCaption		= GetMICtrlCaption(rbnControlItem)
		Print #369, "   Backstage Control " & k & " is named '" & sName & "' but shown as '" & sCaption & "' and Control Type is " & nCntrlType & " (" & RBNControlGetTypeName(nCntrlType) & ")"

		If nCntrlType = ControlType_BackStageTabItem Then
			rbnBackstageTabItemColl	= GetCtrlGrpCtrls(rbnControlItem)	'GetIBackStageTabItemCtrls(rbnControlItem)
			nNumGroups			= GetMICtrlCollCount(rbnBackstageTabItemColl)

			Print #369, "      BackstageTab " & k & " has " & nNumGroups & " Control Elements"

			For j = 0 To (nNumGroups - 1)
				rbnBackstageTabItem	= GetMICtrlCollItemInt(rbnBackstageTabItemColl, j)

				nCntrlType	= GetMICtrlCtrlType(rbnBackstageTabItem)
				sName		= GetMICtrlName(rbnBackstageTabItem)
				sCaption		= GetMICtrlCaption(rbnBackstageTabItem)
				Print #369, "      Control " & j & " is named '" & sName & "' but shown as '" & sCaption & "' and Control Type is " & nCntrlType & " (" & RBNControlGetTypeName(nCntrlType) & ")"
			Next
		End If
	Next

	rbnStatusbarControlsColl	= GetIStatusBarCtrls(theStatusbar)
	nNumCntrls 			= GetMICtrlCollCount(rbnStatusbarControlsColl)
'	Call DEBUGPrint("   Statusbar: Number of Controls " & nNumCntrls)
	Print #369, "--------------------------------------------------------------"
	Print #369, "Statusbar"
	Print #369, "   Statusbar: Number of Controls " & nNumCntrls
	For k = 0 To (nNumCntrls - 1)
		rbnControlItem	= GetMICtrlCollItemInt(rbnStatusbarControlsColl, k)

		nCntrlType	= GetMICtrlCtrlType(rbnControlItem)
		sName		= GetMICtrlName(rbnControlItem)
		sCaption		= GetMICtrlCaption(rbnControlItem)
'		Call DEBUGPrint("      Statusbar Control " & k & " is named '" & sName & "' but shown as '" & sCaption & "' and Control Type is " & nCntrlType & " (" & RBNControlGetTypeName(nCntrlType) & ")")
		Print #369, "   Statusbar Control " & k & " is named '" & sName & "' but shown as '" & sCaption & "' and Control Type is " & nCntrlType & " (" & RBNControlGetTypeName(nCntrlType) & ")"
	Next

	Close File #369

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnTabItem 				= NULL_PTR
	rbnGroupsColl				= NULL_PTR
	rbnGroupItem				= NULL_PTR
	rbnControlsColl			= NULL_PTR
	rbnControlItem				= NULL_PTR
	rbnGalleryGroupsColl		= NULL_PTR
	rbnGalleryGroupItem			= NULL_PTR
	rbnGalleryControlsColl		= NULL_PTR
	rbnGalleryControlItem		= NULL_PTR
	rbnSplitCtrlControlsColl		= NULL_PTR
	rbnSplitCtrlControlItem		= NULL_PTR
	rbnDropDownMenuControlsColl	= NULL_PTR
	rbnDropDownMenuControlItem	= NULL_PTR
	rbnDropDownCtrlControlsColl	= NULL_PTR
	rbnDropDownCtrlControlItem	= NULL_PTR
	rbnStackPanelControlsColl	= NULL_PTR
	rbnStackPanelControlItem		= NULL_PTR
	rbnCntxtMenu				= NULL_PTR
	rbnCntxtMenuItemsColl		= NULL_PTR
	rbnStatusbarControlsColl		= NULL_PTR
	rbnBackStageControlsColl		= NULL_PTR
	rbnBackstageTabItemColl		= NULL_PTR
	rbnBackstageTabItem			= NULL_PTR

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNLoop")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNLoopCreateRibbonStatements

OnError GoTo ErrorOccured

Dim	nNumTabs, nNumGroups, nNumCntrls, nNumGalleryGroups, nNumGalleryCtrls, nNumSplitCtrlCtrls, nNumDropDownMenuCtrls, nNumDropDownCtrlCtrls, nNumStackPanelCtrls As Integer,
	i, j, k, l, m As Integer,
	sRbnTabName, sRbnGroupName, sName, sCaption, sKeyTip, sGroupName, sItemName, sImageName, sHandler As String,
	arrControlNames() As String,
	nCntrlType, nImageSize As Integer,
	rbnTabItem As This,
	rbnGroupsColl As This,
	rbnGroupItem As This,
	rbnControlsColl As This,
	rbnControlItem As This,
	rbnGalleryGroupsColl As This,
	rbnGalleryGroupItem As This,
	rbnGalleryControlsColl As This,
	rbnGalleryControlItem As This,
	rbnSplitCtrlControlsColl As This,
	rbnSplitCtrlControlItem As This,
	rbnDropDownMenuControlsColl As This,
	rbnDropDownMenuControlItem As This,
	rbnDropDownCtrlControlsColl As This,
	rbnDropDownCtrlControlItem As This,
	rbnStackPanelControlsColl As This,
	rbnStackPanelControlItem As This,
	rbnStatusbarControlsColl As This

	'--------------------------------
	Call RBNInitiate

'	Call RBInitialControlArrays

	If FileExists(ApplicationDirectory$() & "Ribbon Statements.txt") Then
		Kill ApplicationDirectory$() & "Ribbon Statements.txt"
	End If

	Open File ApplicationDirectory$() & "Ribbon Statements.txt"
		For Append
		As #369
		CharSet SystemInfo(SYS_INFO_CHARSET)

	nNumTabs = GetRbnTabCollCount(theTabsColl)

	For i = 0 To (nNumTabs - 1)	'**Do note that the collection starts at 0 and not at 1 like normal MapBasic Arrays
		rbnTabItem = GetRbnTabCollItemInt(theTabsColl, i)

		sRbnTabName	= GetRbnTabName(rbnTabItem)
		sCaption		= GetRbnTabCaption(rbnTabItem)
		sKeyTip		= GetRbnTabKeyTip(rbnTabItem)
		Print #369, "	'**************************************************************"
		Print #369, "	Call DEBUGPrint(" & eye & sRbnTabName & eye & ")"
		Call DEBUGPrint("Tab " & i & " is named '" & sRbnTabName & "' but shown as '" & sCaption & "'")
		Print #369, "	nCtrlIdx	= RBNAddTab(" & eye & sRbnTabName & eye & ", " & eye & sCaption & eye & ", " & eye & sKeyTip & eye & ")"
'		Print #369, "	If NOT nCtrlIdx > 0 Then"
'		Print #369, "		Exit Sub"
'		Print #369, "	End If	'RBNAddTab"
'		Print #369, ""

		rbnGroupsColl = GetRbnTabGrps(rbnTabItem)
		nNumGroups = GetRbnCtrlGrpCollCount(rbnGroupsColl)
'		Call DEBUGPrint("   Number of Tab Groups " & nNumGroups)

		For j = 0 To (nNumGroups - 1)
			rbnGroupItem = GetRbnCtrlGrpCollItemInt(rbnGroupsColl, j)

			sRbnGroupName	= GetRbnCtrlGrpName(rbnGroupItem)
			sCaption		= GetRbnCtrlGrpCaption(rbnGroupItem)
			Print #369, "	'------------------------------"
			Print #369, "	Call DEBUGPrint(" & eye & "   " & sRbnGroupName & eye & ")"
'			Call DEBUGPrint("   Tab Group " & j & " is named '" & sRbnGroupName & "' but shown as '" & sCaption & "'")
			Print #369, "	nCtrlIdx	= RBNTabAddGroup(" & eye & sRbnGroupName & eye & ", " & eye & sCaption & eye & ", " & eye & sRbnTabName & eye & ")"
'			Print #369, "	If NOT nCtrlIdx > 0 Then"
'			Print #369, "		Exit Sub"
'			Print #369, "	End If	'RBNTabAddGroup"
			Print #369, ""

			rbnControlsColl = GetRbnCtrlGrpCtrls(rbnGroupItem)
			nNumCntrls = GetMICtrlCollCount(rbnControlsColl)
'			Call DEBUGPrint("      Number of Controls " & nNumCntrls)

			For k = 0 To (nNumCntrls - 1)
				rbnControlItem	= GetMICtrlCollItemInt(rbnControlsColl, k)

				nCntrlType	= GetMICtrlCtrlType(rbnControlItem)
				sName		= GetMICtrlName(rbnControlItem)
				sCaption		= GetMICtrlCaption(rbnControlItem)
				sKeyTip		= GetMICtrlKeyTip(rbnControlItem)
				nImageSize	= RBNControlGetSizeThs(rbnControlItem)
				sImageName	= RBNGetImageStringFromControlName(sName)

				Do Case nCntrlType
					Case ControlType_RibbonSeparator
						Print #369, "	nCtrlIdx	= RBNGroupAddControl(" & eye & sName & eye & ", " & eye & sCaption & eye & ", " & eye & sKeyTip & eye
										& ", " & nCntrlType & ", " & eye & sRbnTabName & eye & ", " & eye & sRbnGroupName & eye & ")"
						Print #369, ""

					Case ControlType_Button, ControlType_ToolButton
						Print #369, "	nCtrlIdx	= RBNGroupAddControl(" & eye & sName & eye & ", " & eye & sCaption & eye & ", " & eye & sKeyTip & eye
										& ", " & nCntrlType & ", " & eye & sRbnTabName & eye & ", " & eye & sRbnGroupName & eye & ")"
		'				Print #369, "	If nCtrlIdx > 0 Then"
		'				Print #369, "		'Create & Set the button tooltip"
						Print #369, "	Call RBNControlSetToolTipIdx(nCtrlIdx, " & eye & sCaption & eye & ", " & eye & "Enabled ToolTip" & eye & ", " & eye & "Disabled ToolTip" & eye & ")"
'						Print #369, "		'Set the button icon"
						Print #369, "	Call RBNControlSetIconsIdx(nCtrlIdx, " & nImageSize & ", " & sImageName & "16, " & sImageName & "32)"
'						Print #369, "		'Set Custom MapBasic Handle to the button"

						If nCntrlType = ControlType_Button Then
							sHandler = GetRbnBtnCtrlCallingHandler(rbnControlItem)
						Else
							sHandler = GetRbnToolBtnCtrlCallingHandler(rbnControlItem)
						End If
						If sHandler = "" Then
							Print #369, "	Call RBNControlSetCmdIDIdx(nCtrlIdx, " & RBNGetCommandIDFromControlName(sItemName) & ")"
						Else
							Print #369, "	Call RBNControlSetHandlerIdx(nCtrlIdx, " & eye & sHandler & eye & ")"
						End If
						Print #369, ""

						If NOT ARRAYContainsValueString(arrControlNames, sName) AND sItemName Then
							Call ARRAYAddValueString(arrControlNames, sName)
						End If

					Case ControlType_GalleryControl
'						Print #369, "	nCtrlIdx	= RBNGroupAddControl(" & eye & sName & eye & ", " & eye & sCaption & eye & ", " & eye & sKeyTip & eye
'										& ", " & nCntrlType & ", " & eye & sRbnTabName & eye & ", " & eye & sRbnGroupName & eye & ")"
		'				Print #369, "	If nCtrlIdx > 0 Then"
		'				Print #369, "		'Create & Set the button tooltip"
'						Print #369, "		Call RBNControlSetToolTipIdx(nCtrlIdx, " & eye & sCaption & eye & ", " & eye & "Enabled ToolTip" & eye & ", " & eye & "Disabled ToolTip" & eye & ")"

						rbnGalleryGroupsColl = GetRbnGalleryCtrlGrps(rbnControlItem)
						nNumGalleryGroups 	 = GetMIGalleryGrpCollCount(rbnGalleryGroupsColl)

						For l = 0 To (nNumGalleryGroups - 1)
							rbnGalleryGroupItem		= GetMIGalleryGrpCollItemInt(rbnGalleryGroupsColl, l)

							sGroupName	= GetRbnGalleryGrpName(rbnGalleryGroupItem)
							sCaption	= GetRbnGalleryGrpCaption(rbnGalleryGroupItem)
							'Print #369, "		'Create the Gallery Group"
							'Print #369, "		'Not yet Supported"

							rbnGalleryControlsColl	= GetRbnGalleryGrpCtrls(rbnGalleryGroupItem)
							nNumGalleryCtrls		= GetMICtrlCollCount(rbnGalleryControlsColl)

							For m = 0 To (nNumGalleryCtrls - 1)
								rbnGalleryControlItem	= GetMICtrlCollItemInt(rbnGalleryControlsColl, m)

								nCntrlType	= GetMICtrlCtrlType(rbnGalleryControlItem)
								sItemName		= GetMICtrlName(rbnGalleryControlItem)
								sCaption		= GetMICtrlCaption(rbnGalleryControlItem)
								sKeyTip		= GetMICtrlKeyTip(rbnGalleryControlItem)
								nImageSize	= RBNControlGetSizeThs(rbnGalleryControlItem)
								sImageName	= RBNGetImageStringFromControlName(sItemName)

								nCntrlType	= ControlType_Button	'Need to change them to a different type as Gallery Items can't be place in a group

'								Print #369, "			'Create the SplitButton Group Controls"
								Print #369, "	nCtrlIdx	= RBNGroupAddControl(" & eye & sItemName & eye & ", " & eye & sCaption & eye & ", " & eye & sKeyTip & eye
														& ", " & nCntrlType & ", " & eye & sRbnTabName & eye & ", " & eye & sRbnGroupName & eye & ")"
'								Print #369, "			If nCtrlIdx > 0 Then"
'								Print #369, "				'Create & Set the button tooltip"
								Print #369, "	Call RBNControlSetToolTipIdx(nCtrlIdx, " & eye & sCaption & eye & ", " & eye & "Enabled ToolTip" & eye & ", " & eye & "Disabled ToolTip" & eye & ")"
'								Print #369, "				'Set the button icon"
								Print #369, "	Call RBNControlSetIconsIdx(nCtrlIdx, " & nImageSize & ", " & sImageName & "16, " & sImageName & "32)"
'								Print #369, "				'Set Custom MapBasic Handle to the button"
								Print #369, "	Call RBNControlSetCmdIDIdx(nCtrlIdx, " & RBNGetCommandIDFromControlName(sItemName) & ")"
'								Print #369, "			End If	'RBNSplitButtonGroupAddControl"

								If NOT ARRAYContainsValueString(arrControlNames, sItemName) AND sItemName Then
									Call ARRAYAddValueString(arrControlNames, sItemName)
								End If
							Next
						Next

						'GetRbnGalleryCtrlMenuItems - not sure how to work with these yet
						'Right now we just add the controls from the Gallery to the Ribbon Group directly
						Print #369, ""

					Case ControlType_SplitButton
						Print #369, "	nCtrlIdx	= RBNGroupAddControl(" & eye & sName & eye & ", " & eye & sCaption & eye & ", " & eye & sKeyTip & eye
										& ", " & nCntrlType & ", " & eye & sRbnTabName & eye & ", " & eye & sRbnGroupName & eye & ")"
		'				Print #369, "	If nCtrlIdx > 0 Then"
		'				Print #369, "		'Create & Set the button tooltip"
						Print #369, "	Call RBNControlSetToolTipIdx(nCtrlIdx, " & eye & sCaption & eye & ", " & eye & "Enabled ToolTip" & eye & ", " & eye & "Disabled ToolTip" & eye & ")"

						rbnSplitCtrlControlsColl	= GetRbnSplitCtrlCtrls(rbnControlItem)
						nNumSplitCtrlCtrls		= GetMICtrlCollCount(rbnSplitCtrlControlsColl)

						For l = 0 To (nNumSplitCtrlCtrls - 1)
							rbnSplitCtrlControlItem	= GetMICtrlCollItemInt(rbnSplitCtrlControlsColl, l)

							nCntrlType	= GetMICtrlCtrlType(rbnSplitCtrlControlItem)
							sKeyTip		= GetMICtrlKeyTip(rbnControlItem)
							sGroupName	= GetMICtrlName(rbnSplitCtrlControlItem)
							sCaption		= GetMICtrlCaption(rbnSplitCtrlControlItem)
'							Print #369, "		'Create the SplitButton Group"
							Print #369, "	nCtrlIdx	= RBNSplitButtonAddGroup(" & eye & sGroupName & eye & ", " & eye & sCaption & eye
												& ", " & eye & sRbnTabName & eye & ", " & eye & sRbnGroupName & eye & ", " & eye & sName & eye & ")"
'							Print #369, "		If nCtrlIdx > 0 Then"

							If nCntrlType In (ControlType_DropDownMenuGroup, ControlType_StackPanel, ControlType_WrapPanel) Then
								rbnDropDownMenuControlsColl	= GetCtrlGrpCtrls(rbnSplitCtrlControlItem)
								nNumDropDownMenuCtrls		= GetMICtrlCollCount(rbnDropDownMenuControlsColl)

								For m = 0 To (nNumDropDownMenuCtrls - 1)
									rbnDropDownMenuControlItem	= GetMICtrlCollItemInt(rbnDropDownMenuControlsColl, m)

									nCntrlType	= GetMICtrlCtrlType(rbnDropDownMenuControlItem)
									sKeyTip		= GetMICtrlKeyTip(rbnControlItem)
									sItemName		= GetMICtrlName(rbnDropDownMenuControlItem)
									sCaption		= GetMICtrlCaption(rbnDropDownMenuControlItem)
									nImageSize	= RBNControlGetSizeThs(rbnDropDownMenuControlItem)
									sImageName	= RBNGetImageStringFromControlName(sItemName)

'									Print #369, "			'Create the SplitButton Group Controls"
									Print #369, "	nCtrlIdx	= RBNSplitButtonGroupAddControl(" & eye & sItemName & eye & ", " & eye & sCaption & eye & ", " & eye & sKeyTip & eye
															& ", " & nCntrlType & ", " & eye & sRbnTabName & eye & ", " & eye & sRbnGroupName & eye
															& ", " & eye & sName & eye & ", " & eye & sGroupName & eye & ")"
'									Print #369, "			If nCtrlIdx > 0 Then"
'									Print #369, "				'Create & Set the button tooltip"
									Print #369, "	Call RBNControlSetToolTipIdx(nCtrlIdx, " & eye & sCaption & eye & ", " & eye & "Enabled ToolTip" & eye & ", " & eye & "Disabled ToolTip" & eye & ")"
'									Print #369, "				'Set the button icon"
									Print #369, "	Call RBNControlSetIconsIdx(nCtrlIdx, " & nImageSize & ", " & sImageName & "16, " & sImageName & "32)"
'									Print #369, "				'Set Custom MapBasic Handle to the button"
									Print #369, "	Call RBNControlSetCmdIDIdx(nCtrlIdx, " & RBNGetCommandIDFromControlName(sItemName) & ")"
'									Print #369, "			End If	'RBNSplitButtonGroupAddControl"

									If NOT ARRAYContainsValueString(arrControlNames, sItemName) AND sItemName Then
										Call ARRAYAddValueString(arrControlNames, sItemName)
									End If
								Next

							End If
'							Print #369, "		End If	'RBNSplitButtonAddGroup"
							Print #369, ""
						Next

					Case ControlType_DropDownButton
						Print #369, "	nCtrlIdx	= RBNGroupAddControl(" & eye & sName & eye & ", " & eye & sCaption & eye & ", " & eye & sKeyTip & eye
										& ", " & nCntrlType & ", " & eye & sRbnTabName & eye & ", " & eye & sRbnGroupName & eye & ")"
		'				Print #369, "	If nCtrlIdx > 0 Then"
		'				Print #369, "		'Create & Set the button tooltip"
						Print #369, "	Call RBNControlSetToolTipIdx(nCtrlIdx, " & eye & sCaption & eye & ", " & eye & "Enabled ToolTip" & eye & ", " & eye & "Disabled ToolTip" & eye & ")"

						rbnDropDownCtrlControlsColl	= GetRbnDropDownCtrlCtrls(rbnControlItem)
						nNumDropDownCtrlCtrls		= GetMICtrlCollCount(rbnDropDownCtrlControlsColl)

						For l = 0 To (nNumDropDownCtrlCtrls - 1)
							rbnDropDownCtrlControlItem	= GetMICtrlCollItemInt(rbnDropDownCtrlControlsColl, l)

							nCntrlType	= GetMICtrlCtrlType(rbnDropDownCtrlControlItem)
							sKeyTip		= GetMICtrlKeyTip(rbnControlItem)
							sGroupName	= GetMICtrlName(rbnDropDownCtrlControlItem)
							sCaption		= GetMICtrlCaption(rbnDropDownCtrlControlItem)
							sKeyTip		= GetMICtrlKeyTip(rbnDropDownCtrlControlItem)
'							Print #369, "		'Create the DropDownButton Group"
							Print #369, "	nCtrlIdx	= RBNDropDButtonAddGroup(" & eye & sGroupName & eye & ", " & eye & sCaption & eye
												& ", " & eye & sRbnTabName & eye & ", " & eye & sRbnGroupName & eye & ", " & eye & sName & eye & ")"
'							Print #369, "		If nCtrlIdx > 0 Then"

							If nCntrlType In (ControlType_DropDownMenuGroup, ControlType_StackPanel, ControlType_WrapPanel) Then
								rbnDropDownMenuControlsColl	= GetCtrlGrpCtrls(rbnDropDownCtrlControlItem)
								nNumDropDownMenuCtrls		= GetMICtrlCollCount(rbnDropDownMenuControlsColl)

								For m = 0 To (nNumDropDownMenuCtrls - 1)
									rbnDropDownMenuControlItem	= GetMICtrlCollItemInt(rbnDropDownMenuControlsColl, m)

									nCntrlType	= GetMICtrlCtrlType(rbnDropDownMenuControlItem)
									sKeyTip		= GetMICtrlKeyTip(rbnControlItem)
									sItemName		= GetMICtrlName(rbnDropDownMenuControlItem)
									sCaption		= GetMICtrlCaption(rbnDropDownMenuControlItem)
									sKeyTip		= GetMICtrlKeyTip(rbnDropDownCtrlControlItem)
									nImageSize	= RBNControlGetSizeThs(rbnDropDownCtrlControlItem)
									sImageName	= RBNGetImageStringFromControlName(sItemName)

'									Print #369, "			'Create the DropDownButton Group Controls"
									Print #369, "	nCtrlIdx	= RBNDropDButtonGroupAddControl(" & eye & sItemName & eye & ", " & eye & sCaption & eye & ", " & eye & sKeyTip & eye
															& ", " & nCntrlType & ", " & eye & sRbnTabName & eye & ", " & eye & sRbnGroupName & eye
															& ", " & eye & sName & eye & ", " & eye & sGroupName & eye & ")"
'									Print #369, "			If nCtrlIdx > 0 Then"
'									Print #369, "				'Create & Set the button tooltip"
									Print #369, "	Call RBNControlSetToolTipIdx(nCtrlIdx, " & eye & sCaption & eye & ", " & eye & "Enabled ToolTip" & eye & ", " & eye & "Disabled ToolTip" & eye & ")"
'									Print #369, "				'Set the button icon"
									Print #369, "	Call RBNControlSetIconsIdx(nCtrlIdx, " & nImageSize & ", " & sImageName & "16, " & sImageName & "32)"
'									Print #369, "				'Set Custom MapBasic Handle to the button"
									Print #369, "	Call RBNControlSetCmdIDIdx(nCtrlIdx, " & RBNGetCommandIDFromControlName(sItemName) & ")"
'									Print #369, "			End If	'RBNDropDButtonGroupAddControl"

									If NOT ARRAYContainsValueString(arrControlNames, sItemName) AND sItemName Then
										Call ARRAYAddValueString(arrControlNames, sItemName)
									End If
								Next

							End If
'							Print #369, "		End If	'RBNDropDButtonAddGroup"
							Print #369, ""
						Next

					Case Else
						Print #369, "   Print " & eye & "ControlType " & nCntrlType & " understøttes ikke: " & sName & " " & sCaption & eye
				End Case

'				Print #369, "	End If	'RBNGroupAddControl"
'				Print #369, ""
			Next
		Next
	Next

'	nNumCntrls = GetMICtrlCollCount(theMapMTBControlsColl)
'	Call DEBUGPrint("   Map MiniToolBar: Number of Controls " & nNumCntrls)
'	Print #369, "   Map MiniToolBar: Number of Controls " & nNumCntrls
'	For i = 0 To (nNumCntrls - 1)
'		rbnControlItem	= GetMICtrlCollItemInt(theMapMTBControlsColl, i)
'
'		sName		= GetMICtrlName(rbnControlItem)
'		nCntrlType	= GetMICtrlCtrlType(rbnControlItem)
'		sCaption		= GetMICtrlCaption(rbnControlItem)
''		Call DEBUGPrint("      MiniToolBar Control " & i & " is named '" & sName & "' but shown as '" & sCaption & "' and Control Type is " & nCntrlType & " (" & RBNControlGetTypeName(nCntrlType) & ")")
'		Print #369, "      MiniToolBar Control " & i & " is named '" & sName & "' but shown as '" & sCaption & "' and Control Type is " & nCntrlType & " (" & RBNControlGetTypeName(nCntrlType) & ")"
'
'		If nCntrlType = ControlType_StackPanel Then
'			rbnStackPanelControlsColl	= GetIStackPanelCtrls(rbnControlItem)
'			nNumStackPanelCtrls			= GetMICtrlCollCount(rbnStackPanelControlsColl)
'
'			For l = 0 To (nNumStackPanelCtrls - 1)
'				rbnStackPanelControlItem	= GetMICtrlCollItemInt(rbnStackPanelControlsColl, l)
'
'				nCntrlType	= GetMICtrlCtrlType(rbnStackPanelControlItem)
'				sName		= GetMICtrlName(rbnStackPanelControlItem)
'				sCaption		= GetMICtrlCaption(rbnStackPanelControlItem)
''				Call DEBUGPrint("         StackPanel Control " & l & " is named '" & sName & "' but shown as '" & sCaption & "' and Control Type is " & nCntrlType & " (" & RBNControlGetTypeName(nCntrlType) & ")")
'				Print #369, "         StackPanel Control " & l & " is named '" & sName & "' but shown as '" & sCaption & "' and Control Type is " & nCntrlType & " (" & RBNControlGetTypeName(nCntrlType) & ")"
'			Next
'		End If
'
'	Next

'	rbnStatusbarControlsColl	= GetIStatusBarCtrls(theStatusbar)
'	nNumCntrls 			= GetMICtrlCollCount(rbnStatusbarControlsColl)
''	Call DEBUGPrint("   Statusbar: Number of Controls " & nNumCntrls)
'	Print #369, "   Statusbar: Number of Controls " & nNumCntrls
'	For k = 0 To (nNumCntrls - 1)
'		rbnControlItem	= GetMICtrlCollItemInt(rbnStatusbarControlsColl, k)
'
'		nCntrlType	= GetMICtrlCtrlType(rbnControlItem)
'		sName		= GetMICtrlName(rbnControlItem)
'		sCaption		= GetMICtrlCaption(rbnControlItem)
''		Call DEBUGPrint("      Statusbar Control " & k & " is named '" & sName & "' but shown as '" & sCaption & "' and Control Type is " & nCntrlType & " (" & RBNControlGetTypeName(nCntrlType) & ")")
'		Print #369, "      Statusbar Control " & k & " is named '" & sName & "' but shown as '" & sCaption & "' and Control Type is " & nCntrlType & " (" & RBNControlGetTypeName(nCntrlType) & ")"
'	Next

	Print #369, "'-----------------------------------------------'"
	Print #369, "Dim i As Integer"
	Print #369, "	Redim marrControlName(" & Ubound(arrControlNames) & ")"
	Print #369, "	Redim marrImageString(" & Ubound(arrControlNames) & ")"
	Print #369, "	Redim marrCommandID(" & Ubound(arrControlNames) & ")"
	For i = 1 To Ubound(arrControlNames)
		Print #369, "	i = i + 1"
		Print #369, "	marrControlName(i)	= " & eye & arrControlNames(i) & eye
		Print #369, "	marrImageName(i)	= " & eye & RBNGetImageStringFromControlName(arrControlNames(i)) & eye
		Print #369, "	marrCommandID(i)	= " & eye & RBNGetCommandIDFromControlName(arrControlNames(i)) & eye
	Next
	Close File #369

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnTabItem 				= NULL_PTR
	rbnGroupsColl				= NULL_PTR
	rbnGroupItem				= NULL_PTR
	rbnControlsColl			= NULL_PTR
	rbnControlItem				= NULL_PTR
	rbnGalleryGroupsColl		= NULL_PTR
	rbnGalleryGroupItem			= NULL_PTR
	rbnGalleryControlsColl		= NULL_PTR
	rbnGalleryControlItem		= NULL_PTR
	rbnSplitCtrlControlsColl		= NULL_PTR
	rbnSplitCtrlControlItem		= NULL_PTR
	rbnDropDownMenuControlsColl	= NULL_PTR
	rbnDropDownMenuControlItem	= NULL_PTR
	rbnDropDownCtrlControlsColl	= NULL_PTR
	rbnDropDownCtrlControlItem	= NULL_PTR
	rbnStackPanelControlsColl	= NULL_PTR
	rbnStackPanelControlItem		= NULL_PTR
	rbnStatusbarControlsColl		= NULL_PTR

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNLoop")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
'Sub RBInitialControlArrays
'
'Dim	i As Integer
'
'OnError GoTo ErrorOccured
'
'	Redim marrControlName(230)
'	Redim marrImageName(230)
'	Redim marrCommandID(230)
'	i = i + 1
'	marrControlName(i)	= "FileOpenWorkspaceButton"
'	marrImageName(i)	= "MI_IMG_APP_OPENWORKSPACE_"
'	marrCommandID(i)	= "M_FILE_OPEN"
'	i = i + 1
'	marrControlName(i)	= "FileAddWorkspaceButton"
'	marrImageName(i)	= "MI_IMG_APP_INSERTWORKSPACE_"
'	marrCommandID(i)	= "M_FILE_ADD_WORKSPACE"
'	i = i + 1
'	marrControlName(i)	= "FileOpenTableButton"
'	marrImageName(i)	= "MI_IMG_MAP_OPENTABLE_"
'	marrCommandID(i)	= "M_FILE_OPEN"
'	i = i + 1
'	marrControlName(i)	= "FileImportButton"
'	marrImageName(i)	= "MI_IMG_APP_IMPORT_"
'	marrCommandID(i)	= "M_TABLE_IMPORT"
'	i = i + 1
'	marrControlName(i)	= "FileUniversalDataButton"
'	marrImageName(i)	= "MI_IMG_APP_OPENUNIVERSAL_"
'	marrCommandID(i)	= "M_FILE_OPEN_UNIVERSAL_DATA"
'	i = i + 1
'	marrControlName(i)	= "FileDatabaseTableButton"
'	marrImageName(i)	= "MI_IMG_APP_OPENDBMS_"
'	marrCommandID(i)	= "M_DBMS_OPEN_ODBC"
'	i = i + 1
'	marrControlName(i)	= "RunMapBasicButton"
'	marrImageName(i)	= "MI_IMG_APP_RUNMAPBASIC_"
'	marrCommandID(i)	= "M_TOOLS_RUN"
'	i = i + 1
'	marrControlName(i)	= "AddBasemapAerialButton"
'	marrImageName(i)	= "MI_IMG_MAP_BASEMAPAERIAL_"
'	marrCommandID(i)	= "M_FILE_OPEN_BING_AERIAL"
'	i = i + 1
'	marrControlName(i)	= "AddBasemapRoadsButton"
'	marrImageName(i)	= "MI_IMG_MAP_BASEMAPROADS_"
'	marrCommandID(i)	= "M_FILE_OPEN_BING_ROADS"
'	i = i + 1
'	marrControlName(i)	= "AddBasemapHybridButton"
'	marrImageName(i)	= "MI_IMG_MAP_BASEMAPHYBRID_"
'	marrCommandID(i)	= "M_FILE_OPEN_BING_HYBRID"
'	i = i + 1
'	marrControlName(i)	= "OpenWmsButton"
'	marrImageName(i)	= "MI_IMG_APP_OPENWMS_"
'	marrCommandID(i)	= "M_FILE_OPEN_WMS"
'	i = i + 1
'	marrControlName(i)	= "OpenWfsButton"
'	marrImageName(i)	= "MI_IMG_APP_OPENWFS_"
'	marrCommandID(i)	= "M_FILE_OPEN_WFS"
'	i = i + 1
'	marrControlName(i)	= "SaveWorkspaceButton"
'	marrImageName(i)	= "MI_IMG_APP_SAVEWORKSPACE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SaveWorkspaceAsButton"
'	marrImageName(i)	= "MI_IMG_APP_SAVEWORKSPACEAS_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SaveTableButton"
'	marrImageName(i)	= "MI_IMG_TAB_SAVETABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SaveCopyAsButton"
'	marrImageName(i)	= "MI_IMG_TAB_SAVECOPYAS_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "CloseConnectionButton"
'	marrImageName(i)	= "MI_IMG_APP_CLOSECONNECTION_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "CloseTableButton"
'	marrImageName(i)	= "MI_IMG_TAB_CLOSETABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "CloseAllButton"
'	marrImageName(i)	= "MI_IMG_APP_CLOSEALL_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "CopyButton"
'	marrImageName(i)	= "MI_IMG_MAP_COPY_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "PasteButton"
'	marrImageName(i)	= "MI_IMG_MAP_PASTE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "CutButton"
'	marrImageName(i)	= "MI_IMG_MAP_CUT_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "UndoButton"
'	marrImageName(i)	= "MI_IMG_MAP_UNDO_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "PrintButton"
'	marrImageName(i)	= "MI_IMG_APP_PRINT_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "PdfButton"
'	marrImageName(i)	= "MI_IMG_APP_PRINTTOPDF_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "ExportImgButton"
'	marrImageName(i)	= "MI_IMG_WIN_EXPORTIMAGE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "PageSetupButton"
'	marrImageName(i)	= "MI_IMG_APP_OPTPRINTERDEFTS_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "NewBrowserButton"
'	marrImageName(i)	= "MI_IMG_LAY_NEWBROWSER_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "TableSaveButton"
'	marrImageName(i)	= "MI_IMG_TAB_SAVETABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SaveQueryButton"
'	marrImageName(i)	= "MI_IMG_TAB_SAVEQUERY_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "TableSaveCopyAsButton"
'	marrImageName(i)	= "MI_IMG_TAB_SAVECOPYAS_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "RevertTableButton"
'	marrImageName(i)	= "MI_IMG_TAB_REVERTTABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "TableCloseButton"
'	marrImageName(i)	= "MI_IMG_TAB_CLOSETABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "NewTableButton"
'	marrImageName(i)	= "MI_IMG_TAB_NEWTABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "ExportButton"
'	marrImageName(i)	= "MI_IMG_TAB_EXPORTTABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SelectButton"
'	marrImageName(i)	= "MI_IMG_MAP_SELECT_"
'	marrCommandID(i)	= "M_TOOLS_SELECTOR"
'	i = i + 1
'	marrControlName(i)	= "SqlSelectButton"
'	marrImageName(i)	= "MI_IMG_MAP_SQLSELECT_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SelectionInvertSelectButton"
'	marrImageName(i)	= "MI_IMG_MAP_INVERT_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SelectionClearButton"
'	marrImageName(i)	= "MI_IMG_MAP_CLEAR_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "FindSelectionButton"
'	marrImageName(i)	= "MI_IMG_TAB_FINDMAPSELECTION_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "FindAddressButton"
'	marrImageName(i)	= "MI_IMG_MAP_FINDADDRESS_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "FindAndMarkButton"
'	marrImageName(i)	= "MI_IMG_MAP_FINDANDMARK_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "UpdateColumnButton"
'	marrImageName(i)	= "MI_IMG_TAB_UPDATECOLUMN_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "AppendRowButton"
'	marrImageName(i)	= "MI_IMG_TAB_APPENDROWS_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "AddNewRowButton"
'	marrImageName(i)	= "MI_IMG_TAB_ADDNEWROW_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "TableClearMapObjectsButton"
'	marrImageName(i)	= "MI_IMG_APP_OPENTABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "InfoToolButton"
'	marrImageName(i)	= "MI_IMG_MAP_INFOTOOL_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "HotLinkButton"
'	marrImageName(i)	= "MI_IMG_TAB_HOTLINK_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "HotLinkOptionsButton"
'	marrImageName(i)	= "MI_IMG_MAP_HOTLINKOPTIONS_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "PickFieldsButton"
'	marrImageName(i)	= "MI_IMG_TAB_PICKFIELDS_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "BrowserFontButton"
'	marrImageName(i)	= "MI_IMG_TAB_BROWSERFONT_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "ShowGridLinesToggleButton"
'	marrImageName(i)	= "MI_IMG_TAB_SHOWGRIDLINES_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "FilterButton"
'	marrImageName(i)	= "MI_IMG_TAB_FILTER_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "ClearFilterButton"
'	marrImageName(i)	= "MI_IMG_TAB_CLEARFILTER_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "MultiColumnSortButton"
'	marrImageName(i)	= "MI_IMG_TAB_SORTMULTICOLUMN_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SortAscendingButton"
'	marrImageName(i)	= "MI_IMG_TAB_SORTASCENDING_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SortDescendingButton"
'	marrImageName(i)	= "MI_IMG_TAB_SORTDESCENDING_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "ClearSortButton"
'	marrImageName(i)	= "MI_IMG_TAB_CLEARSORTFILTER_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "ClearAllSortButton"
'	marrImageName(i)	= "MI_IMG_TAB_SORTCLEARSORT_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "ToggleSortButton"
'	marrImageName(i)	= "MI_IMG_TAB_SORT_ONOFF_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "ReApplySortButton"
'	marrImageName(i)	= "MI_IMG_TAB_RESORT_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "AddtoMapButton"
'	marrImageName(i)	= "MI_IMG_TAB_ADDTOMAP_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "TableModifyStructureButton"
'	marrImageName(i)	= "MI_IMG_TAB_MODIFYSTRUCTURE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "TablePackButton"
'	marrImageName(i)	= "MI_IMG_TAB_PACKTABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "TableDeleteButton"
'	marrImageName(i)	= "MI_IMG_TAB_DELETETABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "TableRenameButton"
'	marrImageName(i)	= "MI_IMG_TAB_RENAMETABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "DatabaseMakeMappableButton"
'	marrImageName(i)	= "MI_IMG_APP_MAKEDBMSTABMPPBL_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "DatabaseChangeTableSymbolButton"
'	marrImageName(i)	= "MI_IMG_APP_CHANGEDBMSTABSYM_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "DatabaseUnlinkTableButton"
'	marrImageName(i)	= "MI_IMG_APP_UNLINKDBMSTABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "DatabaseRefreshDbmsTableButton"
'	marrImageName(i)	= "MI_IMG_APP_REFRESHDBMSTABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "CreateOracleWorkspaceButton"
'	marrImageName(i)	= "MI_IMG_ORA_CREATEORACLEWOR_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "DeleteOracleWorkspaceButton"
'	marrImageName(i)	= "MI_IMG_ORA_DELETEORACLEWOR_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "MergeOracleTableButton"
'	marrImageName(i)	= "MI_IMG_ORA_MERGEORACLETABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "RefreshOracleTableButton"
'	marrImageName(i)	= "MI_IMG_ORA_REFRESHORACLETAB_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "EnableOracleVersioningButton"
'	marrImageName(i)	= "MI_IMG_ORA_ENABLEORACLEVERS_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "DisableOracleVersioningButton"
'	marrImageName(i)	= "MI_IMG_ORA_DISABLEORACLEVERS_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "AddToLibraryButton"
'	marrImageName(i)	= "MI_IMG_TAB_ADDTOLIBRARY_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "ViewEditMetadataButton"
'	marrImageName(i)	= "MI_IMG_TAB_VIEWEDITMETADATA_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "RasterImageStyleButton"
'	marrImageName(i)	= "MI_IMG_TAB_RASTERIMAGESTYLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "RasterRegStyleButton"
'	marrImageName(i)	= "MI_IMG_TAB_RASTERREGISTR_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SeparatorRasterTable"
'	marrImageName(i)	= "MI_IMG_APP_OPENTABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "RasterAddControlPtsButton"
'	marrImageName(i)	= "MI_IMG_TAB_RASTERCONTROLPNT_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "WfsPropertiesButton"
'	marrImageName(i)	= "MI_IMG_APP_OPENTABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "WfsRefreshButton"
'	marrImageName(i)	= "MI_IMG_APP_OPENTABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SeparatorWebService"
'	marrImageName(i)	= "MI_IMG_APP_OPENTABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "WmsPropertiesButton"
'	marrImageName(i)	= "MI_IMG_APP_OPENTABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "NewMapButton"
'	marrImageName(i)	= "MI_IMG_LAY_NEWMAP_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "MapExplorerControlButton"
'	marrImageName(i)	= "MI_IMG_WIN_WOREXPLORERWIN_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "MapAddLayersButton"
'	marrImageName(i)	= "MI_IMG_MAP_ADDLAYER_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "MapAddThematicButton"
'	marrImageName(i)	= "MI_IMG_MAP_ADDTHEME_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "MapCreateLegendDesignerButton"
'	marrImageName(i)	= "MI_IMG_LAY_INSERTLEGEND_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "RadiusSelectButton"
'	marrImageName(i)	= "MI_IMG_MAP_AREASELECT_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "MaqueeSelectButton"
'	marrImageName(i)	= "MI_IMG_LAY_MARQUEESELECT_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "RegionSelectButton"
'	marrImageName(i)	= "MI_IMG_MAP_POLYGONSELECT_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "BoundarySelectButton"
'	marrImageName(i)	= "MI_IMG_MAP_BOUNDARYSELECT_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "MapSelectionSqlSelectButton"
'	marrImageName(i)	= "MI_IMG_MAP_SQLSELECT_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "MapSelectionInvertSelectButton"
'	marrImageName(i)	= "MI_IMG_MAP_INVERT_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "MapSelectionClearButton"
'	marrImageName(i)	= "MI_IMG_MAP_CLEAR_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "PanButton"
'	marrImageName(i)	= "MI_IMG_MAP_PAN_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "ZoomInButton"
'	marrImageName(i)	= "MI_IMG_MAP_ZOOMIN_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "ZoomOutButton"
'	marrImageName(i)	= "MI_IMG_MAP_ZOOMOUT_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "ZoomToSelectionLayerButton"
'	marrImageName(i)	= "MI_IMG_MAP_ZOOMENTIRESELLYR_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "ZoomToSelectedObjectsButton"
'	marrImageName(i)	= "MI_IMG_MAP_ZOOMTOEXTENTSEL_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "ZoomToLayerButton"
'	marrImageName(i)	= "MI_IMG_MAP_ZOOMTOENTIRELAYER_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "ZoomToEntireMapButton"
'	marrImageName(i)	= "MI_IMG_MAP_ZOOMTOENTIREMAP_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "ZoomToNearestTileServerLevelButton"
'	marrImageName(i)	= "MI_IMG_MAP_ZOOMNRSTTLSRVRLVL_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "MoveMapToButton"
'	marrImageName(i)	= "MI_IMG_MAP_MOVETO_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "PreviousViewButton"
'	marrImageName(i)	= "MI_IMG_TAB_PREV_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "LabelToolButton"
'	marrImageName(i)	= "MI_IMG_MAP_LABELTOOL_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SelectableLabelButton"
'	marrImageName(i)	= "MI_IMG_MAP_SELECTABLELABELS_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "ClearCustomLabelButton"
'	marrImageName(i)	= "MI_IMG_MAP_CLEARCUSTOMLABELS_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "LabelPriorityButton"
'	marrImageName(i)	= "MI_IMG_MAP_LABELPRIORITY_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "DragMapButton"
'	marrImageName(i)	= "MI_IMG_MAP_DRAGMAP_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "StatsWindowButton"
'	marrImageName(i)	= "MI_IMG_MAP_STATSWINDOW_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "NewRedistricterWindowButton"
'	marrImageName(i)	= "MI_IMG_MAP_REDISTRICTER_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SetTargetButton"
'	marrImageName(i)	= "MI_IMG_MAP_REDISTRSETTARGET_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "AssignDistrictButton"
'	marrImageName(i)	= "MI_IMG_MAP_REDISTRASSIGN_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "AddDistrictButton"
'	marrImageName(i)	= "MI_IMG_MAP_REDISTRICTERADD_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "ResdistrictorItemSeparator"
'	marrImageName(i)	= "MI_IMG_APP_OPENTABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "DeleteDistrictButton"
'	marrImageName(i)	= "MI_IMG_MAP_REDISTRDELETE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "RedistricterOptionsButton"
'	marrImageName(i)	= "MI_IMG_MAP_REDISTRICTEROPTS_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "MeasureButton"
'	marrImageName(i)	= "MI_IMG_LAY_RULER_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "MapOptionsButton"
'	marrImageName(i)	= "MI_IMG_MAP_MAPOPTIONS_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "MapHotlinkOptionsButton"
'	marrImageName(i)	= "MI_IMG_MAP_HOTLINKOPTIONS_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "LockScaleButton"
'	marrImageName(i)	= "MI_IMG_MAP_LOCKSCALE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "CreateScaleBarButton"
'	marrImageName(i)	= "MI_IMG_MAP_SCALEBAR_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "MapRedrawButton"
'	marrImageName(i)	= "MI_IMG_WIN_REDRAWWINDOWS_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "ClipboardCopyButton"
'	marrImageName(i)	= "MI_IMG_MAP_COPY_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "ClipboardPasteButton"
'	marrImageName(i)	= "MI_IMG_MAP_PASTE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "ClipboardCutButton"
'	marrImageName(i)	= "MI_IMG_MAP_CUT_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "ClipboardUndoButton"
'	marrImageName(i)	= "MI_IMG_MAP_UNDO_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SpatialSelectionSqlSelectButton"
'	marrImageName(i)	= "MI_IMG_MAP_SQLSELECT_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SpatialSelectionInvertSelectButton"
'	marrImageName(i)	= "MI_IMG_MAP_INVERT_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SpatialSelectionClearButton"
'	marrImageName(i)	= "MI_IMG_MAP_CLEAR_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "ClearTargetButton"
'	marrImageName(i)	= "MI_IMG_SPA_CLEARTARGET_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SpatialEraseTargetButton"
'	marrImageName(i)	= "MI_IMG_SPA_ERASE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SpatialEraseOutsideTargetButton"
'	marrImageName(i)	= "MI_IMG_SPA_ERASEOUTSIDE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "CombineSelectedObjectsButton"
'	marrImageName(i)	= "MI_IMG_SPA_COMBINESELECTOBJ_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "CombineUsingColumnButton"
'	marrImageName(i)	= "MI_IMG_SPA_COMBINEUSINGCOL_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SplitTargetButton"
'	marrImageName(i)	= "MI_IMG_SPA_SPLIT_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "PolylineSplitButton"
'	marrImageName(i)	= "MI_IMG_SPA_POLYLINESPLIT_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "PolylineSplitAtNodeButton"
'	marrImageName(i)	= "MI_IMG_SPA_POLYLINESPLITNODE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "DisaggregateButton"
'	marrImageName(i)	= "MI_IMG_SPA_DISAGGROBJECT_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SpatialBufferButton"
'	marrImageName(i)	= "MI_IMG_SPA_BUFFER_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SpatialBufferTableButton"
'	marrImageName(i)	= "MI_IMG_TAB_BUFFERTABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SpatialConvexHullButton"
'	marrImageName(i)	= "MI_IMG_SPA_CONVEXHULL_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SnapToNodeButton"
'	marrImageName(i)	= "MI_IMG_SPA_SNAPTONODES_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "ReshapeButton"
'	marrImageName(i)	= "MI_IMG_SPA_RESHAPENODES_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "AddNodeButton"
'	marrImageName(i)	= "MI_IMG_SPA_ADDNODES_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "OverlayNodeButton"
'	marrImageName(i)	= "MI_IMG_SPA_OVERLAYNODES_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "CheckRegionsButton"
'	marrImageName(i)	= "MI_IMG_SPA_CHECKREGIONS_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "CleanButton"
'	marrImageName(i)	= "MI_IMG_SPA_CLEANOBJECTS_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SnapButton"
'	marrImageName(i)	= "MI_IMG_SPA_SNAPTHIN_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SmoothButton"
'	marrImageName(i)	= "MI_IMG_SPA_SMOOTHLINES_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "UnsmoothButton"
'	marrImageName(i)	= "MI_IMG_SPA_UNSMOOTHLINES_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "OffsetObjectButton"
'	marrImageName(i)	= "MI_IMG_LAB_OFFSET_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "RotateObjectButton"
'	marrImageName(i)	= "MI_IMG_SPA_ROTATEOBJECT_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SpatialConvertToPolylineButton"
'	marrImageName(i)	= "MI_IMG_SPA_CVRTTOPOLYLINES_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SetClipRegionButton"
'	marrImageName(i)	= "MI_IMG_SPA_CLIPREGIONSET_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "ClipRegionOnOffButton"
'	marrImageName(i)	= "MI_IMG_SPA_CLIPREGIONTOGGLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "DigitizerSetupButton"
'	marrImageName(i)	= "MI_IMG_SPA_DIGITIZERSETUP_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SpatialClearMapObjectsButton"
'	marrImageName(i)	= "MI_IMG_APP_OPENTABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SpatialCreateInsertSymbolButton"
'	marrImageName(i)	= "MI_IMG_LAY_SYMBOL_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SpatialCreateInsertTextButton"
'	marrImageName(i)	= "MI_IMG_SPA_INSERTTEXT_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SpatialCreateInsertLineButton"
'	marrImageName(i)	= "MI_IMG_LAY_INSERTLINE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SpatialCreateInsertPolylineButton"
'	marrImageName(i)	= "MI_IMG_LAY_INSERTPOLYLINE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SpatialCreateInsertArcButton"
'	marrImageName(i)	= "MI_IMG_LAY_INSERTARC_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SpatialCreateInsertPolygonButton"
'	marrImageName(i)	= "MI_IMG_LAY_INSERTPOLYGREGION_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SpatialCreateInsertEllipseButton"
'	marrImageName(i)	= "MI_IMG_LAY_INSERTELLIPSE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SpatialCreateInsertRectangleButton"
'	marrImageName(i)	= "MI_IMG_LAY_INSERTRECTANGLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SpatialCreateInsertRoundedRectangleButton"
'	marrImageName(i)	= "MI_IMG_LAY_INSRTROUNDRECT_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SpatialCreateSymbolStyleButton"
'	marrImageName(i)	= "MI_IMG_LAY_SYMBOLSTYLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SpatialCreateLineStyleButton"
'	marrImageName(i)	= "MI_IMG_LAY_LINESTYLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SpatialCreateRegionStyleButton"
'	marrImageName(i)	= "MI_IMG_LAY_REGIONSTYLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SpatialCreateTextStyleButton"
'	marrImageName(i)	= "MI_IMG_LAY_TEXTSTYLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SpatialConvertToRegionButton"
'	marrImageName(i)	= "MI_IMG_SPA_CONVERTTOREGIONS_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SpatialEncloseButton"
'	marrImageName(i)	= "MI_IMG_SPA_ENCLOSE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SpatialCreateDriveRegionsButton"
'	marrImageName(i)	= "MI_IMG_SPA_DRIVEREGIONS_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SpatialDriveRegionsTableButton"
'	marrImageName(i)	= "MI_IMG_SPA_DRIVEREGIONSTABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SpatialVoronoiButton"
'	marrImageName(i)	= "MI_IMG_SPA_VORONOI_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SpatialVoronoiTableButton"
'	marrImageName(i)	= "MI_IMG_SPA_VORONOITABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "CreatePointsButton"
'	marrImageName(i)	= "MI_IMG_TAB_CREATEPOINTS_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "GeoCodeButton"
'	marrImageName(i)	= "MI_IMG_TAB_GEOCODE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "WebGeoCodeButton"
'	marrImageName(i)	= "MI_IMG_TAB_GEOCODESERVER_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "LayoutNewPageButton"
'	marrImageName(i)	= "MI_IMG_LAY_NEWLAYOUTPAGE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "LayoutPageSetupButton"
'	marrImageName(i)	= "MI_IMG_APP_OPENTABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "AddMapButton"
'	marrImageName(i)	= "MI_IMG_APP_OPENTABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "AddBrowserButton"
'	marrImageName(i)	= "MI_IMG_APP_OPENTABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "LayoutDesigneInsertTextButton"
'	marrImageName(i)	= "MI_IMG_APP_OPENTABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "LayoutDesigneInsertImageButton"
'	marrImageName(i)	= "MI_IMG_APP_OPENTABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "LayoutAddMapLegendButton"
'	marrImageName(i)	= "MI_IMG_APP_OPENTABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "InsertLineButton"
'	marrImageName(i)	= "MI_IMG_APP_OPENTABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "InsertEllipseButton"
'	marrImageName(i)	= "MI_IMG_APP_OPENTABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "InsertRectangleButton"
'	marrImageName(i)	= "MI_IMG_APP_OPENTABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "InsertRoundedRectangleButton"
'	marrImageName(i)	= "MI_IMG_APP_OPENTABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "RemoveSelectedLayoutItemsButton"
'	marrImageName(i)	= "MI_IMG_APP_OPENTABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "LayoutBringToFrontButton"
'	marrImageName(i)	= "MI_IMG_APP_OPENTABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "LayoutSendToBackButton"
'	marrImageName(i)	= "MI_IMG_APP_OPENTABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "VerticalGuidelineButton"
'	marrImageName(i)	= "MI_IMG_APP_OPENTABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "HorizontalGuidelineButton"
'	marrImageName(i)	= "MI_IMG_APP_OPENTABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "DisableGuidelinesButton"
'	marrImageName(i)	= "MI_IMG_APP_OPENTABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "RemoveGuidelinesButton"
'	marrImageName(i)	= "MI_IMG_APP_OPENTABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SnapToLeftButton"
'	marrImageName(i)	= "MI_IMG_APP_OPENTABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SnapToBottomButton"
'	marrImageName(i)	= "MI_IMG_APP_OPENTABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SnapToTopButton"
'	marrImageName(i)	= "MI_IMG_APP_OPENTABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SnapToRightButton"
'	marrImageName(i)	= "MI_IMG_APP_OPENTABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "LayoutGridLinesButton"
'	marrImageName(i)	= "MI_IMG_APP_OPENTABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "SnapToGridButton"
'	marrImageName(i)	= "MI_IMG_APP_OPENTABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "LayoutSelectButton"
'	marrImageName(i)	= "MI_IMG_MAP_SELECT_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "LayoutZoomInButton"
'	marrImageName(i)	= "MI_IMG_APP_OPENTABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "LayoutZoomOutButton"
'	marrImageName(i)	= "MI_IMG_APP_OPENTABLE_"
'	marrCommandID(i)	= "102"
'	i = i + 1
'	marrControlName(i)	= "LayoutPanButton"
'	marrImageName(i)	= "MI_IMG_APP_OPENTABLE_"
'	marrCommandID(i)	= "102"
'
'	Exit Sub
''-------------------------
'ErrorOccured:
'	Call ERRCreate(Err(), Error$(), "RBInitialControlArrays")
'	Call ERRShow()
'
'End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGetImageStringFromControlName(ByVal sControlName As String) As String

Dim	nItem As Integer

OnError GoTo ErrorOccured

	RBNGetImageStringFromControlName = "MI_IMG_APP_OPENTABLE_"

	nItem = ARRAYFindValueString(marrControlName, sControlName)
	If nItem > 0 Then
		RBNGetImageStringFromControlName = marrImageName(nItem)
	End If

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGetImageStringFromControlName")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGetCommandIDFromControlName(ByVal sControlName As String) As String

Dim	nItem As Integer

OnError GoTo ErrorOccured

	RBNGetCommandIDFromControlName = M_FILE_OPEN

	nItem = ARRAYFindValueString(marrControlName, sControlName)
	If nItem > 0 Then
		RBNGetCommandIDFromControlName = marrCommandID(nItem)
	End If

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGetCommandIDFromControlName")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function RBNGetImageStringFromTabAndGroup(	  ByVal sRbnTabName As String
									, ByVal sRbnGroupName As String
									) As String

OnError GoTo ErrorOccured

RBNGetImageStringFromTabAndGroup = "MI_IMG_APP_CLOSEALL_"

	Do Case sRbnTabName
		Case TAB_HOME
			RBNGetImageStringFromTabAndGroup	= "MI_IMG_APP_OPENTABLE_"
		Case TAB_TABLE
			RBNGetImageStringFromTabAndGroup	= "MI_IMG_TAB_NEWTABLE_"
		Case TAB_MAP
			RBNGetImageStringFromTabAndGroup	= "MI_IMG_MAP_NEWMAPPER_"
		Case TAB_SPATIAL
			RBNGetImageStringFromTabAndGroup	= "MI_IMG_SPA_BUFFER_"
		Case TAB_LAYOUT
			RBNGetImageStringFromTabAndGroup	= "MI_IMG_LAY_FRAME_"
	End Case

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNGetImageStringFromTabAndGroup")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'
'**********************************************************************************************''
Sub RBNLoopContext

Dim	nNumTabs, nNumGroups, nNumCntrls, i, j, k As Integer,
	sName, sCaption As String,
	nCntrlType As Integer,
	rbnTabItem As This,
	rbnTabsColl As This,
	rbnGroupsColl As This,
	rbnGroupItem As This,
	rbnControlsColl As This,
	rbnControlItem As This

	'--------------------------------
	Call RBNInitiate

	rbnGroupsColl	= GetCntxtTabGrpsColl(theRibbon)
	nNumGroups	= GetRbnCntxtTabGrpCollCount(rbnGroupsColl)
	Call DEBUGPrint("   RBNGetContextGroup: Number of Tab Groups " & nNumGroups)
	For i = 0 To (nNumGroups - 1)
		rbnGroupItem = GetRbnCntxtTabGrpCollItemInt(rbnGroupsColl, i)

		sName	= GetRbnCntxtTabGrpName(rbnGroupItem)
		sCaption	= GetRbnCntxtTabGrpCaption(rbnGroupItem)
		Call DEBUGPrint("   Tab Group " & j & " is named '" & sName & "' but shown as '" & sCaption & "'")

		rbnTabsColl = GetRbnCntxtTabGrpTabs(rbnGroupItem)
'		rbnGroupsColl = GetRbnTabGrps(rbnGroupItem)

		nNumGroups = GetRbnCtrlGrpCollCount(rbnTabsColl)
'		Call DEBUGPrint("   Number of Tab Groups " & nNumGroups)

		For j = 0 To (nNumGroups - 1)
			rbnGroupItem = GetRbnCtrlGrpCollItemInt(rbnGroupsColl, j)

			sName	= GetRbnCtrlGrpName(rbnGroupItem)
			sCaption	= GetRbnCtrlGrpCaption(rbnGroupItem)
			Call DEBUGPrint("   Tab Group " & j & " is named '" & sName & "' but shown as '" & sCaption & "'")

			rbnControlsColl = GetRbnCtrlGrpCtrls(rbnGroupItem)
			nNumCntrls = GetMICtrlCollCount(rbnControlsColl)
'			Call DEBUGPrint("      Number of Controls " & nNumCntrls)

			For k = 0 To (nNumCntrls - 1)
				rbnControlItem	= GetMICtrlCollItemInt(rbnControlsColl, k)

				nCntrlType	= GetMICtrlCtrlType(rbnControlItem)
				sName		= GetMICtrlName(rbnControlItem)
				sCaption		= GetMICtrlCaption(rbnControlItem)
				Call DEBUGPrint("      Control " & k & " is named '" & sName & "' but shown as '" & sCaption & "' and Control Type is " & nCntrlType & " (" & RBNControlGetTypeName(nCntrlType) & ")")
			Next
		Next
	Next

	'Always asing NULL_PTR to all local variables declared within this local scope who are of type - this or RefPtr.
	'This is necessary to avoid memory leaks and unnecessary variable references.
	rbnTabItem		= NULL_PTR
	rbnTabsColl		= NULL_PTR
	rbnGroupsColl		= NULL_PTR
	rbnGroupItem		= NULL_PTR
	rbnControlsColl	= NULL_PTR
	rbnControlItem		= NULL_PTR


	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "RBNLoopContext")
	Call ERRShow()

End Sub
