'*******************************************************************************
'** 	Program:
'** 	Modul:
'**
'*******************************************************************************

'-------------------------------------
Include "MapBasic.def"
Include "Icons.def"
Include "Menu.def"

'**default constants...
Include "Defaults.def"

'-------------------------------------
Include "DEBUGLib.def"
Include "ERRORLib.def"

Include "MATHLib.def"

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'	:
'Return value: Float
'Calculating the direction from tStart to tEnd
'	in 360 degrees
'	with east as the starting angle
'	and counter clockwise
'**********************************************************************************************''
Function MATHGetDirection(ByVal fStartX As Float, ByVal fStartY As Float, ByVal fEndX As Float, ByVal fEndY As Float) As Float

Dim	fDirection As Float

OnError GoTo ErrorOccured

MATHGetDirection = 0

	'//Checking for vertical dirction
	If (fEndX - fStartX) = 0 Then
		'//not allowed to divide by zero...
		If fEndY > fStartY Then
			'//tEnd is north of tStart...
			MATHGetDirection	= 90	'degrees
		Else
			'//tEnd is south of tStart...
			MATHGetDirection	= 270	'degrees
		End If
		Exit Function
	End If

	'//Checking for horisontal dirction
	If (fEndY - fStartY) = 0 Then
		If (fEndX < fStartX) Then
			'//tEnd is west of tStart...
			MATHGetDirection = 180	'degrees
		ElseIf (fEndX > fStartX) And (fEndY = fStartY) Then
			'//tEnd is east of tStart...
			MATHGetDirection = 0	'degrees
		End If
		Exit Function
	End If

	fDirection = Atn((fEndY - fStartY) / (fEndX - fStartX)) * RAD_2_DEG	'//Converting from RAD to Degrees

	If (fEndX < fStartX) And (fEndY > fStartY) Then
		'//tEnd is northwest of tStart
		fDirection = fDirection + 180	'degrees
	ElseIf (fEndX < fStartX) And (fEndY < fStartY) Then
		'//tEnd is southwest of tStart
		fDirection = fDirection + 180	'degrees
	End If

	MATHGetDirection = MATHGetValidDirection(fDirection)

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MATHGetDirection")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'	fDirection : a direction in 360 degrees
'Return value:
'	a directions between 0 and 360 degrees
'**********************************************************************************************''
Function MATHGetValidDirection(ByVal fDirection As Float) As Float

OnError GoTo ErrorOccured

MATHGetValidDirection = fDirection

	'//fDirection should be less than or equal to 360 degress
	Do Until fDirection <= 360
		fDirection = fDirection - 360	'//degrees
	Loop
	'//fDirection should be more than or equal to 0 degress
	Do Until fDirection >= 0
		fDirection = fDirection + 360	'//degrees
	Loop

MATHGetValidDirection = fDirection

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MATHGetValidDirection")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'	fX : X-coordinate to offset
'	fDistance: Distance to move fX, same unit as fX
'	fDirection: Direction to move fX in 360 degrees
'Return value:
'	x-coordinate offset using the given parameters
'**********************************************************************************************''
Function MATHOffsetX(ByVal fX As Float, ByVal fDistance As Float, ByVal fDirection As Float) As Float

OnError GoTo ErrorOccured

	MATHOffsetX = fX + ((Cos(fDirection * DEG_2_RAD)) * fDistance)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MATHOffsetX")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'	fY : Y-coordinate to offset
'	fDistance: Distance to move fY, same unit as fX
'	fDirection: Direction to move fY in 360 degrees
'Return value:
'	y-coordinate offset using the given parameters
'**********************************************************************************************''
Function MATHOffsetY(ByVal fY As Float, ByVal fDistance As Float, ByVal fDirection As Float) As Float

OnError GoTo ErrorOccured

	MATHOffsetY = fY + ((Sin(fDirection * DEG_2_RAD)) * fDistance)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MATHOffsetX")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'	nBit 		: The bit to check for
'	nBitSum	: The sum of bits to see if nBit is On
'Return value:
'	TRUE		: The bit nBit is set
'	FALSE		: The bit nBit is not set
'**********************************************************************************************''
Function MATHIsBitOn(ByVal nBit As Integer, ByVal nBitSum As Integer) As Logical

Dim	nCurBit As Integer

OnError GoTo ErrorOccured

MATHIsBitOn = FALSE

	nCurBit	= 64
	'**Finding the maximum bit that can be set in the nBitSum
	Do While (nCurBit < nBitSum)
		nCurBit = nCurBit * 2
	Loop

	Do While (nCurBit >= nBit)
		If (nBitSum >= nCurBit) Then
			If nCurBit = nBit Then
				MATHIsBitOn = TRUE
				Exit Function
			End If

			nBitSum = nBitSum - nCurBit
		End If
		'**One has been tested once, so we are done
		If nCurBit = 1 Then
			Exit Function
		End If

		nCurBit = (nCurBit / 2)
	Loop

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MATHIsBitOn")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'MapInfo Pro typically works with a mathematical angle
'East/Right is 0, and the values grow counter clockwise: North is 90, West is 180, and South is 270
'Parameters:
'	fNorthAngle: Angle measured with North being 0 and clockwise
'Return value:
'	Math angle where East is 0 and counter-clockwise
'**********************************************************************************************''
Function MATHNorth2MathAngle(	ByVal fNorthAngle As Float) As Float

Dim	fNewAngle As Float

OnError GoTo ErrorOccured

	If fNorthAngle = 0 Then
		fNewAngle	= 90
	ElseIf fNorthAngle = 90 Then
		fNewAngle	= 0
	ElseIf fNorthAngle = 180 Then
		fNewAngle	= 270
	ElseIf fNorthAngle = 270 Then
		fNewAngle	= 180
	ElseIf fNorthAngle = 360 Then
		fNewAngle	= 90
	ElseIf fNorthAngle > 0 And fNorthAngle < 90 Then
		fNewAngle	= 90 - fNorthAngle
	ElseIf fNorthAngle > 90 And fNorthAngle < 180 Then
		fNewAngle	= (360 - fNorthAngle) + 90
	ElseIf fNorthAngle > 180 And fNorthAngle < 270 Then
		fNewAngle	= (270 - fNorthAngle) + 180
	ElseIf fNorthAngle > 270 And fNorthAngle < 360 Then
		fNewAngle	= (360 - fNorthAngle) + 90
	End If

	MathNorth2MathAngle = fNewAngle
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MathNorth2MathAngle")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'MapInfo Pro typically works with a mathematical angle
'East/Right is 0, and the values grow counter clockwise: North is 90, West is 180, and South is 270
'Parameters:
'	fMathAngle: Angle measured with East being 0 and counter-clockwise
'Return value:
'	North angle where North is 0 and clockwise
'**********************************************************************************************''
'****************************************
Function MathMath2NorthAngle(ByVal fMathAngle As Float) As Float

Dim	fNewAngle As Float

OnError GoTo ErrorOccured

	If fMathAngle = 0 Then
		fNewAngle	= 90
	ElseIf fMathAngle = 90 Then
		fNewAngle	= 0
	ElseIf fMathAngle = 180 Then
		fNewAngle	= 270
	ElseIf fMathAngle = 270 Then
		fNewAngle	= 180
	ElseIf fMathAngle = 360 Then
		fNewAngle	= 90
	ElseIf fMathAngle > 0 And fMathAngle < 90 Then
		fNewAngle	= 90 - fMathAngle
	ElseIf fMathAngle > 90 And fMathAngle < 180 Then
		fNewAngle	= (360 - fMathAngle) + 90
	ElseIf fMathAngle > 180 And fMathAngle < 270 Then
		fNewAngle	= (270 - fMathAngle) + 180
	ElseIf fMathAngle > 270 And fMathAngle < 360 Then
		fNewAngle	= (360 - fMathAngle) + 90
	End If

	MathMath2NorthAngle = fNewAngle

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MathMath2NorthAngle")
	Call ERRShow()

End Function