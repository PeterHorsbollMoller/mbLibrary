'*******************************************************************************
'** 	Program:
'** 	Modul:
'**
'*******************************************************************************

'-------------------------------------
Include "MapBasic.def"
Include "Icons.def"
Include "Menu.def"
'**default constants...
Include "Defaults.def"

'-------------------------------------
Include "DEBUGLib.def"
Include "ERRORLib.def"
Include "MATHLib.def"
Include "OBJLib.def"
Include "TABLELib.def"

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes MapInfo
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function OBJIsInitialized(ByVal oObj As Object) As Logical

Dim	nType As Integer

OnError GoTo ErrorOccured

OBJIsInitialized = FALSE

	OnError GoTo NotInitialized
	nType = ObjectInfo(oObj, OBJ_INFO_TYPE)

OBJIsInitialized = TRUE

	Exit Function
'-------------------------
NotInitialized:
	OBJIsInitialized = FALSE

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "OBJIsInitialized")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function OBJFindNode(	  ByVal oObj As Object		'The object (polyline or polygon) to search in, only the first segment of the object will be searched
					, ByVal oNode As Object		'Node position to look for
					, ByVal fTolerance As Float	'Search tolerance, in meters, distance is measured using Cartesian calculation
					) As Integer				'Returns the first matching node number, or 0 if no found

Dim	nSegm, nNode As Integer

OnError GoTo ErrorOccured

OBJFindNode = 0

	If OBJFindSegmentAndNode(oObj, oNode, fTolerance, nSegm, nNode) Then
		If nSegm = 1 Then
			OBJFindNode = nNode
		End If
	End If

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "OBJFindNode")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function OBJFindSegmentAndNode( ByVal oObj As Object		'The object (polyline or polygon) to search in
						, ByVal oNode As Object		'Node position to look for
						, ByVal fTolerance As Float	'Search tolerance, in meters, distance is measured using Cartesian calculation
						, nSegmentFound As Integer	'The Segment number where the node was found
						, nNodeFound As Integer		'The matching node number
						) As Logical				'Returns TRUE if a matching node was found, otherwise FALSE

Dim	nSegm, nNode As Integer,
	fNodeX, fNodeY, fX, fY, fDistance As Float

OnError GoTo ErrorOccured

OBJFindSegmentAndNode = FALSE

	If NOT ObjectInfo(oObj, OBJ_INFO_TYPE) IN (OBJ_TYPE_PLINE, OBJ_TYPE_REGION) Then
		Exit Function
	End If

	fNodeX	= CentroidX(oNode)
	fNodeY	= CentroidY(oNode)

	For nSegm = 1 To ObjectInfo(oObj, OBJ_INFO_NPOLYGONS)
		For nNode = 1 To ObjectInfo(oObj, OBJ_INFO_NPOLYGONS + nSegm)
			fX	= ObjectNodeX(oObj, nSegm, nNode)
			fY	= ObjectNodeY(oObj, nSegm, nNode)

			fDistance	= CartesianDistance(fNodeX, fNodeY, fX, fY, "m")
			If fDistance <= fTolerance Then
'				Call DEBUGPrint("   Found node as no " & nNode & " " & fDistance & " m from point")
				nSegmentFound	= nSegm
				nNodeFound	= nNode
				OBJFindSegmentAndNode = TRUE
				Exit Function
			End If
		Next		'nNode
	Next		'nSegm

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "OBJFindSegmentAndNode")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function OBJFindNodeBinary(	  ByVal oObj As Object		'The object (polyline or polygon) to search in, only the first segment of the object will be searched
						, ByVal oNode As Object		'Node position to look for
						, ByVal fTolerance As Float	'Search tolerance, in meters, distance is measured using Cartesian calculation
						, ByVal nOffset As Integer	'Offset of 1st node in polyline based on original, use 0 for first call
						) As Integer				'Returns the first matching node number, or 0 if no found

Dim	objLow, objHigh As Object,
	nPnts, nNode, nMid As Integer

OnError GoTo ErrorOccured

OBJFindNodeBinary = 0

	nPnts = ObjectInfo(oObj, OBJ_INFO_NPNTS)

	If nPnts < 100 Then
'		Call DEBUGPrint("   Searching using OBJFindNode (" & nPnts & " points)")
		nNode = OBJFindNode( oObj, oNode, fTolerance)
		If nNode > 0 Then
			OBJFindNodeBinary = (nNode + nOffset)
		End If
		Exit Function
	End If

	' Determine the middle point
	nMid = nPnts \ 2 + nPnts Mod 2
'	Call DEBUGPrint("   Mid: " & nMid & " out of " & nPnts & " points. Offset = " & nOffset)

	' Start with the lower half
	objLow = ExtractNodes( oObj, 1, 1, nMid, FALSE)
	If oNode Within CartesianBuffer(MBR(objLow), 25, fTolerance, "m") Then
'		Call DEBUGPrint("   Searching in lower part: 1 - " & nMid )
		nNode = OBJFindNodeBinary(objLow, oNode, fTolerance, nOffset)
		OBJFindNodeBinary = nNode
	Else
		' Forget this branch
		nNode = 0
	End If

	' If we couldn't find it in the lower, then check the upper half
	If nNode = 0 Then
		objHigh = ExtractNodes(oObj, 1, nMid + 1, nPnts, FALSE )
		If oNode Within CartesianBuffer(MBR(objHigh), 25, fTolerance, "m") Then
'			Call DEBUGPrint("   Searching in higher part: " & (nMid + 1) & " - " & nPnts)
			nNode = OBJFindNodeBinary( objHigh, oNode, fTolerance, nOffset + nMid)
		Else
			' Forget this branch
			nNode = 0
		End If
	End If

	OBJFindNodeBinary = nNode

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "OBJFindNodeBinary: nNode: " & nNode)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function OBJRemoveDuplicateNodes(	  ByVal oObj As Object		'The object (polyline or polygon) to remove duplicate nodes in
							, ByVal fTolerance As Float	'The tolerance defining whether two nodes are "the same", distance is measured using Cartesian calculation
							) As Object				'Returns the object with duplicate nodes removed

Dim	nSegm, nNode, nNumNodes As Integer,
	fPrevX, fPrevY, fX, fY As Float

OnError GoTo ErrorOccured

OBJRemoveDuplicateNodes = oObj

	If NOT ObjectInfo(oObj, OBJ_INFO_TYPE) IN (OBJ_TYPE_PLINE, OBJ_TYPE_REGION) Then
		Exit Function
	End If

'	Call DEBUGPrint("OBJRemoveDuplicateNodes")
	For nSegm = 1 To ObjectInfo(oObj, OBJ_INFO_NPOLYGONS)
'		Call DEBUGPrint("   Segment: " & nSegm)

		nNumNodes	= ObjectInfo(oObj, OBJ_INFO_NPOLYGONS + nSegm)
		fPrevX	= ObjectNodeX(oObj, nSegm, nNumNodes)
		fPrevY	= ObjectNodeY(oObj, nSegm, nNumNodes)

		For nNode = (nNumNodes - 1) To 1 Step -1
'			Call DEBUGPrint("      Node: " & nNode)
			fX	= ObjectNodeX(oObj, nSegm, nNode)
			fY	= ObjectNodeY(oObj, nSegm, nNode)

			If CartesianDistance(fPrevX, fPrevY, fX, fY, "m") <= fTolerance Then
				If nNode = 1 Then
					Call DEBUGPrint("      - Node 1 on segment " & nSegm)
'					Alter Object oObj
'						Node Remove Position nSegm, 2
				Else
					Call DEBUGPrint("      - Removing Node " & nNode & " from segment " & nSegm)
					Alter Object oObj
						Node Remove Position nSegm, nNode
				End If
			Else
				fPrevX	= fX
				fPrevY	= fY
			End If
		Next		'nNode
	Next		'nSegm

OBJRemoveDuplicateNodes = oObj

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "OBJRemoveDuplicateNodes")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function OBJReverse(  ByVal oObj As Object			'The object which node order to reverse, only line, polyline and polygons are supported
				) As Object					'Returns the object with the nodes in reversed order

OnError GoTo ErrorOccured

	Do Case ObjectInfo(oObj, OBJ_INFO_TYPE)
		Case OBJ_TYPE_LINE
			OBJReverse = OBJReverseLine(oObj)
		Case OBJ_TYPE_PLINE
			OBJReverse = OBJReversePolyline(oObj)
		Case Else
			OBJReverse = oObj
	End Case

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "OBJReverse")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function OBJReversePolyline(  ByVal oObj As Object		'The polyline which node order to reverse, only is supported
							) As Object			'Returns the polyline with the nodes in reversed order

Dim	nSegm, nNode As Integer,
	fX, fY As Float,
	oNew As object

OnError GoTo ErrorOccured

OBJReversePolyline = oObj

	Create Pline
		Into Variable oNew
		'[ Multiple num_sections ]
		0	'num_points ( x1, y1 ) ( x2, y2 ) [ ... ]
		Pen ObjectInfo(oObj, OBJ_INFO_PEN)


	For nSegm = 1 To ObjectInfo(oObj, OBJ_INFO_NPOLYGONS)
		For nNode = 1 To ObjectInfo(oObj, OBJ_INFO_NPOLYGONS + nSegm)
			fX	= ObjectNodeX(oObj, nSegm, nNode)
			fY	= ObjectNodeY(oObj, nSegm, nNode)

			Alter Object oNew
				Node Add Position nSegm, 1 ( fX, fY )
		Next		'nNode
	Next		'nSegm

OBJReversePolyline = oNew

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "OBJReversePolyline")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function OBJReverseLine(	  ByVal oObj As Object		'The line which node order to reverse, only line is supported
					) As Object				'Returns the line with the nodes in reversed order

Dim	oNew As Object

OnError GoTo ErrorOccured

	Create Line
		Into Variable oNew
		( ObjectGeography(oObj, OBJ_GEO_LINEENDX), ObjectGeography(oObj, OBJ_GEO_LINEENDY))
		( ObjectGeography(oObj, OBJ_GEO_LINEBEGX), ObjectGeography(oObj, OBJ_GEO_LINEBEGY))
		Pen ObjectInfo(oObj, OBJ_INFO_PEN)

	OBJReverseLine = oNew

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "OBJReverseLine")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function OBJAreTouchingAtEndNodes(	  ByVal oFirst As Object		'The first object to use
							, ByVal oSecond As Object	'The second object to use
							, ByVal fTolerance As Float	'The tolerance distance allowed
							) As Logical				'Returns true if the distance between two end nodes are less than fTolereance

Dim	fAX1, fAY1, fAX2, fAY2, fBX1, fBY1, fBX2, fBY2 As Float,
	arrDistance(4) As Float,
	nSegments, i, nMinimum As Integer

OnError GoTo ErrorOccured

OBJAreTouchingAtEndNodes = FALSE

	fAX1		= ObjectNodeX(oFirst, 1, 1)
	fAY1		= ObjectNodeY(oFirst, 1, 1)
	nSegments	= ObjectInfo(oFirst, OBJ_INFO_NPOLYGONS)
	fAX2		= ObjectNodeX(oFirst, nSegments, ObjectInfo(oFirst, OBJ_INFO_NPOLYGONS + nSegments))
	fAY2 	= ObjectNodeY(oFirst, nSegments, ObjectInfo(oFirst, OBJ_INFO_NPOLYGONS + nSegments))

	fBX1		= ObjectNodeX(oSecond, 1, 1)
	fBY1		= ObjectNodeY(oSecond, 1, 1)
	nSegments	= ObjectInfo(oSecond, OBJ_INFO_NPOLYGONS)
	fBX2		= ObjectNodeX(oSecond, nSegments, ObjectInfo(oSecond, OBJ_INFO_NPOLYGONS + nSegments))
	fBY2		= ObjectNodeY(oSecond, nSegments, ObjectInfo(oSecond, OBJ_INFO_NPOLYGONS + nSegments))

	arrDistance(1)	= Distance(fAX1, fAY1, fBX1, fBY1, "m")
	arrDistance(2)	= Distance(fAX1, fAY1, fBX2, fBY2, "m")
	arrDistance(3)	= Distance(fAX2, fAY2, fBX1, fBY1, "m")
	arrDistance(4)	= Distance(fAX2, fAY2, fBX2, fBY2, "m")

	nMinimum	= 1
	For i = 2 To 4
'		Call DEBUGPrint("OBJAreTouchingAtEndNodes: " & arrDistance(nMinimum) & " > " & arrDistance(i))
		If arrDistance(nMinimum) > arrDistance(i) Then
			nMinimum	= i
'			Call DEBUGPrint("OBJAreTouchingAtEndNodes: Minimum: " & arrDistance(nMinimum))
		End If
	Next

'	Call DEBUGPrint("OBJAreTouchingAtEndNodes: Minimum: " & arrDistance(nMinimum))
	If arrDistance(nMinimum) <= fTolerance Then
		OBJAreTouchingAtEndNodes = TRUE
	End If

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "OBJAreTouchingAtEndNodes")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function OBJFindNearestEndNodes(	  ByVal oFirst As Object		'The first object to use
							, ByVal oSecond As Object	'The second object to use
							) As Integer				'Returns 1: First And First node, 2: First and Last, 3: Last and First, 4 Last and Last

Dim	fAX1, fAY1, fAX2, fAY2, fBX1, fBY1, fBX2, fBY2 As Float,
	arrDistance(4) As Float,
	nSegments, i, nMinimum As Integer

OnError GoTo ErrorOccured

OBJFindNearestEndNodes = FALSE

	fAX1		= ObjectNodeX(oFirst, 1, 1)
	fAY1		= ObjectNodeY(oFirst, 1, 1)
	nSegments	= ObjectInfo(oFirst, OBJ_INFO_NPOLYGONS)
	fAX2		= ObjectNodeX(oFirst, nSegments, ObjectInfo(oFirst, OBJ_INFO_NPOLYGONS + nSegments))
	fAY2 	= ObjectNodeY(oFirst, nSegments, ObjectInfo(oFirst, OBJ_INFO_NPOLYGONS + nSegments))

	fBX1		= ObjectNodeX(oSecond, 1, 1)
	fBY1		= ObjectNodeY(oSecond, 1, 1)
	nSegments	= ObjectInfo(oSecond, OBJ_INFO_NPOLYGONS)
	fBX2		= ObjectNodeX(oSecond, nSegments, ObjectInfo(oSecond, OBJ_INFO_NPOLYGONS + nSegments))
	fBY2		= ObjectNodeY(oSecond, nSegments, ObjectInfo(oSecond, OBJ_INFO_NPOLYGONS + nSegments))

	arrDistance(1)	= Distance(fAX1, fAY1, fBX1, fBY1, "m")
	arrDistance(2)	= Distance(fAX1, fAY1, fBX2, fBY2, "m")
	arrDistance(3)	= Distance(fAX2, fAY2, fBX1, fBY1, "m")
	arrDistance(4)	= Distance(fAX2, fAY2, fBX2, fBY2, "m")

	nMinimum	= 1
	For i = 2 To 4
'		Call DEBUGPrint("OBJFindNearestEndNodes: " & arrDistance(nMinimum) & " > " & arrDistance(i))
		If arrDistance(nMinimum) > arrDistance(i) Then
			nMinimum	= i
'			Call DEBUGPrint("OBJFindNearestEndNodes: Minimum: " & arrDistance(nMinimum))
		End If
	Next

'	Call DEBUGPrint("OBJFindNearestEndNodes: Minimum: " & arrDistance(nMinimum))
	OBJFindNearestEndNodes = nMinimum

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "OBJFindNearestEndNodes")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function OBJCombineAtEndNode(	  ByVal oFirst As Object			'The first object to use
						, ByVal oSecond As Object		'The second object to use
						) As Object					'Return the combined object where one of the end nodes of oSecond has been moved to the nearest end node of oFirst

Dim	nNearestNodes, nSegmA, nNodeA, nSegmB, nNodeB As Integer,
	sText1, sText2 As String

OnError GoTo ErrorOccured

OBJCombineAtEndNode = FALSE

	nNearestNodes	= OBJFindNearestEndNodes(oFirst, oSecond)
	Do Case nNearestNodes
		Case 1, 2
			nSegmA	= 1
			nNodeA	= 1
			sText2	= " to first node (" & nSegmA & ", " & nNodeA & ") of first object"
		Case 3, 4
			nSegmA	= ObjectInfo(oFirst, OBJ_INFO_NPOLYGONS)
			nNodeA	= ObjectInfo(oFirst, OBJ_INFO_NPOLYGONS + nSegmA)
			sText2	= " to last node (" & nSegmA & ", " & nNodeA & ")  of first object"
	End Case
	Do Case nNearestNodes
		Case 1, 3
			nSegmB	= 1
			nNodeB	= 1
			sText1	= "Moving first node (" & nSegmB & ", " & nNodeB & ") of second object "
		Case 2, 4
			nSegmB	= ObjectInfo(oSecond, OBJ_INFO_NPOLYGONS)
			nNodeB	= ObjectInfo(oSecond, OBJ_INFO_NPOLYGONS + nSegmB)
			sText1	= "Moving last node (" & nSegmB & ", " & nNodeB & ") of second object "
	End Case

'	Call DEBUGPrint("OBJCombineAtEndNode: " & sText1 & sText2 & " Distance, m: " & Distance(ObjectNodeX(oSecond, nSegmB, nNodeB), ObjectNodeY(oSecond, nSegmB, nNodeB), ObjectNodeX(oFirst, nSegmA, nNodeA), ObjectNodeY(oFirst, nSegmA, nNodeA), "m"))
	Alter Object oSecond
		Node Set Position nSegmB, nNodeB (ObjectNodeX(oFirst, nSegmA, nNodeA), ObjectNodeY(oFirst, nSegmA, nNodeA))

	OBJCombineAtEndNode = Combine(oFirst, oSecond)

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "OBJCombineAtEndNode")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function OBJCombineAtEndNodeNByN(	  ByVal oFirst As Object			'The first object to use
							, ByVal oSecond As Object		'The second object to use
							) As Object					'Return the combined object where one of the end nodes of oSecond has been moved to the nearest end node of oFirst

Dim	nNearestNodes, nSegmA, nNodeA, nSegmB, nNodeB As Integer,
	nNode, nStartNode, nEndNode, nNodeStep As Integer,
	sText1, sText2 As String

OnError GoTo ErrorOccured

OBJCombineAtEndNodeNByN = FALSE

	If ObjectInfo(oSecond, OBJ_INFO_NPOLYGONS) > 1 Then
'		Call DEBUGPrint("OBJCombineAtEndNodeNByN using OBJCombineAtEndNode as second object has several segments")
		OBJCombineAtEndNodeNByN	= OBJCombineAtEndNodeNByN(oFirst, oSecond)
		Exit Function
	End If

	nNearestNodes	= OBJFindNearestEndNodes(oFirst, oSecond)
	Do Case nNearestNodes
		Case 1, 2
			nSegmA	= 1
			nNodeA	= 1
			sText2	= " to first node (" & nSegmA & ", " & nNodeA & ") of first object"
		Case 3, 4
			nSegmA	= ObjectInfo(oFirst, OBJ_INFO_NPOLYGONS)
			nNodeA	= (ObjectInfo(oFirst, OBJ_INFO_NPOLYGONS + nSegmA) + 1)
			sText2	= " to last node (" & nSegmA & ", " & nNodeA & ")  of first object"
	End Case
	Do Case nNearestNodes
		Case 1, 3
			nSegmB		= 1
			nNodeB		= 1
			nStartNode 	= 2
			nEndNode 		= ObjectInfo(oSecond, OBJ_INFO_NPOLYGONS + nSegmB)
			nNodeStep		= 1
			sText1	= "Moving first node (" & nSegmB & ", " & nNodeB & ") of second object "
		Case 2, 4
			nSegmB		= ObjectInfo(oSecond, OBJ_INFO_NPOLYGONS)
			nNodeB		= ObjectInfo(oSecond, OBJ_INFO_NPOLYGONS + nSegmB)
			nStartNode 	= (ObjectInfo(oSecond, OBJ_INFO_NPOLYGONS + nSegmB) - 1)
			nEndNode 		= 1
			nNodeStep		= -1
			sText1	= "Moving last node (" & nSegmB & ", " & nNodeB & ") of second object "
	End Case

'	Call DEBUGPrint("For " & nNode & " = " & nStartNode & " To " & nEndNode & " Step " & nNodeStep)
	For nNode = nStartNode To nEndNode Step nNodeStep

'		Call DEBUGPrint("OBJCombineAtEndNodeNByN: Adding Node" & nNode & " at position " & nNodeA)
		Alter Object oFirst
			Node Add Position nSegmA, nNodeA (ObjectNodeX(oSecond, nSegmB, nNode), ObjectNodeY(oSecond, nSegmB, nNode))

		If nNodeA > 1 Then
			nNodeA	= nNodeA + 1
		End If
	Next

	OBJCombineAtEndNodeNByN = oFirst

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "OBJCombineAtEndNodeNByN")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function OBJAddNodeOnPolyline(  ByVal oPolyline As Object		'The polyline that should have the node added
						, ByVal oPoint As Object			'The Node Point to add
						, ByVal fTolerance As Float		'The tolerance distance, m, that determines if the node is on the line
						) As Object					'The polyline with the added node

Dim	nSegm, nNode As Integer,
	oSegment, oLine As Object,
	fDistance, fMinDistance As Float

OnError GoTo ErrorOccured

OBJAddNodeOnPolyline = oPolyline

	fMinDistance	= 1000000
	For nSegm = 1 To ObjectInfo(oPolyline, OBJ_INFO_NPOLYGONS)
		If Distance(CentroidX(oPoint), CentroidY(oPoint), ObjectNodeX(oPolyline, nSegm, 1), ObjectNodeY(oPolyline, nSegm, 1), "m") <= fTolerance Then
'			Call DEBUGPrint("Using existing node no 1")
			Exit Function
		End If

		For nNode = 1 To (ObjectInfo(oPolyline, OBJ_INFO_NPOLYGONS + nSegm) - 1)
			If Distance(CentroidX(oPoint), CentroidY(oPoint), ObjectNodeX(oPolyline, nSegm, (nNode + 1)), ObjectNodeY(oPolyline, nSegm, (nNode + 1)), "m") <= fTolerance Then
'				Call DEBUGPrint("Using existing node no " & nNode)
				Exit Function
			End If

			oSegment	= ExtractNodes(oPolyline, nSegm, nNode, (nNode + 1), FALSE)
'			oLine	= ConnectObjects(oSegment, oPoint, TRUE)
			fDistance	= CartesianObjectDistance(oSegment, oPoint, "m")

'			If ObjectLen(oLine, "m") <= fTolerance Then
			If fDistance <= fTolerance Then
				Alter Object oPolyline
					Node Add Position nSegm, (nNode + 1) (CentroidX(oPoint), CentroidY(oPoint))
'				Call DEBUGPrint("   Adding node as no " & (nNode + 1) & " " & fDistance & " m from polyline")
				OBJAddNodeOnPolyline = oPolyline
				Exit Function
			Else
				fMinDistance	= Minimum(fMinDistance, fDistance)
			End If

		Next		'nNode
	Next		'nSegm

'	Call DEBUGPrint("Not found on polyline. Minimum distance: " & FormatNumber$(fMinDistance))

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "OBJAddNodeOnPolyline")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function OBJDirection(	ByVal oInput As Object			'The object to calculate the direction off, only works with projected coordinate systems
					) As Float					'Direction of object, 360 degrees, East = 0, counter-clockwise, unsupported objects return -1

Dim	fStartX, fStartY, fEndX, fEndY As Float,
	fDirection, fCurDirection, fCurLength, fLength As Float,
	nSegm, nNode As Integer,
	symInput As Symbol

OnError GoTo ErrorOccured

OBJDirection = -1

	Do Case ObjectInfo(oInput, OBJ_INFO_TYPE)
		Case OBJ_TYPE_POINT
			symInput = ObjectInfo(oInput, OBJ_INFO_SYMBOL)
			If StyleAttr(symInput, SYMBOL_KIND) = SYMBOL_KIND_FONT Then
				fDirection = StyleAttr(symInput, SYMBOL_ANGLE)
			Else
				fDirection = -1
			End If

		Case OBJ_TYPE_TEXT
			fDirection = ObjectGeography(oInput, OBJ_GEO_TEXTANGLE)

		Case OBJ_TYPE_LINE
			fStartX	= ObjectGeography(oInput, OBJ_GEO_LINEBEGX)
			fStartY	= ObjectGeography(oInput, OBJ_GEO_LINEBEGY)
			fEndX	= ObjectGeography(oInput, OBJ_GEO_LINEENDX)
			fEndY	= ObjectGeography(oInput, OBJ_GEO_LINEENDY)
			'Print "MATHGetDirection( " & fStartX & ", " & fStartY & " | " & fEndX & ", " & fEndY & " )"
			fDirection = MATHGetDirection(fStartX, fStartY, fEndX, fEndY)

		Case OBJ_TYPE_COLLECTION, OBJ_TYPE_MPOINT
			fDirection = -1

		Case OBJ_TYPE_ARC
			fDirection = -1

		Case OBJ_TYPE_ELLIPSE, OBJ_TYPE_RECT, OBJ_TYPE_ROUNDRECT
			fDirection = -1

		Case OBJ_TYPE_PLINE
			fDirection = -1

		Case OBJ_TYPE_REGION
			For nSegm = 1 To ObjectInfo(oInput, OBJ_INFO_NPOLYGONS)
				fStartX = ObjectNodeX(oInput, nSegm, 1)
				fStartY = ObjectNodeY(oInput, nSegm, 1)
				For nNode = 2 To ObjectInfo(oInput, OBJ_INFO_NPOLYGONS + nSegm)
					fEndX 		= ObjectNodeX(oInput, nSegm, nNode)
					fEndY 		= ObjectNodeY(oInput, nSegm, nNode)
					fCurLength	= Distance(fStartX, fStartY, fEndX, fEndY, "m")

					If fCurLength > 0 Then
						If fStartX > fEndX Then
							If fStartY > fEndY Then
								fCurDirection 	= MATHGetDirection(fEndX, fEndY, fStartX, fStartY)
							Else
								fCurDirection 	= MATHGetDirection(fStartX, fStartY, fEndX, fEndY)
							End If
						ElseIf fStartY > fEndY Then
							If fStartX < fEndX Then
								fCurDirection 	= MATHGetDirection(fEndX, fEndY, fStartX, fStartY)
							Else
								fCurDirection 	= MATHGetDirection(fStartX, fStartY, fEndX, fEndY)
							End If
						Else
							fCurDirection 	= MATHGetDirection(fStartX, fStartY, fEndX, fEndY)
						End If

						Print nSegm & " " & nNode & ", Direction: " & FormatNumber$(Round(fCurDirection, 0.01)) & ", Length: " & FormatNumber$(Round(fCurLength, 0.01)) & " Weight: " & FormatNumber$(Round(fCurLength / (fLength + fCurLength), 0.01))
						Print "   Total " & ", Direction: " & FormatNumber$(Round(fDirection, 0.01)) & ", Length: " & FormatNumber$(Round(fLength, 0.01)) & " Weight: " & FormatNumber$(Round(fLength / (fLength + fCurLength), 0.01))
						fDirection	= (fCurDirection * (fCurLength / (fLength + fCurLength))) + (fDirection * (fLength / (fLength + fCurLength)))
					End If

					fLength = fLength + fCurLength
					fStartX = fEndX
					fStartY = fEndY
				Next	'nNode
			Next	'nSegm

		Case Else
			fDirection = -1
	End Case

	OBJDirection = fDirection

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "OBJDirection")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function OBJDirectionWtAvg(	  ByVal oInput As Object			'The object to calculate the direction off, only works with projected coordinate systems
						) As Float					'Direction of object, 360 degrees, East = 0, counter-clockwise, unsupported objects return -1

Dim	fStartX, fStartY, fEndX, fEndY As Float,
	fDirection, fCurDirection, fCurLength, fLength As Float,
	nSegm, nNode As Integer,
	symInput As Symbol

OnError GoTo ErrorOccured

OBJDirectionWtAvg = -1

	Do Case ObjectInfo(oInput, OBJ_INFO_TYPE)

		Case OBJ_TYPE_TEXT
			fDirection = -1

		Case OBJ_TYPE_LINE, OBJ_TYPE_ARC
			fDirection = OBJDirectionWtAvg(ConvertToPline(oInput))

		Case OBJ_TYPE_COLLECTION, OBJ_TYPE_MPOINT
			fDirection = -1

		Case OBJ_TYPE_ELLIPSE, OBJ_TYPE_RECT, OBJ_TYPE_ROUNDRECT
			fDirection = OBJDirectionWtAvg(ConvertToRegion(oInput))

		Case OBJ_TYPE_PLINE, OBJ_TYPE_REGION

			For nSegm = 1 To ObjectInfo(oInput, OBJ_INFO_NPOLYGONS)
				fStartX = ObjectNodeX(oInput, nSegm, 1)
				fStartY = ObjectNodeY(oInput, nSegm, 1)
				For nNode = 2 To ObjectInfo(oInput, OBJ_INFO_NPOLYGONS + nSegm)
					fEndX 		= ObjectNodeX(oInput, nSegm, nNode)
					fEndY 		= ObjectNodeY(oInput, nSegm, nNode)
					fCurLength	= Distance(fStartX, fStartY, fEndX, fEndY, "m")

					If fCurLength > 0 Then
						If fStartX > fEndX Then
							If fStartY > fEndY Then
								fCurDirection 	= MATHGetDirection(fEndX, fEndY, fStartX, fStartY)
							Else
								fCurDirection 	= MATHGetDirection(fStartX, fStartY, fEndX, fEndY)
							End If
						ElseIf fStartY > fEndY Then
							If fStartX < fEndX Then
								fCurDirection 	= MATHGetDirection(fEndX, fEndY, fStartX, fStartY)
							Else
								fCurDirection 	= MATHGetDirection(fStartX, fStartY, fEndX, fEndY)
							End If
						Else
							fCurDirection 	= MATHGetDirection(fStartX, fStartY, fEndX, fEndY)
						End If

						Print nSegm & " " & nNode & ", Direction: " & FormatNumber$(Round(fCurDirection, 0.01)) & ", Length: " & FormatNumber$(Round(fCurLength, 0.01)) & " Weight: " & FormatNumber$(Round(fCurLength / (fLength + fCurLength), 0.01))
						Print "   Total " & ", Direction: " & FormatNumber$(Round(fDirection, 0.01)) & ", Length: " & FormatNumber$(Round(fLength, 0.01)) & " Weight: " & FormatNumber$(Round(fLength / (fLength + fCurLength), 0.01))
						fDirection	= (fCurDirection * (fCurLength / (fLength + fCurLength))) + (fDirection * (fLength / (fLength + fCurLength)))
					End If

					fLength = fLength + fCurLength
					fStartX = fEndX
					fStartY = fEndY
				Next	'nNode
			Next	'nSegm

		Case Else
			fDirection = -1
	End Case

	OBJDirectionWtAvg = fDirection

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "OBJDirectionWtAvg")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function OBJDirectionMedian(	  ByVal oInput As Object			'The object to calculate the direction off, only works with projected coordinate systems
						) As Float					'Direction of object, 360 degrees, East = 0, counter-clockwise, unsupported objects return -1

Dim	fStartX, fStartY, fEndX, fEndY As Float,
	fDirection, fCurDirection, fCurLength, fLength, arrDirectionLengths(181) As Float,
	nSegm, nNode, nItem As Integer

OnError GoTo ErrorOccured

OBJDirectionMedian = -1

	Do Case ObjectInfo(oInput, OBJ_INFO_TYPE)

		Case OBJ_TYPE_TEXT
			fDirection = -1

		Case OBJ_TYPE_LINE, OBJ_TYPE_ARC
			fDirection = OBJDirectionMedian(ConvertToPline(oInput))

		Case OBJ_TYPE_COLLECTION, OBJ_TYPE_MPOINT
			fDirection = -1

		Case OBJ_TYPE_ELLIPSE, OBJ_TYPE_RECT, OBJ_TYPE_ROUNDRECT
			fDirection = OBJDirectionMedian(ConvertToRegion(oInput))

		Case OBJ_TYPE_PLINE, OBJ_TYPE_REGION

			For nSegm = 1 To ObjectInfo(oInput, OBJ_INFO_NPOLYGONS)
				fStartX = ObjectNodeX(oInput, nSegm, 1)
				fStartY = ObjectNodeY(oInput, nSegm, 1)
				For nNode = 2 To ObjectInfo(oInput, OBJ_INFO_NPOLYGONS + nSegm)
					fEndX 		= ObjectNodeX(oInput, nSegm, nNode)
					fEndY 		= ObjectNodeY(oInput, nSegm, nNode)
					fCurLength	= Distance(fStartX, fStartY, fEndX, fEndY, "m")

					If fCurLength > 0 Then
						If fStartX > fEndX Then
							If fStartY > fEndY Then
								fCurDirection 	= MATHGetDirection(fEndX, fEndY, fStartX, fStartY)
							Else
								fCurDirection 	= MATHGetDirection(fStartX, fStartY, fEndX, fEndY)
							End If
						ElseIf fStartY > fEndY Then
							If fStartX < fEndX Then
								fCurDirection 	= MATHGetDirection(fEndX, fEndY, fStartX, fStartY)
							Else
								fCurDirection 	= MATHGetDirection(fStartX, fStartY, fEndX, fEndY)
							End If
						Else
							fCurDirection 	= MATHGetDirection(fStartX, fStartY, fEndX, fEndY)
						End If

						nItem	= Round(fCurDirection, 1) + 1
						arrDirectionLengths(nItem) = arrDirectionLengths(nItem) + fCurLength
					End If

					fLength = fLength + fCurLength
					fStartX = fEndX
					fStartY = fEndY
				Next	'nNode
			Next	'nSegm

			For nItem = 1 To Ubound(arrDirectionLengths)
				fCurLength = fCurLength + arrDirectionLengths(nItem)
				If fCurLength > (fLength / 2) Then
					fDirection = (nItem - 1)
					Exit For
				End If
			Next

		Case Else
			fDirection = -1
	End Case

	OBJDirectionMedian = fDirection

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "OBJDirectionMedian")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Business Insight
'Parameters:
'	:
'Return value:
'	A point created along the input (poly)line
'	Only works for single segment polylines
'	Make sure to set the projected coordinate system to use before calling this function
'**********************************************************************************************''
Function OBJCartesianCreatePointAlong(	  ByVal oPolyline As Object	'The polyline to create the point along
								, ByVal fDistance As Float	'Distance along polyline, can also be negative
								, ByVal fOffset As Float		'Offset from polyline, negative is left, positive is right
								) As Object

Dim	oPoint As Object,
	fLength, fLengthTotal, fLengthSofar, fX, fY, fXNext, fYNext,fXMid, fYMid, fXDiff, fYDiff As Float,
    	nNumNodes, nNode As Integer

OnError GoTo ErrorOccured

	OBJCartesianCreatePointAlong = CreatePoint(0.00, 0.00)
	OBJCartesianCreatePointAlong = Centroid(oPolyline)
	OBJCartesianCreatePointAlong = CreatePoint(ObjectNodeX(oPolyline, 1, 1), ObjectNodeY(oPolyline, 1, 1))

	If ObjectInfo(oPolyline, OBJ_INFO_TYPE) = OBJ_TYPE_LINE Then
		oPolyline = ConvertToPline(oPolyline)
 	End If
	If ObjectInfo(oPolyline, OBJ_INFO_TYPE) = OBJ_TYPE_PLINE Then
		If ObjectInfo(oPolyline, OBJ_INFO_NPOLYGONS) > 1 Then
			'**Only works for single segment polylines
			Exit Function
		End If

		nNumNodes		= ObjectInfo(oPolyline,OBJ_INFO_NPNTS)
		fLengthTotal	= CartesianObjectLen(oPolyline, "m")
		fLength		= 0
		fLengthSofar	= 0

		If fDistance < 0 Then
			fX 			= ObjectNodeX(oPolyline, 1, 2)
			fY			= ObjectNodeY(oPolyline, 1, 2)
			fXNext		= ObjectNodeX(oPolyline, 1, 1)
			fYNext		= ObjectNodeY(oPolyline, 1, 1)
'			Print "Option 1: CartesianDistance: " & FormatNumber$(fX) & " " & FormatNumber$(fY) & " | "  & FormatNumber$(fXNext) & " " & FormatNumber$(fYNext)
			fLength 		= CartesianDistance(fX, fY, fXNext, fYNext, "m")

			fDistance		= (-1 * fDistance) + fLength	'**Making it positive & adding the length of the first segment
			fOffset		= -1 * fOffset		'**Mirroring the offset as we mirror the line too

'			Print "Option 1: Distance: " & FormatNumber$(fDistance) & " m., Offset: " & FormatNumber$(fOffset) & " m."

		ElseIf fDistance > fLengthTotal Then
			fLengthSofar	= fLengthTotal
			fX 			= ObjectNodeX(oPolyline, 1, (nNumNodes - 1))
			fY			= ObjectNodeY(oPolyline, 1, (nNumNodes - 1))
			fXNext		= ObjectNodeX(oPolyline, 1, nNumNodes)
			fYNext		= ObjectNodeY(oPolyline, 1, nNumNodes)
'			Print "Option 2: CartesianDistance: " & FormatNumber$(fX) & " " & FormatNumber$(fY) & " | "  & FormatNumber$(fXNext) & " " & FormatNumber$(fYNext)
			fLength 		= CartesianDistance(fX, fY, fXNext, fYNext, "m")

			fDistance		= fDistance + fLength	'**Adding the length of the last segment

'			Print "Option 1: Distance: " & FormatNumber$(fDistance) & " m., Offset: " & FormatNumber$(fOffset) & " m."

		Else
			fX 			= ObjectNodeX(oPolyline, 1, 1)
			fY			= ObjectNodeY(oPolyline, 1, 1)

			For nNode = 2 To nNumNodes
				fXNext	= ObjectNodeX(oPolyline, 1, nNode)
				fYNext	= ObjectNodeY(oPolyline, 1, nNode)
				fLength	= CartesianDistance(fX, fY, fXNext, fYNext, "m")
				If (fLengthSofar + fLength) >= fDistance Then
					Exit For
				End If
				fLengthSofar = fLengthSofar + fLength
				fX	= fXNext
				fY	= fYNext
			Next	'nNode

'			Print "Option 3: Distance: " & FormatNumber$(fDistance) & " m., Offset: " & FormatNumber$(fOffset) & " m."

		End If

		fXMid	= fX + (fDistance - fLengthSofar) * (fXNext-fX) / Sqr((fX-fXNext)^2 + (fY-fYNext) ^ 2)
		fYMid	= fY + (fDistance - fLengthSofar) * (fYNext-fY) / Sqr((fX-fXNext)^2 + (fY-fYNext) ^ 2)

		If fOffset = 0 Then
			oPoint = CreatePoint(fXMid,fYMid)
		Else
			fXDiff	= (fY-fYMid) / Sqr((fY-fYMid) ^ 2 + (fX-fXMid) ^ 2) * Abs(fOffset)
			fYDiff	= (fXMid-fX) / Sqr((fY-fYMid) ^ 2 + (fX-fXMid) ^ 2) * Abs(fOffset)
			If fOffset < 0 Then
				'**Left side
				oPoint	= CreatePoint(fXMid + fXDiff, fYMid + fYDiff)
			Else
				'**Right Side
				oPoint	= CreatePoint(fXMid - fXDiff, fYMid - fYDiff)
			End If
		End If
	End If

	OBJCartesianCreatePointAlong = oPoint

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "OBJCartesianCreatePointAlong")
	Call ERRPrint()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function OBJCombineFromTable(	  ByVal sTab As String
						, ByVal sCol As String
						, ByVal sID As String
						) As Object

Dim	oCombined As Object,
	sCmd As String

OnError GoTo ErrorOccured

	sCmd = "Select * From " & sTab
	If sCol Then
		If ColumnInfo(sTab, sCol, COL_INFO_TYPE) = COL_TYPE_CHAR Then
			sCmd = sCmd & " Where " & sCol & " = " & Chr$(34) & sID & Chr$(34)
		Else
			sCmd = sCmd & " Where " & sCol & " = " & sID
		End If
	End If


	If SystemInfo(SYS_INFO_MIVERSION) >= 1700 Then
		sCmd = sCmd
			& " Into __TO__COMBINE NoSelect Hide"
	Else
		sCmd = sCmd
			& " Into __TO__COMBINE NoSelect"
	End If

'	Print sCmd
	Run Command sCmd

	Set Progressbars Off
	Create Object As Union
		From __TO__COMBINE
		Into Variable oCombined
'	Print "Area: " & CartesianArea(oCombined, "sq m")
	Set Progressbars On

	Close Table __TO__COMBINE

	OBJCombineFromTable = oCombined

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "OBJCombineFromTable")
	Call ERRShow()

End Function

