'*******************************************************************************
'** 	Created By Peter Horsbøll Møller, Pitney Bowes
'** 	Program:
'** 	Modul:
'**
'*******************************************************************************

'-------------------------------------
Include "MapBasic.def"
Include "Icons.def"
Include "Menu.def"
'**default constants...
Include "Defaults.def"

'-------------------------------------
Include "DEBUGLib.def"
Include "ERRORLib.def"
Include "HEXAGONLib.def"
Include "MAPPERLib.def"

Define	HEX_POINTY_OFFSET_X_MULTIPLIER	0.5
Define	HEX_FLAT_OFFSET_X_MULTIPLIER		0.75
Define	HEX_POINTY_OFFSET_Y_MULTIPLIER	1.5
Define	HEX_FLAT_OFFSET_Y_MULTIPLIER		1.0

Dim	mbUseBaseForHexagon As Logical,
	mnNumHexagonsCreated, nNumHexagonRows, nNumHexagonColumns, mnTimeSpent As Integer,
	mnNumHexagonsEstimated, mnNumHexagonColumnsEstimated, mnNumHexagonRowsEstimated As Integer

'**********************************************************************************************''
' Property
'**********************************************************************************************''
Sub HEXSetUseBaseForHexagon(ByVal bValue As Logical)

OnError GoTo ErrorOccured

	mbUseBaseForHexagon = bValue
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "HEXSetUseBaseForHexagon")

End Sub
'**********************************************************************************************''
Function HEXUseBaseForHexagon() As Logical

OnError GoTo ErrorOccured

	HEXUseBaseForHexagon = mbUseBaseForHexagon
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "HEXUseBaseForHexagon")

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function HEXTimeSpent() As Integer	'in seconds

OnError GoTo ErrorOccured

	HEXTimeSpent = mnTimeSpent
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "HEXTimeSpent")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function HEXNumCreated() As Integer

OnError GoTo ErrorOccured

	HEXNumCreated = mnNumHexagonsCreated
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "HEXNumCreated")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function HEXNumHexagonColumns() As Integer

OnError GoTo ErrorOccured

	HEXNumHexagonColumns = mnNumHexagonColumns
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "HEXNumHexagonColumns")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function HEXNumHexagonRows() As Integer

OnError GoTo ErrorOccured

	HEXNumHexagonRows = mnNumHexagonRows
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "HEXNumHexagonRows")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function HEXNumHexagonsEstimated() As Integer

OnError GoTo ErrorOccured

	HEXNumHexagonsEstimated = mnNumHexagonsEstimated
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "HEXNumHexagonsEstimated")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function HEXNumHexagonColumnsEstimated() As Integer

OnError GoTo ErrorOccured

	HEXNumHexagonColumnsEstimated = mnNumHexagonColumnsEstimated
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "HEXNumHexagonColumnsEstimated")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function HEXNumHexagonRowsEstimated() As Integer

OnError GoTo ErrorOccured

	HEXNumHexagonRowsEstimated = mnNumHexagonRowsEstimated
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "HEXNumHexagonRowsEstimated")
	Call ERRShow()

End Function


'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function HEXGetCorner(	  ByVal oCenter As Object
					, ByVal fSize As Float
					, ByVal sUnit As String
					, ByVal nCorner As Integer
					, ByVal nCalculationType As Integer
					, ByVal nHexagonType As Integer
					) As Object

OnError GoTo ErrorOccured

	If nHexagonType = HEX_TYPE_POINTY Then
		HEXGetCorner = HEXGetCornerPointy(oCenter, fSize, sUnit, nCorner, nCalculationType)
	Else
		HEXGetCorner = HEXGetCornerFlat(oCenter, fSize, sUnit, nCorner, nCalculationType)
	End If

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "HEXGetCorner")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function HEXGetCornerPointy(	  ByVal oCenter As Object
						, ByVal fSize As Float
						, ByVal sUnit As String
						, ByVal nCorner As Integer
						, ByVal nCalculationType As Integer
						) As Object

Dim	fAngleInDegree As Float,
	oCorner As Object

OnError GoTo ErrorOccured

HEXGetCornerPointy = oCenter

	fAngleInDegree = 60 * nCorner + 30
	If nCalculationType = HEX_CALC_TYPE_SPHERICAL Then
		oCorner = SphericalOffset(oCenter, fAngleInDegree, fSize, sUnit)
	Else
		oCorner = CartesianOffset(oCenter, fAngleInDegree, fSize, sUnit)
	End If

	HEXGetCornerPointy = oCorner

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "HEXGetCornerPointy")
	Call ERRShow()

End Function



'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function HEXGetCornerFlat( ByVal oCenter As Object
					, ByVal fSize As Float
					, ByVal sUnit As String
					, ByVal nCorner As Integer
					, ByVal nCalculationType As Integer
					) As Object

Dim	fAngleInDegree As Float,
	oCorner As Object

OnError GoTo ErrorOccured

HEXGetCornerFlat = oCenter

	'**https://www.redblobgames.com/grids/hexagons/
	fAngleInDegree = 60 * nCorner
	If nCalculationType = HEX_CALC_TYPE_SPHERICAL Then
		oCorner = SphericalOffset(oCenter, fAngleInDegree, fSize, sUnit)
	Else
		oCorner = CartesianOffset(oCenter, fAngleInDegree, fSize, sUnit)
	End If

	HEXGetCornerFlat = oCorner

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "HEXGetCornerFlat")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function HEXCreate(	  ByVal oCenter As Object
				, ByVal fSize As Float
				, ByVal sUnit As String
				, ByVal nCalculationType As Integer
				, ByVal nHexagonType As Integer
				) As Object

Dim	nCorner As Integer,
	oHex, oCorner As Object

OnError GoTo ErrorOccured

	If nHexagonType = HEX_TYPE_POINTY Then
		HEXCreate = HEXCreatePointy(oCenter, fSize, sUnit, nCalculationType)
	Else
		HEXCreate = HEXCreateFlat(oCenter, fSize, sUnit, nCalculationType)
	End If

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "HEXCreate")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function HEXCreatePointy( ByVal oCenter As Object
					, ByVal fSize As Float
					, ByVal sUnit As String
					, ByVal nCalculationType As Integer
					) As Object

Dim	nCorner As Integer,
	oHex, oCorner As Object

OnError GoTo ErrorOccured

HEXCreatePointy = oCenter

	Create Pline Into Variable oHex 0

	For nCorner = 1 To 6
		oCorner = HEXGetCornerPointy(oCenter, fSize, sUnit, nCorner, nCalculationType)
		Alter Object oHex
			Node Add Position 1, nCorner (CentroidX(oCorner), CentroidY(oCorner))
	Next

	HEXCreatePointy = ConvertToRegion(oHex)

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "HEXCreatePointy")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function HEXCreateFlat(	  ByVal oCenter As Object
					, ByVal fSize As Float
					, ByVal sUnit As String
					, ByVal nCalculationType As Integer
					) As Object

Dim	nCorner As Integer,
	oHex, oCorner As Object

OnError GoTo ErrorOccured

HEXCreateFlat = oCenter

	Create Pline Into Variable oHex 0

	For nCorner = 1 To 6
		oCorner = HEXGetCornerFlat(oCenter, fSize, sUnit, nCorner, nCalculationType)
		Alter Object oHex
			Node Add Position 1, nCorner (CentroidX(oCorner), CentroidY(oCorner))
	Next

	HEXCreateFlat = ConvertToRegion(oHex)

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "HEXCreateFlat")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function HEXOffSet(	  ByVal oInput As Object
				, ByVal fAngle As Float
				, ByVal fDistance As Float
				, ByVal sUnit As String
				, ByVal nCalculationType As Integer
				) As Object

OnError GoTo ErrorOccured

	If nCalculationType = HEX_CALC_TYPE_SPHERICAL Then
		HEXOffSet = SphericalOffset(oInput, fAngle, fDistance, sUnit)
	Else
		HEXOffSet = CartesianOffset(oInput, fAngle, fDistance, sUnit)
	End If

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "HEXOffSet")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function HEXGetWidth( ByVal fSize As Float
				, ByVal nHexagonType As Integer
				) As Float

OnError GoTo ErrorOccured

	If nHexagonType = HEX_TYPE_POINTY Then
		HEXGetWidth = Sqr(3) * fSize
	Else
		HEXGetWidth = 2 * fSize
	End If

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "HEXGetWidth")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function HEXGetHeight(	  ByVal fSize As Float
					, ByVal nHexagonType As Integer
					) As Float

OnError GoTo ErrorOccured

	If nHexagonType = HEX_TYPE_POINTY Then
		HEXGetHeight = 2 * fSize
	Else
		HEXGetHeight = Sqr(3) * fSize
	End If

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "HEXGetHeight")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function HEXGetOffsetX(	  ByVal fSize As Float
					, ByVal nHexagonType As Integer
					) As Float

OnError GoTo ErrorOccured

	HEXGetOffsetX = HEXGetWidth(fSize, nHexagonType) * HEXGetOffsetXMultiplier(nHexagonType)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "HEXGetOffsetX")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function HEXGetOffsetXMultiplier(	  ByVal nHexagonType As Integer
							) As Float

OnError GoTo ErrorOccured

	If nHexagonType = HEX_TYPE_POINTY Then
		HEXGetOffsetXMultiplier = HEX_POINTY_OFFSET_X_MULTIPLIER
	Else
		HEXGetOffsetXMultiplier = HEX_FLAT_OFFSET_X_MULTIPLIER
	End If

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "HEXGetOffsetXMultiplier")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function HEXGetOffsetY(	  ByVal fSize As Float
					, ByVal nHexagonType As Integer
					) As Float

OnError GoTo ErrorOccured

	HEXGetOffsetY = HEXGetHeight(fSize, nHexagonType) * HEXGetOffsetYMultiplier(nHexagonType)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "HEXGetOffsetY")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function HEXGetOffsetYMultiplier(	  ByVal nHexagonType As Integer
							) As Float

OnError GoTo ErrorOccured

	If nHexagonType = HEX_TYPE_POINTY Then
		HEXGetOffsetYMultiplier = HEX_POINTY_OFFSET_Y_MULTIPLIER
	Else
		HEXGetOffsetYMultiplier = HEX_FLAT_OFFSET_Y_MULTIPLIER
	End If

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "HEXGetOffsetYMultiplier")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function HEXGetStartX(	  ByVal fX As Float
					, ByVal fWidth As Float
					, ByVal fOffSetXMultiplier As Float
					) As Float

Dim	fValue As Float

OnError GoTo ErrorOccured

HEXGetStartX = fX

	fValue		= Int(fX / (fWidth * fOffSetXMultiplier))
	Print "Int(" & FormatNumber$(fX) & " / (" & FormatNumber$(fWidth) & " * " & FormatNumber$(fOffSetXMultiplier)& ") = " & FormatNumber$(fValue)
	If fValue Mod 2 = 0 Then
		fValue = fValue - 1
	End If
	HEXGetStartX	= fValue * (fWidth * fOffSetXMultiplier)

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "HEXGetStartX")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function HEXGetStartY(	  ByVal fY As Float
					, ByVal fHeight As Float
					, ByVal fOffSetYMultiplier As Float
					) As Float

Dim	fValue As Float

OnError GoTo ErrorOccured

HEXGetStartY = fY

	fValue		= Int(fY / (fHeight * fOffSetYMultiplier)) + 1
	Print "Int(" & FormatNumber$(fY) & " / (" & FormatNumber$(fHeight) & " * " & FormatNumber$(fOffSetYMultiplier)& ") = " & FormatNumber$(fValue)
	HEXGetStartY	= fValue * (fHeight * fOffSetYMultiplier)

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "HEXGetStartY")
	Call ERRShow()

End Function

''**********************************************************************************************''
''Created by Peter Horsbøll Møller, Pitney Bowes
''Parameters:
''	:
''Return value:
''
''**********************************************************************************************''
'Function HEXCreatePointyForExtent(  ByVal sTab As String
'							, ByVal sCol As String
'							, ByVal fSize As Float
'							, ByVal sUnit As String
'							, ByVal fMinX As Float
'							, ByVal fMinY As Float
'							, ByVal fMaxX As Float
'							, ByVal fMaxY As Float
'							, ByVal nCalculationType As Integer
'							) As Integer				'Returns the number of hexagons created
'
'Dim	fX, fY, fWidth, fHeight As Float,
'	nRowNo, nColNo, nCount, nCountSum As Integer,
'	sRowNo, sColNo As String,
'	oHex As Object
'
'OnError GoTo ErrorOccured
'
'HEXCreatePointyForExtent = 0
'
''Testing
'' Set Table HexTest Redraw Off
'' Print WINHSetCoordsysUsingTable("HexTest")
'' Print HEXCreatePointyForMap("HexTest", "HEXNO", 250, "m", FrontWindow(), 2)
'
'	fWidth	= Sqr(3) * fSize
'	fHeight	= 2 * fSize
'	Call DEBUGPrint(Time(24) & ": Width: " & FormatNumber$(fWidth) & " " & sUnit & " Height: " & FormatNumber$(fHeight) & " " & sUnit)
'
'	fX		= fMinX
'	'**Pointy Hexagon
'	Do Until FALSE		'Column wise
'		nCount 	= 0
'		nRowNo	= 0
'		nColNo	= nColNo + 1
'		sColNo	= Format$(Round(nColNo/2, 1), "0000")
'		If nColNo Mod 2 = 1 Then
'			fY		= fMaxY
'		Else
'			fY		= fMaxY - (fHeight * 0.75)
'		End If
''		Call DEBUGPrint(Time(24) & ": Col " & sColNo & " X: " & FormatNumber$(fX))
'		Do Until FALSE		'Row Wise
'			nRowNo	= nRowNo + 1
'			sRowNo	= Format$(((nRowNo * 2) - (nColNo Mod 2)), "0000")
'			nCount	= nCount + 1
'			oHex = HEXCreatePointy(CreatePoint(fX, fY), fSize, sUnit, nCalculationType)
'
'			Insert Into sTab
'				(sCol, OBJ)
'				Values
'				(sColNo & "-" & sRowNo, oHex)
'
'			If nColNo Mod 2 = 1 Then
'				If fY < (fMinY + (fHeight * 0.25)) Then
'					Exit Do
'				End If
'			Else
'				If fY < (fMinY + (fHeight * 0.5)) Then
'					Exit Do
'				End If
'			End If
'			fY = fY - (fHeight * 1.5)
'		Loop		'Row wise
'		If fX > fMaxX Then
'			Exit Do
'		End If
'		fX = fX + (fWidth * 0.5)
'
'		nCountSum = nCountSum + nCount
''		Call DEBUGPrint(Time(24) & ":    " & FormatNumber$(nColNo) & ". Column: Created " & FormatNumber$(nCount) & " hexagons. Totally hexagons created: " & FormatNumber$(nCountSum))
'
''		If 500 Mod nColNo = 1 Then
''			If Ask(FormatNumber$(nColNo) & " hexagon columns created. Continue?", "No", "Yes") Then
''				Exit Do
''			End If
''		End If
'	Loop		'Column wise
'
'	mnNumHexagonsCreated	= nCountSum
'	nNumHexagonRows		= nCount
'	nNumHexagonColumns		= nColNo
'	mnTimeSpent		= Timer() - nTime

'	Call DEBUGPrint(Time(24) & ": Total Number of Hexagons: " & FormatNumber$(nCountSum) & " in " & FormatNumber$(mnTimeSpent) & " secs")
'	Call DEBUGPrint(Time(24) & ": Number of Rows: " & FormatNumber$(nNumHexagonRows) & " Number of Columns: " & FormatNumber$(nNumHexagonColumns))

'	HEXCreatePointyForExtent = nCountSum
'
'	Exit Function
''-------------------------
'ErrorOccured:
'	Call ERRCreate(Err(), Error$(), "HEXCreatePointyForExtent")
'	Call ERRShow()
'
'End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function HEXCreateForExtent(	  ByVal sTab As String
						, ByVal sCol As String
						, ByVal fSize As Float
						, ByVal sUnit As String
						, ByVal fMinX As Float
						, ByVal fMinY As Float
						, ByVal fMaxX As Float
						, ByVal fMaxY As Float
						, ByVal nCalculationType As Integer
						, ByVal nHexagonType As Integer
						) As Integer				'Returns the number of hexagons created

Dim	fX, fY, fStartX, fStartY, fYCompare, fWidth, fHeight, fOffsetX, fOffsetY, fDistance As Float,
	nRowNo, nColNo, nCount, nCountSum, nTime As Integer,
	sRowNo, sColNo As String,
	oHex, oPoint As Object

OnError GoTo ErrorOccured

HEXCreateForExtent = 0

'Testing
'Set Table HexTextLatLong Redraw Off
'Set Table HexTextLatLong FastEdit On
'Print WINHSetCoordsysUsingTable("HexTextLatLong")
'Print HEXCreateForMap("HexTextLatLong", "HEXNO", 5, "m", FrontWindow(), 2, 1)
'Commit Table HexTextLatLong
'Set Table HexTextLatLong Redraw On

	nTime	= Timer()

	fWidth	= HEXGetWidth(fSize, nHexagonType)
	fHeight	= HEXGetHeight(fSize, nHexagonType)
	fOffsetX	= HEXGetOffsetX(fSize, nHexagonType)
	fOffsetY	= HEXGetOffsetY(fSize, nHexagonType)
	Call DEBUGPrint(Time(24) & " HEXCreateForExtent: Creating Hexagons, size: " & FormatNumber$(fSize) & " " & sUnit &  ": Width: " & FormatNumber$(fWidth) & " " & sUnit & " Height: " & FormatNumber$(fHeight) & " " & sUnit)
	Call DEBUGPrint(Time(24) & " Creating Hexagons, Offset X: " & FormatNumber$(fOffsetX) & " " & sUnit &  ": Offset Y: " & FormatNumber$(fOffsetY) & " " & sUnit)

	If HEXUseBaseForHexagon() Then
		fStartX	= HEXGetStartX(fMinX, fWidth, HEXGetOffsetXMultiplier(nHexagonType))
		fStartY	= HEXGetStartY(fMaxY, fHeight, HEXGetOffsetYMultiplier(nHexagonType))
	Else
		fStartX	= fMinX
		fStartY	= fMaxY
	End If
	oPoint	= CreatePoint(fStartX, fStartY)

	mnNumHexagonColumnsEstimated	= HEXEstimateColumns(fSize, sUnit, fStartX, fMinY, fMaxX, fStartY, nCalculationType, nHexagonType)
	mnNumHexagonRowsEstimated	= HEXEstimateRows(fSize, sUnit, fStartX, fMinY, fMaxX, fStartY, nCalculationType, nHexagonType)
	mnNumHexagonsEstimated		= mnNumHexagonColumnsEstimated * mnNumHexagonRowsEstimated
	Call DEBUGPrint(Time(24) & " Estimated number of Column: " & FormatNumber$(mnNumHexagonColumnsEstimated))
	Call DEBUGPrint(Time(24) & " Estimated number of Rows: " & FormatNumber$(mnNumHexagonRowsEstimated))
	Call DEBUGPrint(Time(24) & " Estimated number of Hexagons: " & FormatNumber$(mnNumHexagonsEstimated))

	'**Hexagon
	Do Until FALSE		'Column wise
		nCount 	= 0
		nRowNo	= 0
		nColNo	= nColNo + 1
		sColNo	= Format$(Round(nColNo/2, 1), "0000")

		fDistance	= Round(nColNo/2, 1) * fWidth
		If (nColNo Mod 2 = 0) Then
				oPoint	= HEXOffset(oPoint, 270, fOffsetY / 2, sUnit, nCalculationType)
		End If
		fX		= CentroidX(oPoint)

		fYCompare		= CentroidY(HEXOffset(CreatePoint(fX, fMinY), 90, fHeight, sUnit, nCalculationType))

		Do Until FALSE		'Row Wise
			nRowNo	= nRowNo + 1
			sRowNo	= Format$(((nRowNo * 2) - (nColNo Mod 2)), "0000")
			nCount	= nCount + 1
			fY		= CentroidY(oPoint)
			oHex = HEXCreate(oPoint, fSize, sUnit, nCalculationType, nHexagonType)

			Insert Into sTab
				(sCol, OBJ)
				Values
				(sColNo & "-" & sRowNo, oHex)

			If fY < fYCompare Then
				Exit Do
			End If

			oPoint	= HEXOffset(oPoint, 270, fOffsetY, sUnit, nCalculationType)
		Loop		'Row wise

		If fX > fMaxX Then
			Exit Do
		End If
		oPoint = HEXOffset(CreatePoint(fX, fStartY), 0, fOffsetX, sUnit, nCalculationType)

		nCountSum = nCountSum + nCount
		If nColNo Mod 100 = 0 Then
			Call DEBUGPrint(Time(24) & ":    " & FormatNumber$(nColNo) & ". Column: Created " & FormatNumber$(nCount) & " hexagons per column. Totally hexagons created: " & FormatNumber$(nCountSum))

			If nColNo Mod 1000 = 0 Then
				If Ask(FormatNumber$(nColNo) & " hexagon columns created. Continue?", "No", "Yes") Then
					Exit Do
				End If
			End If
		End If
	Loop		'Column wise

	mnNumHexagonsCreated	= nCountSum
	nNumHexagonRows		= nRowNo
	nNumHexagonColumns		= nColNo
	mnTimeSpent			= Timer() - nTime

	Call DEBUGPrint(Time(24) & ": Total Number of Hexagons: " & FormatNumber$(nCountSum) & " in " & FormatNumber$(mnTimeSpent) & " secs")
	Call DEBUGPrint(Time(24) & ": Number of Rows: " & FormatNumber$(nNumHexagonRows) & " Number of Columns: " & FormatNumber$(nNumHexagonColumns))

	HEXCreateForExtent = nCountSum

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "HEXCreateForExtent")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function HEXCreatePointyForExtent(	  ByVal sTab As String
							, ByVal sCol As String
							, ByVal fSize As Float
							, ByVal sUnit As String
							, ByVal fMinX As Float
							, ByVal fMinY As Float
							, ByVal fMaxX As Float
							, ByVal fMaxY As Float
							, ByVal nCalculationType As Integer
							) As Integer				'Returns the number of hexagons created

'Dim	fX, fY, fStartX, fStartY, fYCompare, fWidth, fHeight, fOffsetX, fOffsetY, fDistance As Float,
'	nRowNo, nColNo, nCount, nCountSum, nTime, nHexagonType As Integer,
'	sRowNo, sColNo As String,
'	oHex, oPoint As Object

OnError GoTo ErrorOccured

HEXCreatePointyForExtent =  HEXCreateForExtent(sTab, sCol, fSize, sUnit, fMinX, fMinY, fMaxX, fMaxY, nCalculationType, HEX_TYPE_POINTY)

'Testing
'Set Table HexTextLatLong Redraw Off
'Set Table HexTextLatLong FastEdit On
'Print WINHSetCoordsysUsingTable("HexTextLatLong")
'Print HEXCreatePointyForMap("HexTextLatLong", "HEXNO", 5, "m", FrontWindow(), 2)
'Commit Table HexTextLatLong
'Set Table HexTextLatLong Redraw On

'	nTime		= Timer()
'	nHexagonType	= HEX_TYPE_POINTY
'
'	fWidth	= HEXGetWidth(fSize, nHexagonType)
'	fHeight	= HEXGetHeight(fSize, nHexagonType)
'	fOffsetX	= HEXGetOffsetX(fSize, nHexagonType)
'	fOffsetY	= HEXGetOffsetY(fSize, nHexagonType)
'	Call DEBUGPrint(Time(24) & " HEXCreatePointyForExtent: Creating Pointy Hexagons, size: " & FormatNumber$(fSize) & " " & sUnit &  ": Width: " & FormatNumber$(fWidth) & " " & sUnit & " Height: " & FormatNumber$(fHeight) & " " & sUnit)
'	Call DEBUGPrint(Time(24) & " Creating Pointy Hexagons, Offset X: " & FormatNumber$(fOffsetX) & " " & sUnit &  ": Offset Y: " & FormatNumber$(fOffsetY) & " " & sUnit)
'	Call DEBUGPrint(Time(24) & " Estimated number of Hexagons: " & FormatNumber$(Round((Distance(fMinX, fMinY, fMinX, fMaxY, sUnit) / (fWidth * HEXGetOffsetXMultiplier(nHexagonType))), 1) * Round((Distance(fMinX, fMinY, fMaxX, fMinY, sUnit) / (fHeight * HEXGetOffsetYMultiplier(nHexagonType))), 1)))
'
'	If HEXUseBaseForHexagon() Then
'		fStartX	= HEXGetStartX(fMinX, fWidth, HEXGetOffsetXMultiplier(nHexagonType))
'		fStartY	= HEXGetStartY(fMaxY, fHeight, HEXGetOffsetYMultiplier(nHexagonType))
'	Else
'		fStartX	= fMinX
'		fStartY	= fMaxY
'	End If
'	oPoint	= CreatePoint(fStartX, fStartY)
'
'	'**Pointy Hexagon
'	Do Until FALSE		'Column wise
'		nCount 	= 0
'		nRowNo	= 0
'		nColNo	= nColNo + 1
'		sColNo	= Format$(Round(nColNo/2, 1), "0000")
'
'		fDistance	= Round(nColNo/2, 1) * fWidth
'		'oPoint	= HEXOffSet(oPoint, 0, fDistance, sUnit, nCalculationType)
'		If (nColNo Mod 2 = 0) Then
'				oPoint	= HEXOffset(oPoint, 270, fOffsetY / 2, sUnit, nCalculationType)
'		End If
'		fX		= CentroidX(oPoint)
'
'		fYCompare		= CentroidY(HEXOffset(CreatePoint(fX, fMinY), 90, fHeight, sUnit, nCalculationType))
'
''		Call DEBUGPrint(Time(24) & ": Col " & sColNo & " X: " & FormatNumber$(fX))
'		Do Until FALSE		'Row Wise
'			nRowNo	= nRowNo + 1
'			sRowNo	= Format$(((nRowNo * 2) - (nColNo Mod 2)), "0000")
'			nCount	= nCount + 1
'			fY		= CentroidY(oPoint)
'			oHex = HEXCreatePointy(oPoint, fSize, sUnit, nCalculationType)
'
'			Insert Into sTab
'				(sCol, OBJ)
'				Values
'				(sColNo & "-" & sRowNo, oHex)
'
'			If fY < fYCompare Then
'				Exit Do
'			End If
'
'			oPoint	= HEXOffset(oPoint, 270, fOffsetY, sUnit, nCalculationType)
'		Loop		'Row wise
'
'		If fX > fMaxX Then
'			Exit Do
'		End If
'		oPoint = HEXOffset(CreatePoint(fStartX, fStartY), 0, fOffsetX, sUnit, nCalculationType)
'
'		nCountSum = nCountSum + nCount
''		Call DEBUGPrint(Time(24) & ":    " & FormatNumber$(nColNo) & ". Column: Created " & FormatNumber$(nCount) & " hexagons. Totally hexagons created: " & FormatNumber$(nCountSum))
'
''		If nColNo Mod 100 = 0 Then
''			If Ask(FormatNumber$(nColNo) & " hexagon columns created. Continue?", "No", "Yes") Then
''				Exit Do
''			End If
''		End If
'	Loop		'Column wise
'
'	mnNumHexagonsCreated	= nCountSum
'	nNumHexagonRows		= nCount
'	nNumHexagonColumns		= nColNo
'	mnTimeSpent			= Timer() - nTime

'	Call DEBUGPrint(Time(24) & ": Total Number of Hexagons: " & FormatNumber$(nCountSum) & " in " & FormatNumber$(mnTimeSpent) & " secs")
'	Call DEBUGPrint(Time(24) & ": Number of Rows: " & FormatNumber$(nNumHexagonRows) & " Number of Columns: " & FormatNumber$(nNumHexagonColumns))

'	HEXCreatePointyForExtent = nCountSum

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "HEXCreatePointyForExtent")
	Call ERRShow()

End Function


'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function HEXCreateFlatForExtent(	  ByVal sTab As String
							, ByVal sCol As String
							, ByVal fSize As Float
							, ByVal sUnit As String
							, ByVal fMinX As Float
							, ByVal fMinY As Float
							, ByVal fMaxX As Float
							, ByVal fMaxY As Float
							, ByVal nCalculationType As Integer
							) As Integer				'Returns the number of hexagons created

'Dim	fX, fY, fStartX, fStartY, fYCompare, fWidth, fHeight, fOffsetX, fOffsetY, fDistance As Float,
'	nRowNo, nColNo, nCount, nCountSum, nTime, nHexagonType As Integer,
'	sRowNo, sColNo As String,
'	oHex, oPoint As Object

OnError GoTo ErrorOccured

HEXCreateFlatForExtent =  HEXCreateForExtent(sTab, sCol, fSize, sUnit, fMinX, fMinY, fMaxX, fMaxY, nCalculationType, HEX_TYPE_FLAT)

'	nTime	= Timer()
'	nHexagonType	= HEX_TYPE_FLAT
'
'	fWidth	= HEXGetWidth(fSize, nHexagonType)
'	fHeight	= HEXGetHeight(fSize, nHexagonType)
'	fOffsetX	= HEXGetOffsetX(fSize, nHexagonType)
'	fOffsetY	= HEXGetOffsetY(fSize, nHexagonType)
'	Call DEBUGPrint(Time(24) & " HEXCreateFlatForExtent: Creating Flat Hexagons, size: " & FormatNumber$(fSize) & " " & sUnit &  ": Width: " & FormatNumber$(fWidth) & " " & sUnit & " Height: " & FormatNumber$(fHeight) & " " & sUnit)
'	Call DEBUGPrint(Time(24) & " Creating Hexagons, Offset X: " & FormatNumber$(fOffsetX) & " " & sUnit &  ": Offset Y: " & FormatNumber$(fOffsetY) & " " & sUnit)
'	Call DEBUGPrint(Time(24) & " Estimated number of Hexagons: " & FormatNumber$(Round((Distance(fMinX, fMinY, fMinX, fMaxY, sUnit) / (fWidth * HEXGetOffsetXMultiplier(nHexagonType))), 1) * Round((Distance(fMinX, fMinY, fMaxX, fMinY, sUnit) / (fHeight * HEXGetOffsetYMultiplier(nHexagonType))), 1)))
'
'	If HEXUseBaseForHexagon() Then
'		fStartX	= HEXGetStartX(fMinX, fWidth, HEXGetOffsetXMultiplier(nHexagonType))
'		fStartY	= HEXGetStartY(fMaxY, fHeight, HEXGetOffsetYMultiplier(nHexagonType))
'	Else
'		fStartX	= fMinX
'		fStartY	= fMaxY
'	End If
'	oPoint	= CreatePoint(fStartX, fStartY)
'
'	'**Flat Hexagon
'	Do Until FALSE		'Column wise
'		nCount 	= 0
'		nRowNo	= 0
'		nColNo	= nColNo + 1
'		sColNo	= Format$(Round(nColNo/2, 1), "0000")
'
'		fDistance	= Round(nColNo/2, 1) * fWidth
'		'oPoint	= HEXOffSet(oPoint, 0, fDistance, sUnit, nCalculationType)
'		If (nColNo Mod 2 = 0) Then
'				oPoint	= HEXOffset(oPoint, 270, fOffsetY / 2, sUnit, nCalculationType)
'		End If
'		fX		= CentroidX(oPoint)
'
'		fYCompare		= CentroidY(HEXOffset(CreatePoint(fX, fMinY), 90, fHeight, sUnit, nCalculationType))
'
''		Call DEBUGPrint(Time(24) & ": Col " & sColNo & " X: " & FormatNumber$(fX))
'		Do Until FALSE		'Row Wise
'			nRowNo	= nRowNo + 1
'			sRowNo	= Format$(((nRowNo * 2) - (nColNo Mod 2)), "0000")
'			nCount	= nCount + 1
'			fY		= CentroidY(oPoint)
'			oHex 	= HEXCreateFlat(oPoint, fSize, sUnit, nCalculationType)
'
'			Insert Into sTab
'				(sCol, OBJ)
'				Values
'				(sColNo & "-" & sRowNo, oHex)
'
'			If fY < fYCompare Then
'				Exit Do
'			End If
'
'			oPoint	= HEXOffset(oPoint, 270, fOffsetY, sUnit, nCalculationType)
'		Loop		'Row wise
'
'		If fX > fMaxX Then
'			Exit Do
'		End If
'
'		oPoint = HEXOffset(CreatePoint(fStartX, fStartY), 0, fOffsetX, sUnit, nCalculationType)
'
'		nCountSum = nCountSum + nCount
''		Call DEBUGPrint(Time(24) & ":    " & FormatNumber$(nColNo) & ". Column: Created " & FormatNumber$(nCount) & " hexagons. Totally hexagons created: " & FormatNumber$(nCountSum))
'
''		If nColNo Mod 100 = 0 Then
''			If Ask(FormatNumber$(nColNo) & " hexagon columns created. Continue?", "No", "Yes") Then
''				Exit Do
''			End If
''		End If
'	Loop		'Column wise
'
'	mnNumHexagonsCreated	= nCountSum
'	nNumHexagonRows		= nCount
'	nNumHexagonColumns		= nColNo
'	mnTimeSpent			= Timer() - nTime

'	Call DEBUGPrint(Time(24) & ": Total Number of Hexagons: " & FormatNumber$(nCountSum) & " in " & FormatNumber$(mnTimeSpent) & " secs")
'	Call DEBUGPrint(Time(24) & ": Number of Rows: " & FormatNumber$(nNumHexagonRows) & " Number of Columns: " & FormatNumber$(nNumHexagonColumns))

'	HEXCreateFlatForExtent = nCountSum

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "HEXCreateFlatForExtent")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function HEXCreateForObject(	  ByVal sTab As String
						, ByVal sCol As String
						, ByVal fSize As Float
						, ByVal sUnit As String
						, ByVal oInput As Object
						, ByVal nCalculationType As Integer
						, ByVal nHexagonType As Integer
						) As Integer				'Returns the number of hexagons created

Dim	fX, fY, fStartX, fStartY, fYCompare, fWidth, fHeight, fOffsetX, fOffsetY, fDistance As Float,
	fMinX, fMinY, fMaxX, fMaxY As Float,
	nRowNo, nColNo, nCount, nCountSum, nTime As Integer,
	sRowNo, sColNo As String,
	oHex, oPoint, oInputBuffer As Object

OnError GoTo ErrorOccured

HEXCreateForObject = 0

'Testing
'Dim sTab As String
'sTab = "HexTest"
'Print DEBUGEnable(1)
'Set Table sTab Redraw Off
'Set Table sTab FastEdit On
'Print WINHSetCoordsysUsingTable(sTab)
'Print HEXCreateForObject(sTab, "HEXNO", 5000, "m", selection.obj, 2, 1)
'Commit Table sTab
'Set Table sTab Redraw On

	nTime	= Timer()

	fMinX	= ObjectGeography(oInput, OBJ_GEO_MINX)
	fMinY	= ObjectGeography(oInput, OBJ_GEO_MINY)
	fMaxX	= ObjectGeography(oInput, OBJ_GEO_MAXX)
	fMaxY	= ObjectGeography(oInput, OBJ_GEO_MAXY)

	fWidth	= HEXGetWidth(fSize, nHexagonType)
	fHeight	= HEXGetHeight(fSize, nHexagonType)
	fOffsetX	= HEXGetOffsetX(fSize, nHexagonType)
	fOffsetY	= HEXGetOffsetY(fSize, nHexagonType)
	Call DEBUGPrint(Time(24) & " HEXCreateForObject: Creating Hexagons, size: " & FormatNumber$(fSize) & " " & sUnit &  ": Width: " & FormatNumber$(fWidth) & " " & sUnit & " Height: " & FormatNumber$(fHeight) & " " & sUnit)
	Call DEBUGPrint(Time(24) & " Creating Hexagons, Offset X: " & FormatNumber$(fOffsetX) & " " & sUnit &  ": Offset Y: " & FormatNumber$(fOffsetY) & " " & sUnit)

	If HEXUseBaseForHexagon() Then
		fStartX	= HEXGetStartX(fMinX, fWidth, HEXGetOffsetXMultiplier(nHexagonType))
		fStartY	= HEXGetStartY(fMaxY, fHeight, HEXGetOffsetYMultiplier(nHexagonType))
	Else
		fStartX	= fMinX
		fStartY	= fMaxY
	End If
	oPoint	= CreatePoint(fStartX, fStartY)

	mnNumHexagonColumnsEstimated	= HEXEstimateColumns(fSize, sUnit, fStartX, fMinY, fMaxX, fStartY, nCalculationType, nHexagonType)
	mnNumHexagonRowsEstimated	= HEXEstimateRows(fSize, sUnit, fStartX, fMinY, fMaxX, fStartY, nCalculationType, nHexagonType)
	mnNumHexagonsEstimated		= mnNumHexagonColumnsEstimated * mnNumHexagonRowsEstimated
	Call DEBUGPrint(Time(24) & " Estimated number of Column: " & FormatNumber$(mnNumHexagonColumnsEstimated))
	Call DEBUGPrint(Time(24) & " Estimated number of Rows: " & FormatNumber$(mnNumHexagonRowsEstimated))
	Call DEBUGPrint(Time(24) & " Estimated number of Hexagons: " & FormatNumber$(mnNumHexagonsEstimated))

	fDistance		= 2 * Maximum(fWidth, fHeight)
	If nCalculationType = HEX_CALC_TYPE_SPHERICAL Then
		oInputBuffer			= Buffer(oInput, 24, fDistance, sUnit)
	Else
		oInputBuffer			= CartesianBuffer(oInput, 24, fDistance, sUnit)
	End If

	'**Hexagon
	Do Until FALSE		'Column wise
		nCount 	= 0
		nRowNo	= 0
		nColNo	= nColNo + 1
		sColNo	= Format$(Round(nColNo/2, 1), "0000")

		fDistance	= Round(nColNo/2, 1) * fWidth
		If (nColNo Mod 2 = 0) Then
				oPoint	= HEXOffset(oPoint, 270, fOffsetY / 2, sUnit, nCalculationType)
		End If
		fX		= CentroidX(oPoint)

		fYCompare		= CentroidY(HEXOffset(CreatePoint(fX, fMinY), 90, fHeight, sUnit, nCalculationType))

		Do Until FALSE		'Row Wise
			nRowNo	= nRowNo + 1
			sRowNo	= Format$(((nRowNo * 2) - (nColNo Mod 2)), "0000")
			fY		= CentroidY(oPoint)

			If oPoint Within oInputBuffer Then
				oHex = HEXCreate(oPoint, fSize, sUnit, nCalculationType, nHexagonType)

				If oPoint Within oInput Then
					nCount	= nCount + 1
					Insert Into sTab
						(sCol, OBJ)
			'			(sCol, OBJ, SPATIALCASE)
						Values
						(sColNo & "-" & sRowNo, oHex)
			'			(sColNo & "-" & sRowNo, oHex, "oPoint Within oInput")
				ElseIf oInput Intersects oHex Then
					nCount	= nCount + 1
					Insert Into sTab
						(sCol, OBJ)
			'			(sCol, OBJ, SPATIALCASE)
						Values
						(sColNo & "-" & sRowNo, oHex)
			'			(sColNo & "-" & sRowNo, oHex, "oInput Intersects oHex")
			'	Else
			'		nCount	= nCount + 1
			'		Insert Into sTab
			'			(sCol, OBJ, SPATIALCASE)
			'			Values
			'			(sColNo & "-" & sRowNo, oHex, "NOT oInput Intersects oHex")
				End If
			'Else
			'	oHex = HEXCreate(oPoint, fSize, sUnit, nCalculationType, nHexagonType)
			'	nCount	= nCount + 1
			'	Insert Into sTab
			'		(sCol, OBJ, SPATIALCASE)
			'		Values
			'		(sColNo & "-" & sRowNo, oHex, "NOT oPoint Within oInputBuffer")
			End If

			If fY < fYCompare Then
				Exit Do
			End If

			oPoint	= HEXOffset(oPoint, 270, fOffsetY, sUnit, nCalculationType)
		Loop		'Row wise

		If fX > fMaxX Then
			Exit Do
		End If
		oPoint = HEXOffset(CreatePoint(fX, fStartY), 0, fOffsetX, sUnit, nCalculationType)

		nCountSum = nCountSum + nCount
'		Call DEBUGPrint(Time(24) & ":    " & FormatNumber$(nColNo) & ". Column: Created " & FormatNumber$(nCount) & " hexagons. Totally hexagons created: " & FormatNumber$(nCountSum))

		If nColNo Mod 100 = 0 Then
			Call DEBUGPrint(Time(24) & ":    " & FormatNumber$(nColNo) & ". Column: Created " & FormatNumber$(nCount) & " hexagons. Totally hexagons created: " & FormatNumber$(nCountSum))

			If nColNo Mod 1000 = 0 Then
				If Ask(FormatNumber$(nColNo) & " hexagon columns created. Continue?", "No", "Yes") Then
					Exit Do
				End If
			End If
		End If
	Loop		'Column wise

	mnNumHexagonsCreated	= nCountSum
	nNumHexagonRows		= nRowNo
	nNumHexagonColumns		= nColNo
	mnTimeSpent			= Timer() - nTime

	Call DEBUGPrint(Time(24) & ": Total Number of Hexagons: " & FormatNumber$(nCountSum) & " in " & FormatNumber$(mnTimeSpent) & " secs")
	Call DEBUGPrint(Time(24) & ": Number of Rows: " & FormatNumber$(nNumHexagonRows) & " Number of Columns: " & FormatNumber$(nNumHexagonColumns))

	HEXCreateForObject = nCountSum

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "HEXCreateForObject")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function HEXEstimateForObject(  ByVal fSize As Float
						, ByVal sUnit As String
						, ByVal oInput As Object
						, ByVal nCalculationType As Integer
						, ByVal nHexagonType As Integer
						) As Integer				'Returns the number of hexagons created

Dim	fStartX, fStartY, fWidth, fHeight As Float,
	fMinX, fMinY, fMaxX, fMaxY As Float

OnError GoTo ErrorOccured

HEXEstimateForObject = 0

	fMinX	= ObjectGeography(oInput, OBJ_GEO_MINX)
	fMinY	= ObjectGeography(oInput, OBJ_GEO_MINY)
	fMaxX	= ObjectGeography(oInput, OBJ_GEO_MAXX)
	fMaxY	= ObjectGeography(oInput, OBJ_GEO_MAXY)

	fWidth	= HEXGetWidth(fSize, nHexagonType)
	fHeight	= HEXGetHeight(fSize, nHexagonType)
	Call DEBUGPrint(Time(24) & " HEXEstimateForObject: Estimating Hexagons, size: " & FormatNumber$(fSize) & " " & sUnit &  ": Width: " & FormatNumber$(fWidth) & " " & sUnit & " Height: " & FormatNumber$(fHeight) & " " & sUnit)

	If HEXUseBaseForHexagon() Then
		fStartX	= HEXGetStartX(fMinX, fWidth, HEXGetOffsetXMultiplier(nHexagonType))
		fStartY	= HEXGetStartY(fMaxY, fHeight, HEXGetOffsetYMultiplier(nHexagonType))
	Else
		fStartX	= fMinX
		fStartY	= fMaxY
	End If

	mnNumHexagonColumnsEstimated	= HEXEstimateColumns(fSize, sUnit, fStartX, fMinY, fMaxX, fStartY, nCalculationType, nHexagonType)
	mnNumHexagonRowsEstimated	= HEXEstimateRows(fSize, sUnit, fStartX, fMinY, fMaxX, fStartY, nCalculationType, nHexagonType)
	mnNumHexagonsEstimated		= mnNumHexagonColumnsEstimated * mnNumHexagonRowsEstimated
	Call DEBUGPrint(Time(24) & " Estimated number of Column: " & FormatNumber$(mnNumHexagonColumnsEstimated))
	Call DEBUGPrint(Time(24) & " Estimated number of Rows: " & FormatNumber$(mnNumHexagonRowsEstimated))
	Call DEBUGPrint(Time(24) & " Estimated number of Hexagons: " & FormatNumber$(mnNumHexagonsEstimated))

	HEXEstimateForObject = mnNumHexagonsEstimated

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "HEXEstimateForObject")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function HEXEstimateForMap(	  ByVal fSize As Float
						, ByVal sUnit As String
						, ByVal nMID As Integer
						, ByVal nCalculationType As Integer
						, ByVal nHexagonType As Integer
						) As Integer				'Returns the number of hexagons created

Dim	oWindow As Object
'Dim	fMinX, fMinY, fMaxX, fMaxY As Float

OnError GoTo ErrorOccured

	oWindow			= MAPGetExtent(nMID)
	HEXEstimateForMap	= HEXEstimateForObject(fSize, sUnit, oWindow, nCalculationType, nHexagonType)

'	fMinX	= MapperInfo(nMID, MAPPER_INFO_MINX)
'	fMinY	= MapperInfo(nMID, MAPPER_INFO_MINY)
'	fMaxX	= MapperInfo(nMID, MAPPER_INFO_MAXX)
'	fMaxY	= MapperInfo(nMID, MAPPER_INFO_MAXY)
'	HEXEstimateForMap	= HEXCreateForExtent(sTab, sCol, fSize, sUnit, fMinX, fMinY, fMaxX, fMaxY, nCalculationType, nHexagonType)

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "HEXEstimateForMap")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function HEXEstimateColumns(	  ByVal fSize As Float
						, ByVal sUnit As String
						, ByVal fMinX As Float
						, ByVal fMinY As Float
						, ByVal fMaxX As Float
						, ByVal fMaxY As Float
						, ByVal nCalculationType As Integer
						, ByVal nHexagonType As Integer
						) As Integer				'Returns the number of columns estiamted

Dim	fDistance, fWidth, fMultiply As Float

OnError GoTo ErrorOccured

	fWidth		= HEXGetWidth(fSize, nHexagonType)
	fMultiply		= HEXGetOffsetXMultiplier(nHexagonType)

	If nCalculationType = HEX_CALC_TYPE_SPHERICAL Then
		fDistance	= Distance(fMinX, fMinY, fMaxX, fMinY, sUnit)
	Else
		fDistance	= CartesianDistance(fMinX, fMinY, fMaxX, fMinY, sUnit)
	End If

'	Call DEBUGPrint("HEXEstimateColumns: Round(" & FormatNumber$(fDistance) & " / (" & FormatNumber$(fWidth) & " * " & FormatNumber$(fMultiply) & "), 1) = Round(" & FormatNumber$(fDistance) & " / (" & FormatNumber$(fWidth * fMultiply) & "), 1)  = Round(" & (fDistance / (fWidth * fMultiply)) & ", 1)")
'	Call DEBUGPrint("HEXEstimateColumns: " & Round(fDistance / (fWidth * fMultiply), 1))
	HEXEstimateColumns	= Round(fDistance / (fWidth * fMultiply), 1)

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "HEXEstimateColumns")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function HEXEstimateRows(	  ByVal fSize As Float
						, ByVal sUnit As String
						, ByVal fMinX As Float
						, ByVal fMinY As Float
						, ByVal fMaxX As Float
						, ByVal fMaxY As Float
						, ByVal nCalculationType As Integer
						, ByVal nHexagonType As Integer
						) As Integer				'Returns the number of rows estiamted

Dim	fDistance, fHeight, fMultiply As Float

OnError GoTo ErrorOccured

	fHeight		= HEXGetHeight(fSize, nHexagonType)
	fMultiply		= HEXGetOffsetYMultiplier(nHexagonType)

	If nCalculationType = HEX_CALC_TYPE_SPHERICAL Then
		fDistance	= Distance(fMinX, fMinY, fMinX, fMaxY, sUnit)
	Else
		fDistance	= CartesianDistance(fMinX, fMinY, fMinX, fMaxY, sUnit)
	End If

'	Call DEBUGPrint("HEXEstimateRows: Round(" & FormatNumber$(fDistance) & " / (" & FormatNumber$(fHeight) & " * " & FormatNumber$(fMultiply) & "), 1) = 2 * Round(" & FormatNumber$(fDistance) & " / (" & FormatNumber$(fHeight * fMultiply) & "), 1)  = 2 * Round(" & (fDistance / (fHeight * fMultiply)) & ", 1)")
'	Call DEBUGPrint("HEXEstimateRows: " & Round(fDistance / (fHeight * fMultiply), 1))
	HEXEstimateRows	= Round(fDistance / (fHeight * fMultiply), 1)

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "HEXEstimateRows")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function HEXCreatePointyForObject(	  ByVal sTab As String
							, ByVal sCol As String
							, ByVal fSize As Float
							, ByVal sUnit As String
							, ByVal oInput As Object
							, ByVal nCalculationType As Integer
							) As Integer				'Returns the number of hexagons created
OnError GoTo ErrorOccured

	HEXCreatePointyForObject = HEXCreateForObject(sTab, sCol, fSize, sUnit, oInput, nCalculationType, HEX_TYPE_POINTY)

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "HEXCreatePointyForObject")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function HEXCreateFlatForObject(	  ByVal sTab As String
							, ByVal sCol As String
							, ByVal fSize As Float
							, ByVal sUnit As String
							, ByVal oInput As Object
							, ByVal nCalculationType As Integer
							) As Integer				'Returns the number of hexagons created
OnError GoTo ErrorOccured

	HEXCreateFlatForObject = HEXCreateForObject(sTab, sCol, fSize, sUnit, oInput, nCalculationType, HEX_TYPE_FLAT)

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "HEXCreateFlatForObject")
	Call ERRShow()

End Function


'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function HEXCreateForMap(  ByVal sTab As String
					, ByVal sCol As String
					, ByVal fSize As Float
					, ByVal sUnit As String
					, ByVal nMID As Integer
					, ByVal nCalculationType As Integer
					, ByVal nHexagonType As Integer
					) As Integer				'Returns the number of hexagons created

Dim	oWindow As Object
'Dim	fMinX, fMinY, fMaxX, fMaxY As Float

OnError GoTo ErrorOccured

	oWindow			= MAPGetExtent(nMID)
	HEXCreateForMap	= HEXCreateForObject(sTab, sCol, fSize, sUnit, oWindow, nCalculationType, nHexagonType)

'	fMinX	= MapperInfo(nMID, MAPPER_INFO_MINX)
'	fMinY	= MapperInfo(nMID, MAPPER_INFO_MINY)
'	fMaxX	= MapperInfo(nMID, MAPPER_INFO_MAXX)
'	fMaxY	= MapperInfo(nMID, MAPPER_INFO_MAXY)
'	HEXCreateForMap	= HEXCreateForExtent(sTab, sCol, fSize, sUnit, fMinX, fMinY, fMaxX, fMaxY, nCalculationType, nHexagonType)

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "HEXCreateForMap")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function HEXCreatePointyForMap(	  ByVal sTab As String
							, ByVal sCol As String
							, ByVal fSize As Float
							, ByVal sUnit As String
							, ByVal nMID As Integer
							, ByVal nCalculationType As Integer
							) As Integer				'Returns the number of hexagons created

OnError GoTo ErrorOccured


	HEXCreatePointyForMap = HEXCreateForMap(sTab, sCol, fSize, sUnit, nMID, nCalculationType, HEX_TYPE_POINTY)

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "HEXCreatePointyForMap")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function HEXCreateFlatForMap(	  ByVal sTab As String
						, ByVal sCol As String
						, ByVal fSize As Float
						, ByVal sUnit As String
						, ByVal nMID As Integer
						, ByVal nCalculationType As Integer
						) As Integer

OnError GoTo ErrorOccured

	HEXCreateFlatForMap = HEXCreateForMap(sTab, sCol, fSize, sUnit, nMID, nCalculationType, HEX_TYPE_FLAT)

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "HEXCreateFlatForMap")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function HEXPCreateForExtent(	  ByVal sTab As String
							, ByVal sCol As String
							, ByVal fSize As Float
							, ByVal sUnit As String
							, ByVal fMinX As Float
							, ByVal fMinY As Float
							, ByVal fMaxX As Float
							, ByVal fMaxY As Float
							, ByVal nCalculationType As Integer
							, ByVal nHexagonType As Integer
							) As Integer				'Returns the number of hexagons created

Dim	fX, fY, fYCompare, fWidth, fHeight, fOffsetX, fOffsetY, fDistance As Float,
	nRowNo, nColNo, nCount, nCountSum, nTime As Integer,
	sRowNo, sColNo As String,
	oPoint As Object

OnError GoTo ErrorOccured

HEXPCreateForExtent = 0

	nTime	= Timer()

	fWidth	= HEXGetWidth(fSize, nHexagonType)
	fHeight	= HEXGetHeight(fSize, nHexagonType)
	fOffsetX	= HEXGetOffsetX(fSize, nHexagonType)
	fOffsetY	= HEXGetOffsetY(fSize, nHexagonType)
	Call DEBUGPrint(Time(24) & " Creating Hexagons, size: " & FormatNumber$(fSize) & " " & sUnit &  ": Width: " & FormatNumber$(fWidth) & " " & sUnit & " Height: " & FormatNumber$(fHeight) & " " & sUnit)
	Call DEBUGPrint(Time(24) & " Creating Hexagons, Offset X: " & FormatNumber$(fOffsetX) & " " & sUnit &  ": Offset Y: " & FormatNumber$(fOffsetY) & " " & sUnit)
	Call DEBUGPrint(Time(24) & " Estimated number of Hexagons: " & FormatNumber$(Round((Distance(fMinX, fMinY, fMinX, fMaxY, sUnit) / (fWidth * HEXGetOffsetXMultiplier(nHexagonType))), 1) * Round((Distance(fMinX, fMinY, fMaxX, fMinY, sUnit) / (fHeight * HEXGetOffsetYMultiplier(nHexagonType))), 1)))

	oPoint	= CreatePoint(fMinX, fMaxY)

	'**Hexagon
	Do Until FALSE		'Column wise
		nCount 	= 0
		nRowNo	= 0
		nColNo	= nColNo + 1
		sColNo	= Format$(Round(nColNo/2, 1), "0000")

		fDistance	= Round(nColNo/2, 1) * fWidth
		If (nColNo Mod 2 = 0) Then
				oPoint	= HEXOffset(oPoint, 270, fOffsetY / 2, sUnit, nCalculationType)
		End If
		fX		= CentroidX(oPoint)

		fYCompare		= CentroidY(HEXOffset(CreatePoint(fX, fMinY), 90, fHeight, sUnit, nCalculationType))

		Do Until FALSE		'Row Wise
			nRowNo	= nRowNo + 1
			sRowNo	= Format$(((nRowNo * 2) - (nColNo Mod 2)), "0000")
			nCount	= nCount + 1
			fY		= CentroidY(oPoint)

			Insert Into sTab
				(sCol, OBJ)
				Values
				(sColNo & "-" & sRowNo, oPoint)

			If fY < fYCompare Then
				Exit Do
			End If

			oPoint	= HEXOffset(oPoint, 270, fOffsetY, sUnit, nCalculationType)
		Loop		'Row wise

		If fX > fMaxX Then
			Exit Do
		End If
		oPoint = HEXOffset(CreatePoint(fX, fMaxY), 0, fOffsetX, sUnit, nCalculationType)

		nCountSum = nCountSum + nCount
	Loop		'Column wise

	nNumHexagonRows		= nCount
	nNumHexagonColumns		= nColNo
	mnNumHexagonsCreated	= nCountSum
	mnTimeSpent			= Timer() - nTime

	Call DEBUGPrint(Time(24) & ": Total Number of Hexagons: " & FormatNumber$(nCountSum) & " in " & FormatNumber$(mnTimeSpent) & " secs")
	Call DEBUGPrint(Time(24) & ": Number of Rows: " & FormatNumber$(nNumHexagonRows) & " Number of Columns: " & FormatNumber$(nNumHexagonColumns))

	HEXPCreateForExtent = nCountSum

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "HEXPCreateForExtent")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function HEXPCreateForMap( ByVal sTab As String
					, ByVal sCol As String
					, ByVal fSize As Float
					, ByVal sUnit As String
					, ByVal nMID As Integer
					, ByVal nCalculationType As Integer
					, ByVal nHexagonType As Integer
					) As Integer				'Returns the number of hexagons created

Dim	fMinX, fMinY, fMaxX, fMaxY As Float

OnError GoTo ErrorOccured

	fMinX	= MapperInfo(nMID, MAPPER_INFO_MINX)
	fMinY	= MapperInfo(nMID, MAPPER_INFO_MINY)
	fMaxX	= MapperInfo(nMID, MAPPER_INFO_MAXX)
	fMaxY	= MapperInfo(nMID, MAPPER_INFO_MAXY)

	HEXPCreateForMap = HEXPCreateForExtent(sTab, sCol, fSize, sUnit, fMinX, fMinY, fMaxX, fMaxY, nCalculationType, nHexagonType)
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "HEXPCreateForMap")
	Call ERRShow()

End Function
