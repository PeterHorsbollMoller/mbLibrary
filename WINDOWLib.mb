'*******************************************************************************
'** 	Created By Peter Horsbøll Møller, Pitney Bowes Software
'** 	Program:
'** 	Modul:	WINDOWLib.mb
'**
'*******************************************************************************

'-------------------------------------
Include "IMapInfoPro.def"
Include "MapBasic.def"
Include "Icons.def"
Include "Menu.def"
'**default constants...
Include "Defaults.def"

'-------------------------------------
Include "DEBUGLib.def"
Include "ERRORLib.def"
Include "RIBBONLib.def"
Include "TABLELib.def"
Include "WINAPI 1522.def"
Include "WINDOWLib.def"

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function WINExists(ByVal nWID As Integer) As Logical

Dim	i As Integer

OnError GoTo ErrorOccured

WINExists = FALSE

	If nWID = 0 Then
		Exit Function
	End If

	For i = 1 To NumWindows()
		If WindowID(i) = nWID Then
			WINExists = TRUE
			Exit Function
		End If
	Next

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "WINExists")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Software
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function WINGetIDFromTitle(ByVal sTitle As String) As Integer

Dim	i As Integer

OnError GoTo ErrorOccured

WINGetIDFromTitle = 0

	If sTitle = "" Then
		Exit Function
	End If

	For i = 1 To NumWindows()
		If WindowInfo(WindowID(i), WIN_INFO_NAME) = sTitle Then
			WINGetIDFromTitle = WindowID(i)
			Exit Function
		End If
	Next

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "WINGetIDFromTitle")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function WINCreateForDocumentControl(	  ByVal nCtrlID As Integer				'*ID of the control to embed the window into
							, ByVal sCreateWindowStatement As String	'*MapBasic statement that will create the window
							) As Integer							'*Returns the WindowID of the embedded window

Dim	nRectClient, iHwnd As Integer,
	windowHandle As This,
	winRect As RECTANGLEAPI,
	hwndWin, hwndOldParent As IntPtr,
	b As Logical

OnError GoTo ErrorOccured

WINCreateForDocumentControl = 0

	iHwnd	= ReadControlValue(nCtrlID)

'	Print Time(24) & ": Embed Window Ribbon Ux"
	nRectClient = WAPIGetClientRect(iHwnd, winRect)
	windowHandle = WINCreateUnattached(sCreateWindowStatement)

'	Print Time(24) & ": Then get the hwnd for it"
	hwndWin = WINGetIContractHandle(windowHandle)

'	Print Time(24) & ": Reparent window"
	hwndOldParent = WAPISetParent(hwndWin, iHwnd)
'	Print Time(24) & ": Show window"
	b = WAPIShowWindow(hwndWin, 5)
'	Print Time(24) & ": Set window size"
	b = WAPIMoveWindow(hwndWin, 0, 0, winRect.right, winRect.bottom, 1)

'	Print Time(24) & ": Return WindowID of the embedded window"
	WINCreateForDocumentControl = WindowID(FrontWindow())
'	Print Time(24) & ": WINCreateForDocumentControl Exists"

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "WINCreateForDocumentControl: " & sCreateWindowStatement)
	Call ERRShow()

End Function

'*******************************************************************************
'
' Function CreateWindowUnattached()
'
'*******************************************************************************
Function WINCreateUnattached(ByVal sCreateWindowStatement As String) As This

Dim	winHandle As This,
	nWinID As Integer

OnError GoTo ErrorOccured

	'**Initiating RIBBONLib as we are using theMapInfoApplication object from this module
	Call RBNInitiate

'	Print Time(24) & ": WINCreateUnattached: " & sCreateWindowStatement
	winHandle = CreateUnattachedWindow(theMapInfoApplication, sCreateWindowStatement, nWinID)
	WINCreateUnattached = winHandle
'	Print Time(24) & ": WINCreateUnattached Exits"

'-------------------------
Map_Win:
    WINCreateUnattached = winHandle
    Exit Function

'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "WINCreateUnattached")
	Call ERRPrint()
	Resume Map_Win

End Function
