'*******************************************************************************
'** 	Created By Peter Horsbøll Møller, Precisely
'** 	Program:
'** 	Modul:
'**
'*******************************************************************************

'-------------------------------------
Include "MapBasic.def"
Include "Icons.def"
Include "Menu.def"
'**default constants...
Include "Defaults.def"

'-------------------------------------
Include "DEBUGLib.def"
Include "ERRORLib.def"
Include "LAYERLib.def"

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function LAYERExists(ByVal nMID As Integer, ByVal sLayer As String) As Logical

Dim	i As Integer

OnError GoTo ErrorOccured

LAYERExists = FALSE

	For i = 1 To MapperInfo(nMID, MAPPER_INFO_LAYERS)
		If LayerInfo(nMID, i, LAYER_INFO_NAME) = sLayer Then
			LAYERExists = TRUE
			Exit Function
		End If
	Next
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "LAYERExists: " & nMID & " : " & sLayer)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function LAYERGetLayerNumber(ByVal nMID As Integer, ByVal sLayer As String) As Integer

Dim	i As Integer

OnError GoTo ErrorOccured

LAYERGetLayerNumber = FALSE

	For i = 1 To MapperInfo(nMID, MAPPER_INFO_LAYERS)
		If LayerInfo(nMID, i, LAYER_INFO_NAME) = sLayer Then
			LAYERGetLayerNumber = i
			Exit Function
		End If
	Next

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "LAYERGetLayerNumber: nMID: " & nMID & " sLayer: "  & sLayer)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function LAYERGetPositionInGroupLayer(	  ByVal nMID As Integer			'MapWindow to search
								, ByVal nGroupLayerID As Integer	'Group Layer ID to search, use 0 as top level
								, ByVal sLayer As String			'Layer Name to find
								) As Integer					'Returns the position within this group layer, return -1 if not found
															'If you want to use to insert a layer, use (Position - 1) if you insert into the top level

Dim	nLayer, ll, llOffset, nCount As Integer

OnError GoTo ErrorOccured

LAYERGetPositionInGroupLayer = -1

	llOffset	= GroupLayerInfo(nMID, nGroupLayerID, GROUPLAYER_INFO_LAYERLIST_ID)

	For nLayer = 1 To GroupLayerInfo(nMID, nGroupLayerID, GROUPLAYER_INFO_ALL_LAYERS)
		ll = llOffset + nLayer
'		Call DEBUGPrint("   " & ll & ": " & LayerListInfo(nMID, ll, LAYERLIST_INFO_NAME))

		If LayerListInfo(nMID, ll, LAYERLIST_INFO_TYPE) = LAYERLIST_INFO_TYPE_GROUP Then
			If GroupLayerInfo(nMID, LayerListInfo(nMID, ll, LAYERLIST_INFO_GROUPLAYER_ID), GROUPLAYER_INFO_PARENT_GROUP_ID) = nGroupLayerID Then
				nCount = nCount + 1
'				Print nCount & ": " & GroupLayerInfo(nMID, LayerListInfo(nMID, ll, LAYERLIST_INFO_GROUPLAYER_ID), GROUPLAYER_INFO_NAME)
			End If
		Else
			If LayerInfo(nMID, LayerListInfo(nMID, ll, LAYERLIST_INFO_LAYER_ID), LAYER_INFO_PARENT_GROUP_ID) = nGroupLayerID Then
				nCount = nCount + 1
'				Print nCount & ": " & LayerInfo(nMID, LayerListInfo(nMID, ll, LAYERLIST_INFO_LAYER_ID), LAYER_INFO_NAME)


				If LayerInfo(nMID, LayerListInfo(nMID, ll, LAYERLIST_INFO_LAYER_ID), LAYER_INFO_NAME) = sLayer Then
					LAYERGetPositionInGroupLayer = nCount
'					Call DEBUGPrint("Layer " & sLayer & " found at position " & nCount & " in Layer Group " & nGroupLayerID)
					Exit Function
				End If
			End If
		End If
	Next

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "LAYERGetPositionInGroupLayer")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'	nMID			: ID of Map Window to get layers from
'	nTypesToUse	: Bitsum describing what table to use, use LAYER_USE_ constants
'	arrLayerIDs	: will contain the IDs of the layers that meet the criteria, note that the arrays will not be cleared
'	arrLayers()	: will contain the tables that meet the criteria, note that the arrays will not be cleared
'Return value:
'	Number of tables that met the criteria
'**********************************************************************************************''
Function LAYERGetListOfNames(	  ByVal nMID As Integer			'ID of Map Window to get layers from
						, ByVal nTypesToUse As Integer	'Bitsum describing what layer to use, use LAYER_USE_ constants
						, arrLayerIDs() As Integer		'contains the IDs of the layers that meet the criteria, note that the arrays will not be cleared
						, arrLayers() As String			'contains the layers that meet the criteria, note that the arrays will not be cleared
						) As Integer					'returns the number of layers found

Dim	nLayer, nCount As Integer,
	sTab As String

OnError GoTo ErrorOccured

LAYERGetListOfNames = 0

	nCount	= Ubound(arrLayers)

	For nLayer = 1 To MapperInfo(nMID, MAPPER_INFO_LAYERS)
		If LAYERUseLayerNo(nMID, nLayer, nTypesToUse)  Then
			nCount		= nCount + 1
			Redim arrLayerIDs(nCount)
			Redim arrLayers(nCount)
			arrLayerIDs(nCount)	= nLayer
			arrLayers(nCount)	= LayerInfo(nMID, nLayer, TAB_INFO_NAME)
		End If
	Next

LAYERGetListOfNames = nCount

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "LAYERGetListOfNames")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'	nMID			: ID of Map Window to get layers from
'	nLayer 		: Layer# to check
'	nTypesToUse 	: Bitsum describing what layer to use, use LAYER_USE_ constants
'Return value:
'	Returns true if the table meets all criterias
'**********************************************************************************************''
Function LAYERUseLayerNo(  ByVal nMID As Integer			'ID of Map Window to get layers from
					, ByVal nLayer As Integer		'Layer# to check
					, ByVal nTypesToUse As Integer	'Bitsum describing what layer to use, use LAYER_USE_ constants
					) As Logical					'Returns true if the layer meets all criterias

Dim	sTab As String

OnError GoTo ErrorOccured

LAYERUseLayerNo = FALSE

'	Print nLayer & ": " & LayerInfo(nMID, nLayer, LAYER_INFO_NAME)

	If LAYERIsBitOn(LAYER_USE_ONLY_VISIBLE, nTypesToUse) Or LAYERIsBitOn(LAYER_USE_ONLY_SELECTABLE, nTypesToUse) Then
		If LayerInfo(nMID, nLayer, LAYER_INFO_DISPLAY) = LAYER_INFO_DISPLAY_OFF Then
			Exit Function
		End If

		If LayerInfo(nMID, nLayer, LAYER_INFO_ZOOM_LAYERED) Then
			If MapperInfo(nMID, MAPPER_INFO_ZOOM) < LayerInfo(nMID, nLayer, LAYER_INFO_ZOOM_MIN) Then
				Exit Function
			ElseIf MapperInfo(nMID, MAPPER_INFO_ZOOM) > LayerInfo(nMID, nLayer, LAYER_INFO_ZOOM_MAX) Then
				Exit Function
			End If
		End If
	End If


	Do Case LayerInfo(nMID, nLayer, LAYER_INFO_TYPE)
		Case LAYER_INFO_TYPE_NORMAL
'			Print "   Layer is normal"
			If Not LAYERIsBitOn(LAYER_USE_NORMAL, nTypesToUse) Then
				Exit Function
			End If
			If LAYERIsBitOn(LAYER_USE_ONLY_SELECTABLE, nTypesToUse) Then
				If Not LayerInfo(nMID, nLayer, LAYER_INFO_SELECTABLE) Then
					Exit Function
				End If
			End If

			sTab = LayerInfo(nMID, nLayer, LAYER_INFO_NAME)
			'**Use Read-Only tables...
			If NOT LAYERIsBitOn(LAYER_USE_READONLY, nTypesToUse) Then
'				Print "   Don't use read-only layers"
				If TableInfo(sTab, TAB_INFO_READONLY) Then
'					Print "      Layer is read-only!"
					Exit Function
				End If
			End If
			If NOT LAYERIsBitOn(LAYER_USE_TEMP, nTypesToUse) Then
'				Print "   Don't use Temp layers"
				If TableInfo(sTab, TAB_INFO_TEMP) Then
'					Print "      Layer is temp!"
					Exit Function
				End If
			End If
		Case LAYER_INFO_TYPE_COSMETIC
			If Not LAYERIsBitOn(LAYER_USE_COSMETIC, nTypesToUse) Then
				Exit Function
			End If
			If LAYERIsBitOn(LAYER_USE_ONLY_SELECTABLE, nTypesToUse) Then
				If Not LayerInfo(nMID, nLayer, LAYER_INFO_SELECTABLE) Then
					Exit Function
				End If
			End If
		Case LAYER_INFO_TYPE_IMAGE
			If Not LAYERIsBitOn(LAYER_USE_IMAGE, nTypesToUse) Then
				Exit Function
			End If
		Case LAYER_INFO_TYPE_THEMATIC
			If Not LAYERIsBitOn(LAYER_USE_THEMATIC, nTypesToUse) Then
				Exit Function
			End If
		Case LAYER_INFO_TYPE_GRID
			If Not LAYERIsBitOn(LAYER_USE_GRID, nTypesToUse) Then
				Exit Function
			End If
		Case LAYER_INFO_TYPE_WMS
			If Not LAYERIsBitOn(LAYER_USE_WMS, nTypesToUse) Then
				Exit Function
			End If
		Case LAYER_INFO_TYPE_TILESERVER
			If Not LAYERIsBitOn(LAYER_USE_TILESERVER, nTypesToUse) Then
				Exit Function
			End If
		Case LAYER_INFO_TYPE_GRIDLINE
			If Not LAYERIsBitOn(LAYER_USE_GRIDLINE, nTypesToUse) Then
				Exit Function
			End If
	End Case

LAYERUseLayerNo = TRUE

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "LAYERUseLayerNo")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'	nBit 	: The bit to check for
'	nBitSum	: The sum of bits to see if nBit is On
'Return value:
'	TRUE		: The bit nBit is set
'	FALSE	: The bit nBit is not set
'**********************************************************************************************''
Function LAYERIsBitOn(	  ByVal nBit As Integer		'Bit to check for
					, ByVal nBitSum As Integer	'Bit sum to check if bit is set
					) As Logical				'True if the bit is set in the bit sum

Dim	nCurBit As Integer

OnError GoTo ErrorOccured

LAYERIsBitOn = FALSE

	nCurBit	= 64
	'**Finding the maximum bit that can be set in the nBitSum
	Do While (nCurBit < nBitSum)
		nCurBit = nCurBit * 2
	Loop

'	Print "Searching for " & nbit & " in " & nBitSum
	Do While (nCurBit >= nBit)
		If (nBitSum >= nCurBit) Then
			If nCurBit = nBit Then
'				Print "   " & nBit & " was found"
				LAYERIsBitOn = TRUE
				Exit Function
			End If

			nBitSum = nBitSum - nCurBit
		End If
		'**One has been tested once, so we are done
		If nCurBit = 1 Then
			Exit Function
		End If

		nCurBit = (nCurBit / 2)
	Loop

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "LAYERIsBitOn")
	Call ERRShow()

End Function
