'*******************************************************************************
'** 	Program:
'** 	Modul:
'**
'*******************************************************************************

'-------------------------------------
Include "MapBasic.def"
'**default constants...
Include "..\Defaults.def"

'-------------------------------------
Include "..\DEBUGLib.def"
Include "..\ERRORLib.def"
Include "..\TABLELib.def"

Include "T_MI_POINT.def"
Include "T_MI_LINE.def"

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes MapInfo
'Parameters:
'	tmilFrom:	T_MI_LINE to copy from
'	tmilTo:	T_MI_LINE to copy to
'**********************************************************************************************''
Sub tmilCopy( tmilFrom As T_MI_LINE, tmilTo As T_MI_LINE)

OnError GoTo ErrorOccured

	Call tmipCopy(tmilFrom.StartPoint, tmilTo.StartPoint)
	Call tmipCopy(tmilFrom.EndPoint, tmilTo.EndPoint)

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "tmilCopy")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes MapInfo
'Parameters:
'	tmil:		T_MI_LINE to offset
'	tmilTo:	T_MI_LINE to copy to
'**********************************************************************************************''
Sub tmilOffset( 	  tmil As T_MI_LINE		'T_MI_LINE to offset - this will be changed
			, ByVal fDistance As Float	'Distance to offset the T_MI_LINE
			, ByVal fDirection As Float	'Direction to offset the T_MI_LINE
				)

OnError GoTo ErrorOccured

	Call tmipOffset(tmil.StartPoint, fDistance, fDirection)
	Call tmipOffset(tmil.EndPoint, fDistance, fDirection)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "tmilCopy")
	Call ERRShow()

End Sub


'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes MapInfo
'Parameters:
'	tmil1 & tmil2 : T_MI_LINE to compare
'Return value:
'	TRUE: If the two T_MI_LINEs are identical
'	FALSE: If the two T_MI_LINEs are NOT identical
'**********************************************************************************************''
Function tmilAreIdentical( tmil1 As T_MI_LINE, tmil2 As T_MI_LINE) As Logical

OnError GoTo ErrorOccured

tmilAreIdentical = FALSE

	If NOT tmipAreIdentical(tmil1.StartPoint, tmil2.StartPoint) Then
		Exit Function
	ElseIf NOT tmipAreIdentical(tmil1.EndPoint, tmil2.EndPoint) Then
		Exit Function
	End If

tmilAreIdentical = TRUE

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "tmilAreIdentical")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes MapInfo
'Parameters:
'	:
'Return value: Float
'Calculating the direction from tmil.StartPoint to tmil.EndPoint
'	in 360 degrees
'	with east as the starting angle
'	and counter clockwise
'**********************************************************************************************''
Function tmilDirection( tmil As T_MI_LINE		'T_MI_LINE to calculate direction of
					) As Float			'Return the direction of the line, East = 0, counter clockwise

Dim	fDirection As Float

OnError GoTo ErrorOccured

tmilDirection = 0

	'//Checking for vertical dirction
	If (tmil.EndPoint.fX - tmil.StartPoint.fX) = 0 Then
		'//not allowed to divide by zero...
		If tmil.EndPoint.fY > tmil.StartPoint.fY Then
			'//tmil.EndPoint is north of tmil.StartPoint...
			tmilDirection	= 90	'degrees
		Else
			'//tmil.EndPoint is south of tmil.StartPoint...
			tmilDirection	= 270	'degrees
		End If

		Exit Function
	End If

	'//Checking for horisontal dirction
	If (tmil.EndPoint.fY = tmil.StartPoint.fY) Then
		If (tmil.EndPoint.fX < tmil.StartPoint.fX) Then
			'//tmil.EndPoint is west of tmil.StartPoint...
			tmilDirection = 180	'degrees
		ElseIf (tmil.EndPoint.fX > tmil.StartPoint.fX) And (tmil.EndPoint.fY = tmil.StartPoint.fY) Then
			'//tmil.EndPoint is east of tmil.StartPoint...
			tmilDirection = 0	'degrees
		End If

		Exit Function
	End If

	fDirection = Atn((tmil.EndPoint.fY - tmil.StartPoint.fY) / (tmil.EndPoint.fX - tmil.StartPoint.fX)) * RAD_2_DEG	'//Converting from RAD to Degrees

	If (tmil.EndPoint.fX < tmil.StartPoint.fX) And (tmil.EndPoint.fY > tmil.StartPoint.fY) Then
		'//tmil.EndPoint is northwest of tmil.StartPoint
		fDirection = fDirection + 180	'degrees
	ElseIf (tmil.EndPoint.fX < tmil.StartPoint.fX) And (tmil.EndPoint.fY < tmil.StartPoint.fY) Then
		'//tmil.EndPoint is southwest of tmil.StartPoint
		fDirection = fDirection + 180	'degrees
	End If

	'//fDirection should be less than or equal to 360 degress
	Do Until fDirection <= 360
		fDirection = fDirection - 360	'//degrees
	Loop
	'//fDirection should be more than or equal to 0 degress
	Do Until fDirection >= 0
		fDirection = fDirection + 360	'//degrees
	Loop

	tmilDirection = fDirection

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "tmilDirection")
	Call ERRShow()

End Function


'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes MapInfo
'Parameters:
'	tmil : T_MI_LINE to use when creating the MapInfo Point
'Return value:
'	A point with the current Pen style
'**********************************************************************************************''
Function tmilToLine( tmil As T_MI_LINE) As Object

OnError GoTo ErrorOccured

	tmilToLine = tmilToLineWithStyle(tmil, CurrentLinePen())
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "tmilToLine")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes MapInfo
'Parameters:
'	tmil : T_MI_LINE to use when creating the MapInfo Point
'	penUse: Pen style to asign to the Point
'Return value:
'	A point with the Pen style given
'**********************************************************************************************''
Function tmilToLineWithStyle( tmil As T_MI_LINE, ByVal penUse As Pen) As Object

Dim	oLine As Object

OnError GoTo ErrorOccured

	oLine = CreateLine(tmil.StartPoint.fX, tmil.StartPoint.fY, tmil.EndPoint.fX, tmil.EndPoint.fY)
	tmilToLineWithStyle = oLine

	Alter Object oLine
		Info OBJ_INFO_SYMBOL, penUse

	tmilToLineWithStyle = oLine

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "tmilToLineWithStyle")
	Call ERRShow()

End Function

'